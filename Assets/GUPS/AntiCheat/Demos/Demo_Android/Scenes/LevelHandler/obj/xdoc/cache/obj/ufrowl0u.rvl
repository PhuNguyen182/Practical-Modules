id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: GUPS.AntiCheat
  commentId: N:GUPS.AntiCheat
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat
    VB: GUPS.AntiCheat
  nameWithType:
    CSharp: GUPS.AntiCheat
    VB: GUPS.AntiCheat
  qualifiedName:
    CSharp: GUPS.AntiCheat
    VB: GUPS.AntiCheat
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.AntiCheatMonitor
    commentId: T:GUPS.AntiCheat.AntiCheatMonitor
    language: CSharp
    name:
      CSharp: AntiCheatMonitor
      VB: AntiCheatMonitor
    nameWithType:
      CSharp: AntiCheatMonitor
      VB: AntiCheatMonitor
    qualifiedName:
      CSharp: GUPS.AntiCheat.AntiCheatMonitor
      VB: GUPS.AntiCheat.AntiCheatMonitor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat
    source:
      id: AntiCheatMonitor
      path: ''
      startLine: 4787
    summary: "\nThe heart of the anti cheat system. The monitor watches all detectors and punishes cheaters. It is a persistent singleton, once created it will exist throughout \nthe whole application.\n"
    remarks: "\nOn awake, the monitor registers all detectors and punishers in the children gameobjects of the monitor. It then subscribes to all detectors and watches for threats. \nIf a threat is detected, the monitor will punish the cheater. The monitor also slowly reduces the threat level over time. The monitor is a thread-safe singleton and \nis persistent throughout the whole application.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AntiCheatMonitor : Singleton<AntiCheatMonitor>'
        VB: >-
          Public Class AntiCheatMonitor

              Inherits Singleton(Of AntiCheatMonitor)
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.IWatcher{IDetectorStatus}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.AntiCheatMonitor.IsPersistent
      commentId: P:GUPS.AntiCheat.AntiCheatMonitor.IsPersistent
      language: CSharp
      name:
        CSharp: IsPersistent
        VB: IsPersistent
      nameWithType:
        CSharp: AntiCheatMonitor.IsPersistent
        VB: AntiCheatMonitor.IsPersistent
      qualifiedName:
        CSharp: GUPS.AntiCheat.AntiCheatMonitor.IsPersistent
        VB: GUPS.AntiCheat.AntiCheatMonitor.IsPersistent
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: IsPersistent
        path: ''
        startLine: 4795
      summary: "\nThe persistent singleton instance of the anti cheat monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool IsPersistent { get; }
          VB: Public Overrides ReadOnly Property IsPersistent As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.AntiCheatMonitor.IsPersistent*
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.AntiCheatMonitor.SensitiveLevel
      commentId: P:GUPS.AntiCheat.AntiCheatMonitor.SensitiveLevel
      language: CSharp
      name:
        CSharp: SensitiveLevel
        VB: SensitiveLevel
      nameWithType:
        CSharp: AntiCheatMonitor.SensitiveLevel
        VB: AntiCheatMonitor.SensitiveLevel
      qualifiedName:
        CSharp: GUPS.AntiCheat.AntiCheatMonitor.SensitiveLevel
        VB: GUPS.AntiCheat.AntiCheatMonitor.SensitiveLevel
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: SensitiveLevel
        path: ''
        startLine: 4814
      summary: "\nThe sensitive level of the monitor. Manage the reaction sensitivity of the monitor to possible detected threats. Ratings of detected threats are scaled by the \nsensitive level beginning at 0 (NOT_SENSITIVE) up to 4 (VERY_SENSITIVE). The higher the sensitive level, the earlier the monitor will react and punish the cheater.\n"
      example: []
      syntax:
        content:
          CSharp: public ESensitiveLevel SensitiveLevel { get; }
          VB: Public ReadOnly Property SensitiveLevel As ESensitiveLevel
        parameters: []
        return:
          type: GUPS.AntiCheat.ESensitiveLevel
      overload: GUPS.AntiCheat.AntiCheatMonitor.SensitiveLevel*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.AntiCheatMonitor.ThreatLevel
      commentId: P:GUPS.AntiCheat.AntiCheatMonitor.ThreatLevel
      language: CSharp
      name:
        CSharp: ThreatLevel
        VB: ThreatLevel
      nameWithType:
        CSharp: AntiCheatMonitor.ThreatLevel
        VB: AntiCheatMonitor.ThreatLevel
      qualifiedName:
        CSharp: GUPS.AntiCheat.AntiCheatMonitor.ThreatLevel
        VB: GUPS.AntiCheat.AntiCheatMonitor.ThreatLevel
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: ThreatLevel
        path: ''
        startLine: 4824
      summary: "\nThe current threat level of the monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public float ThreatLevel { get; }
          VB: Public ReadOnly Property ThreatLevel As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.AntiCheatMonitor.ThreatLevel*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.AntiCheatMonitor.GetDetector``1
      commentId: M:GUPS.AntiCheat.AntiCheatMonitor.GetDetector``1
      language: CSharp
      name:
        CSharp: GetDetector<TDetector>()
        VB: GetDetector(Of TDetector)()
      nameWithType:
        CSharp: AntiCheatMonitor.GetDetector<TDetector>()
        VB: AntiCheatMonitor.GetDetector(Of TDetector)()
      qualifiedName:
        CSharp: GUPS.AntiCheat.AntiCheatMonitor.GetDetector<TDetector>()
        VB: GUPS.AntiCheat.AntiCheatMonitor.GetDetector(Of TDetector)()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: GetDetector
        path: ''
        startLine: 4858
      summary: "\nGet the first detector of the specified type.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public TDetector GetDetector<TDetector>()

                where TDetector : IDetector
          VB: Public Function GetDetector(Of TDetector As IDetector) As TDetector
        typeParameters:
        - id: TDetector
          description: The type of the detector to get.
        return:
          type: '{TDetector}'
          description: The first detector of the specified type.
      overload: GUPS.AntiCheat.AntiCheatMonitor.GetDetector*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.AntiCheatMonitor.OnNext(IDetectorStatus)
      commentId: M:GUPS.AntiCheat.AntiCheatMonitor.OnNext(IDetectorStatus)
      language: CSharp
      name:
        CSharp: OnNext(IDetectorStatus)
        VB: OnNext(IDetectorStatus)
      nameWithType:
        CSharp: AntiCheatMonitor.OnNext(IDetectorStatus)
        VB: AntiCheatMonitor.OnNext(IDetectorStatus)
      qualifiedName:
        CSharp: GUPS.AntiCheat.AntiCheatMonitor.OnNext(IDetectorStatus)
        VB: GUPS.AntiCheat.AntiCheatMonitor.OnNext(IDetectorStatus)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: OnNext
        path: ''
        startLine: 4890
      summary: "\nThe monitor is notified of a threat by a detector.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnNext(IDetectorStatus value)
          VB: Public Sub OnNext(value As IDetectorStatus)
        parameters:
        - id: value
          type: GUPS.AntiCheat.IDetectorStatus
          description: The detected threat status.
      overload: GUPS.AntiCheat.AntiCheatMonitor.OnNext*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.AntiCheatMonitor.OnError(Exception)
      commentId: M:GUPS.AntiCheat.AntiCheatMonitor.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: AntiCheatMonitor.OnError(Exception)
        VB: AntiCheatMonitor.OnError(Exception)
      qualifiedName:
        CSharp: GUPS.AntiCheat.AntiCheatMonitor.OnError(Exception)
        VB: GUPS.AntiCheat.AntiCheatMonitor.OnError(Exception)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: OnError
        path: ''
        startLine: 4906
      summary: "\nThe monitor is notified of an error by a detector.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnError(Exception _Error)
          VB: Public Sub OnError(_Error As Exception)
        parameters:
        - id: _Error
          type: GUPS.AntiCheat.Exception
          description: The error that occurred.
      overload: GUPS.AntiCheat.AntiCheatMonitor.OnError*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.AntiCheatMonitor.OnCompleted
      commentId: M:GUPS.AntiCheat.AntiCheatMonitor.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: AntiCheatMonitor.OnCompleted()
        VB: AntiCheatMonitor.OnCompleted()
      qualifiedName:
        CSharp: GUPS.AntiCheat.AntiCheatMonitor.OnCompleted()
        VB: GUPS.AntiCheat.AntiCheatMonitor.OnCompleted()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: OnCompleted
        path: ''
        startLine: 4914
      summary: "\nThe monitor is notified of the completion of a detector.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnCompleted()
          VB: Public Sub OnCompleted
      overload: GUPS.AntiCheat.AntiCheatMonitor.OnCompleted*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.AntiCheatMonitor.Dispose
      commentId: M:GUPS.AntiCheat.AntiCheatMonitor.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: AntiCheatMonitor.Dispose()
        VB: AntiCheatMonitor.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.AntiCheatMonitor.Dispose()
        VB: GUPS.AntiCheat.AntiCheatMonitor.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: Dispose
        path: ''
        startLine: 4922
      summary: "\nOn dispose, do nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.AntiCheatMonitor.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.AntiCheatMonitor.GetPunisher(UInt32)
      commentId: M:GUPS.AntiCheat.AntiCheatMonitor.GetPunisher(UInt32)
      language: CSharp
      name:
        CSharp: GetPunisher(UInt32)
        VB: GetPunisher(UInt32)
      nameWithType:
        CSharp: AntiCheatMonitor.GetPunisher(UInt32)
        VB: AntiCheatMonitor.GetPunisher(UInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.AntiCheatMonitor.GetPunisher(UInt32)
        VB: GUPS.AntiCheat.AntiCheatMonitor.GetPunisher(UInt32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: GetPunisher
        path: ''
        startLine: 4956
      summary: "\nReturns a list of all punishers that have a threat rating lower than the threat level and can punish multiple times or have not punished yet. \n"
      example: []
      syntax:
        content:
          CSharp: public List<IPunisher> GetPunisher(UInt32 _ThreatLevel)
          VB: Public Function GetPunisher(_ThreatLevel As UInt32) As List(Of IPunisher)
        parameters:
        - id: _ThreatLevel
          type: GUPS.AntiCheat.UInt32
          description: The current threat level.
        return:
          type: GUPS.AntiCheat.List{IPunisher}
          description: A list of punishable punishers, sorted by threat rating ascending.
      overload: GUPS.AntiCheat.AntiCheatMonitor.GetPunisher*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.AntiCheatMonitor.Awake
      commentId: M:GUPS.AntiCheat.AntiCheatMonitor.Awake
      language: CSharp
      name:
        CSharp: Awake()
        VB: Awake()
      nameWithType:
        CSharp: AntiCheatMonitor.Awake()
        VB: AntiCheatMonitor.Awake()
      qualifiedName:
        CSharp: GUPS.AntiCheat.AntiCheatMonitor.Awake()
        VB: GUPS.AntiCheat.AntiCheatMonitor.Awake()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: Awake
        path: ''
        startLine: 4986
      summary: "\nOn start of the monitor, register all detectors and punishers in the children of the monitor.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Awake()
          VB: Protected Overrides Sub Awake
      overload: GUPS.AntiCheat.AntiCheatMonitor.Awake*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: GUPS.AntiCheat.AntiCheatMonitor.FixedUpdate
      commentId: M:GUPS.AntiCheat.AntiCheatMonitor.FixedUpdate
      language: CSharp
      name:
        CSharp: FixedUpdate()
        VB: FixedUpdate()
      nameWithType:
        CSharp: AntiCheatMonitor.FixedUpdate()
        VB: AntiCheatMonitor.FixedUpdate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.AntiCheatMonitor.FixedUpdate()
        VB: GUPS.AntiCheat.AntiCheatMonitor.FixedUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: FixedUpdate
        path: ''
        startLine: 5026
      summary: "\nOn the fixed update of the monitor, reduce the threat level over time.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void FixedUpdate()
          VB: Protected Overridable Sub FixedUpdate
      overload: GUPS.AntiCheat.AntiCheatMonitor.FixedUpdate*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
  - id: GUPS.AntiCheat.ESensitiveLevel
    commentId: T:GUPS.AntiCheat.ESensitiveLevel
    language: CSharp
    name:
      CSharp: ESensitiveLevel
      VB: ESensitiveLevel
    nameWithType:
      CSharp: ESensitiveLevel
      VB: ESensitiveLevel
    qualifiedName:
      CSharp: GUPS.AntiCheat.ESensitiveLevel
      VB: GUPS.AntiCheat.ESensitiveLevel
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat
    source:
      id: ESensitiveLevel
      path: ''
      startLine: 5044
    summary: "\nThe sensitivity level of the monitor. Manages the reaction sensitivity of the monitor to possible detected threats.\n"
    example: []
    syntax:
      content:
        CSharp: 'public enum ESensitiveLevel : byte'
        VB: Public Enum ESensitiveLevel As Byte
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: GUPS.AntiCheat.ESensitiveLevel.NOT_SENSITIVE
      commentId: F:GUPS.AntiCheat.ESensitiveLevel.NOT_SENSITIVE
      language: CSharp
      name:
        CSharp: NOT_SENSITIVE
        VB: NOT_SENSITIVE
      nameWithType:
        CSharp: ESensitiveLevel.NOT_SENSITIVE
        VB: ESensitiveLevel.NOT_SENSITIVE
      qualifiedName:
        CSharp: GUPS.AntiCheat.ESensitiveLevel.NOT_SENSITIVE
        VB: GUPS.AntiCheat.ESensitiveLevel.NOT_SENSITIVE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: NOT_SENSITIVE
        path: ''
        startLine: 5049
      summary: "\nDo not react to any possible cheating.\n"
      example: []
      syntax:
        content:
          CSharp: NOT_SENSITIVE = 0
          VB: NOT_SENSITIVE = 0
        return:
          type: GUPS.AntiCheat.ESensitiveLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.ESensitiveLevel.LESS_SENSITIVE
      commentId: F:GUPS.AntiCheat.ESensitiveLevel.LESS_SENSITIVE
      language: CSharp
      name:
        CSharp: LESS_SENSITIVE
        VB: LESS_SENSITIVE
      nameWithType:
        CSharp: ESensitiveLevel.LESS_SENSITIVE
        VB: ESensitiveLevel.LESS_SENSITIVE
      qualifiedName:
        CSharp: GUPS.AntiCheat.ESensitiveLevel.LESS_SENSITIVE
        VB: GUPS.AntiCheat.ESensitiveLevel.LESS_SENSITIVE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: LESS_SENSITIVE
        path: ''
        startLine: 5054
      summary: "\nReact on a high threat rating.\n"
      example: []
      syntax:
        content:
          CSharp: LESS_SENSITIVE = 1
          VB: LESS_SENSITIVE = 1
        return:
          type: GUPS.AntiCheat.ESensitiveLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.ESensitiveLevel.MODERATE
      commentId: F:GUPS.AntiCheat.ESensitiveLevel.MODERATE
      language: CSharp
      name:
        CSharp: MODERATE
        VB: MODERATE
      nameWithType:
        CSharp: ESensitiveLevel.MODERATE
        VB: ESensitiveLevel.MODERATE
      qualifiedName:
        CSharp: GUPS.AntiCheat.ESensitiveLevel.MODERATE
        VB: GUPS.AntiCheat.ESensitiveLevel.MODERATE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: MODERATE
        path: ''
        startLine: 5059
      summary: "\nReact on a moderate threat rating.\n"
      example: []
      syntax:
        content:
          CSharp: MODERATE = 2
          VB: MODERATE = 2
        return:
          type: GUPS.AntiCheat.ESensitiveLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.ESensitiveLevel.SENSITIVE
      commentId: F:GUPS.AntiCheat.ESensitiveLevel.SENSITIVE
      language: CSharp
      name:
        CSharp: SENSITIVE
        VB: SENSITIVE
      nameWithType:
        CSharp: ESensitiveLevel.SENSITIVE
        VB: ESensitiveLevel.SENSITIVE
      qualifiedName:
        CSharp: GUPS.AntiCheat.ESensitiveLevel.SENSITIVE
        VB: GUPS.AntiCheat.ESensitiveLevel.SENSITIVE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: SENSITIVE
        path: ''
        startLine: 5064
      summary: "\nReact on a low threat rating. May cause false positives.\n"
      example: []
      syntax:
        content:
          CSharp: SENSITIVE = 3
          VB: SENSITIVE = 3
        return:
          type: GUPS.AntiCheat.ESensitiveLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.ESensitiveLevel.VERY_SENSITIVE
      commentId: F:GUPS.AntiCheat.ESensitiveLevel.VERY_SENSITIVE
      language: CSharp
      name:
        CSharp: VERY_SENSITIVE
        VB: VERY_SENSITIVE
      nameWithType:
        CSharp: ESensitiveLevel.VERY_SENSITIVE
        VB: ESensitiveLevel.VERY_SENSITIVE
      qualifiedName:
        CSharp: GUPS.AntiCheat.ESensitiveLevel.VERY_SENSITIVE
        VB: GUPS.AntiCheat.ESensitiveLevel.VERY_SENSITIVE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat
      source:
        id: VERY_SENSITIVE
        path: ''
        startLine: 5069
      summary: "\nReact on a any threat rating. May cause false positives.\n"
      example: []
      syntax:
        content:
          CSharp: VERY_SENSITIVE = 4
          VB: VERY_SENSITIVE = 4
        return:
          type: GUPS.AntiCheat.ESensitiveLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
- id: GUPS.AntiCheat.Editor
  commentId: N:GUPS.AntiCheat.Editor
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Editor
    VB: GUPS.AntiCheat.Editor
  nameWithType:
    CSharp: GUPS.AntiCheat.Editor
    VB: GUPS.AntiCheat.Editor
  qualifiedName:
    CSharp: GUPS.AntiCheat.Editor
    VB: GUPS.AntiCheat.Editor
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor
    commentId: T:GUPS.AntiCheat.Editor.AntiCheatMonitorEditor
    language: CSharp
    name:
      CSharp: AntiCheatMonitorEditor
      VB: AntiCheatMonitorEditor
    nameWithType:
      CSharp: AntiCheatMonitorEditor
      VB: AntiCheatMonitorEditor
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor
      VB: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: AntiCheatMonitorEditor
      path: ''
      startLine: 3052
    summary: "\nCustom editor for inspecting and modifying the AntiCheatMonitor component in the Unity editor.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AntiCheatMonitorEditor : UnityEditor.Editor'
        VB: >-
          Public Class AntiCheatMonitorEditor

              Inherits UnityEditor.Editor
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnEnable
      commentId: M:GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnEnable
      language: CSharp
      name:
        CSharp: OnEnable()
        VB: OnEnable()
      nameWithType:
        CSharp: AntiCheatMonitorEditor.OnEnable()
        VB: AntiCheatMonitorEditor.OnEnable()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnEnable()
        VB: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnEnable()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnEnable
        path: ''
        startLine: 3061
      summary: "\nCalled when the editor is enabled, initializing serialized properties.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnEnable()
          VB: Protected Overridable Sub OnEnable
      overload: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnEnable*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnInspectorGUI
      commentId: M:GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnInspectorGUI
      language: CSharp
      name:
        CSharp: OnInspectorGUI()
        VB: OnInspectorGUI()
      nameWithType:
        CSharp: AntiCheatMonitorEditor.OnInspectorGUI()
        VB: AntiCheatMonitorEditor.OnInspectorGUI()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnInspectorGUI()
        VB: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnInspectorGUI()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnInspectorGUI
        path: ''
        startLine: 3070
      summary: "\nOverride of the default inspector GUI to provide a custom interface for the AntiCheatMonitor component.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnInspectorGUI()
          VB: Public Overrides Sub OnInspectorGUI
      overload: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnInspectorGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetMonitors
      commentId: M:GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetMonitors
      language: CSharp
      name:
        CSharp: GetMonitors()
        VB: GetMonitors()
      nameWithType:
        CSharp: AntiCheatMonitorEditor.GetMonitors()
        VB: AntiCheatMonitorEditor.GetMonitors()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetMonitors()
        VB: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetMonitors()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: GetMonitors
        path: ''
        startLine: 3174
      summary: "\nGet all monitors of the target object and its children.\n"
      example: []
      syntax:
        content:
          CSharp: protected IMonitor[] GetMonitors()
          VB: Protected Function GetMonitors As IMonitor()
        return:
          type: GUPS.AntiCheat.IMonitor[]
          description: An array of monitor.
      overload: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetMonitors*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetDetectors
      commentId: M:GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetDetectors
      language: CSharp
      name:
        CSharp: GetDetectors()
        VB: GetDetectors()
      nameWithType:
        CSharp: AntiCheatMonitorEditor.GetDetectors()
        VB: AntiCheatMonitorEditor.GetDetectors()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetDetectors()
        VB: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetDetectors()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: GetDetectors
        path: ''
        startLine: 3190
      summary: "\nGet all detectors of the target object and its children.\n"
      example: []
      syntax:
        content:
          CSharp: protected IDetector[] GetDetectors()
          VB: Protected Function GetDetectors As IDetector()
        return:
          type: GUPS.AntiCheat.IDetector[]
          description: An array of detector.
      overload: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetDetectors*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetPunishers
      commentId: M:GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetPunishers
      language: CSharp
      name:
        CSharp: GetPunishers()
        VB: GetPunishers()
      nameWithType:
        CSharp: AntiCheatMonitorEditor.GetPunishers()
        VB: AntiCheatMonitorEditor.GetPunishers()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetPunishers()
        VB: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetPunishers()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: GetPunishers
        path: ''
        startLine: 3206
      summary: "\nGet all punishers of the target object and its children.\n"
      example: []
      syntax:
        content:
          CSharp: protected IPunisher[] GetPunishers()
          VB: Protected Function GetPunishers As IPunisher()
        return:
          type: GUPS.AntiCheat.IPunisher[]
          description: An array of punisher.
      overload: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetPunishers*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
  - id: GUPS.AntiCheat.Editor.ProtectedBoolDrawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedBoolDrawer
    language: CSharp
    name:
      CSharp: ProtectedBoolDrawer
      VB: ProtectedBoolDrawer
    nameWithType:
      CSharp: ProtectedBoolDrawer
      VB: ProtectedBoolDrawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedBoolDrawer
      VB: GUPS.AntiCheat.Editor.ProtectedBoolDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedBoolDrawer
      path: ''
      startLine: 3665
    summary: "\nCustom property drawer for bool.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedBoolDrawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedBoolDrawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedBoolDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedBoolDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedBoolDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedBoolDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedBoolDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedBoolDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 3674
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedBoolDrawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedDecimalDrawer
    language: CSharp
    name:
      CSharp: ProtectedDecimalDrawer
      VB: ProtectedDecimalDrawer
    nameWithType:
      CSharp: ProtectedDecimalDrawer
      VB: ProtectedDecimalDrawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer
      VB: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedDecimalDrawer
      path: ''
      startLine: 3705
    summary: "\nCustom property drawer for decimal.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedDecimalDrawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedDecimalDrawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedDecimalDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedDecimalDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedDecimalDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 3714
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedDoubleDrawer
    language: CSharp
    name:
      CSharp: ProtectedDoubleDrawer
      VB: ProtectedDoubleDrawer
    nameWithType:
      CSharp: ProtectedDoubleDrawer
      VB: ProtectedDoubleDrawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer
      VB: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedDoubleDrawer
      path: ''
      startLine: 3745
    summary: "\nCustom property drawer for double.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedDoubleDrawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedDoubleDrawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedDoubleDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedDoubleDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedDoubleDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 3754
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedFloatDrawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedFloatDrawer
    language: CSharp
    name:
      CSharp: ProtectedFloatDrawer
      VB: ProtectedFloatDrawer
    nameWithType:
      CSharp: ProtectedFloatDrawer
      VB: ProtectedFloatDrawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedFloatDrawer
      VB: GUPS.AntiCheat.Editor.ProtectedFloatDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedFloatDrawer
      path: ''
      startLine: 3785
    summary: "\nCustom property drawer for float.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedFloatDrawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedFloatDrawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedFloatDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedFloatDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedFloatDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedFloatDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedFloatDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedFloatDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 3794
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedFloatDrawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedInt32Drawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedInt32Drawer
    language: CSharp
    name:
      CSharp: ProtectedInt32Drawer
      VB: ProtectedInt32Drawer
    nameWithType:
      CSharp: ProtectedInt32Drawer
      VB: ProtectedInt32Drawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedInt32Drawer
      VB: GUPS.AntiCheat.Editor.ProtectedInt32Drawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedInt32Drawer
      path: ''
      startLine: 3828
    summary: "\nCustom property drawer for int32.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedInt32Drawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedInt32Drawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedInt32Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedInt32Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedInt32Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedInt32Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedInt32Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedInt32Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 3837
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedInt32Drawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedInt64Drawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedInt64Drawer
    language: CSharp
    name:
      CSharp: ProtectedInt64Drawer
      VB: ProtectedInt64Drawer
    nameWithType:
      CSharp: ProtectedInt64Drawer
      VB: ProtectedInt64Drawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedInt64Drawer
      VB: GUPS.AntiCheat.Editor.ProtectedInt64Drawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedInt64Drawer
      path: ''
      startLine: 3871
    summary: "\nCustom property drawer for int64.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedInt64Drawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedInt64Drawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedInt64Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedInt64Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedInt64Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedInt64Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedInt64Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedInt64Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 3880
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedInt64Drawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    language: CSharp
    name:
      CSharp: ProtectedPropertyDrawer
      VB: ProtectedPropertyDrawer
    nameWithType:
      CSharp: ProtectedPropertyDrawer
      VB: ProtectedPropertyDrawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
      VB: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedPropertyDrawer
      path: ''
      startLine: 3911
    summary: "\nCustom property drawers for protected fields.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedPropertyDrawer : PropertyDrawer'
        VB: >-
          Public Class ProtectedPropertyDrawer

              Inherits PropertyDrawer
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUI(Rect, SerializedProperty, GUIContent)
        VB: OnGUI(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedPropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: ProtectedPropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUI
        path: ''
        startLine: 3920
      summary: "\nShared gui method for the drawer.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
          VB: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedPropertyDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedPropertyDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 3948
      summary: "\nCustom drawer for a property.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnGUIProperty(Rect position, SerializedProperty property, GUIContent label)
          VB: Protected Overridable Sub OnGUIProperty(position As Rect, property As SerializedProperty, label As GUIContent)
        parameters:
        - id: position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
  - id: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer
    language: CSharp
    name:
      CSharp: ProtectedQuaternionDrawer
      VB: ProtectedQuaternionDrawer
    nameWithType:
      CSharp: ProtectedQuaternionDrawer
      VB: ProtectedQuaternionDrawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer
      VB: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedQuaternionDrawer
      path: ''
      startLine: 3962
    summary: "\nCustom property drawer for quaternion.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedQuaternionDrawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedQuaternionDrawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedQuaternionDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedQuaternionDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 3971
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedStringDrawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedStringDrawer
    language: CSharp
    name:
      CSharp: ProtectedStringDrawer
      VB: ProtectedStringDrawer
    nameWithType:
      CSharp: ProtectedStringDrawer
      VB: ProtectedStringDrawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedStringDrawer
      VB: GUPS.AntiCheat.Editor.ProtectedStringDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedStringDrawer
      path: ''
      startLine: 4025
    summary: "\nCustom property drawer for string.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedStringDrawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedStringDrawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedStringDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedStringDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedStringDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedStringDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedStringDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedStringDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 4034
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedStringDrawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedUInt32Drawer
    language: CSharp
    name:
      CSharp: ProtectedUInt32Drawer
      VB: ProtectedUInt32Drawer
    nameWithType:
      CSharp: ProtectedUInt32Drawer
      VB: ProtectedUInt32Drawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer
      VB: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedUInt32Drawer
      path: ''
      startLine: 4068
    summary: "\nCustom property drawer for uint32.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedUInt32Drawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedUInt32Drawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedUInt32Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedUInt32Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedUInt32Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 4077
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedUInt64Drawer
    language: CSharp
    name:
      CSharp: ProtectedUInt64Drawer
      VB: ProtectedUInt64Drawer
    nameWithType:
      CSharp: ProtectedUInt64Drawer
      VB: ProtectedUInt64Drawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer
      VB: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedUInt64Drawer
      path: ''
      startLine: 4111
    summary: "\nCustom property drawer for uint64.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedUInt64Drawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedUInt64Drawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedUInt64Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedUInt64Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedUInt64Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 4120
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedVector2Drawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedVector2Drawer
    language: CSharp
    name:
      CSharp: ProtectedVector2Drawer
      VB: ProtectedVector2Drawer
    nameWithType:
      CSharp: ProtectedVector2Drawer
      VB: ProtectedVector2Drawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedVector2Drawer
      VB: GUPS.AntiCheat.Editor.ProtectedVector2Drawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedVector2Drawer
      path: ''
      startLine: 4151
    summary: "\nCustom property drawer for vector2.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedVector2Drawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedVector2Drawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedVector2Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedVector2Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedVector2Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedVector2Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedVector2Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedVector2Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 4160
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedVector2Drawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer
    language: CSharp
    name:
      CSharp: ProtectedVector2IntDrawer
      VB: ProtectedVector2IntDrawer
    nameWithType:
      CSharp: ProtectedVector2IntDrawer
      VB: ProtectedVector2IntDrawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer
      VB: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedVector2IntDrawer
      path: ''
      startLine: 4191
    summary: "\nCustom property drawer for vector2 int.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedVector2IntDrawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedVector2IntDrawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedVector2IntDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedVector2IntDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 4200
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedVector3Drawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedVector3Drawer
    language: CSharp
    name:
      CSharp: ProtectedVector3Drawer
      VB: ProtectedVector3Drawer
    nameWithType:
      CSharp: ProtectedVector3Drawer
      VB: ProtectedVector3Drawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedVector3Drawer
      VB: GUPS.AntiCheat.Editor.ProtectedVector3Drawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedVector3Drawer
      path: ''
      startLine: 4231
    summary: "\nCustom property drawer for vector3.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedVector3Drawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedVector3Drawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedVector3Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedVector3Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedVector3Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedVector3Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedVector3Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedVector3Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 4240
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedVector3Drawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer
    language: CSharp
    name:
      CSharp: ProtectedVector3IntDrawer
      VB: ProtectedVector3IntDrawer
    nameWithType:
      CSharp: ProtectedVector3IntDrawer
      VB: ProtectedVector3IntDrawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer
      VB: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedVector3IntDrawer
      path: ''
      startLine: 4271
    summary: "\nCustom property drawer for vector3 int.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedVector3IntDrawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedVector3IntDrawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedVector3IntDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedVector3IntDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 4280
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedVector4Drawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedVector4Drawer
    language: CSharp
    name:
      CSharp: ProtectedVector4Drawer
      VB: ProtectedVector4Drawer
    nameWithType:
      CSharp: ProtectedVector4Drawer
      VB: ProtectedVector4Drawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedVector4Drawer
      VB: GUPS.AntiCheat.Editor.ProtectedVector4Drawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedVector4Drawer
      path: ''
      startLine: 4311
    summary: "\nCustom property drawer for vector4.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedVector4Drawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedVector4Drawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedVector4Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedVector4Drawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedVector4Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedVector4Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedVector4Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedVector4Drawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 4320
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedVector4Drawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer
    commentId: T:GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer
    language: CSharp
    name:
      CSharp: ProtectedVector4IntDrawer
      VB: ProtectedVector4IntDrawer
    nameWithType:
      CSharp: ProtectedVector4IntDrawer
      VB: ProtectedVector4IntDrawer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer
      VB: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor
    source:
      id: ProtectedVector4IntDrawer
      path: ''
      startLine: 4351
    summary: "\nCustom property drawer for vector4 int.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedVector4IntDrawer : ProtectedPropertyDrawer'
        VB: >-
          Public Class ProtectedVector4IntDrawer

              Inherits ProtectedPropertyDrawer
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    inheritedMembers:
    - GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      commentId: M:GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      language: CSharp
      name:
        CSharp: OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: OnGUIProperty(Rect, SerializedProperty, GUIContent)
      nameWithType:
        CSharp: ProtectedVector4IntDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: ProtectedVector4IntDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
        VB: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer.OnGUIProperty(Rect, SerializedProperty, GUIContent)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor
      source:
        id: OnGUIProperty
        path: ''
        startLine: 4360
      summary: "\nOverrides the custom gui property method to render the bool.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnGUIProperty(Rect _Position, SerializedProperty _Property, GUIContent _Label)
          VB: Protected Overrides Sub OnGUIProperty(_Position As Rect, _Property As SerializedProperty, _Label As GUIContent)
        parameters:
        - id: _Position
          type: GUPS.AntiCheat.Rect
          description: ''
        - id: _Property
          type: GUPS.AntiCheat.SerializedProperty
          description: ''
        - id: _Label
          type: GUPS.AntiCheat.GUIContent
          description: ''
      overload: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer.OnGUIProperty*
      overridden: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
- id: GUPS.AntiCheat.Editor.Helper
  commentId: N:GUPS.AntiCheat.Editor.Helper
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Editor.Helper
    VB: GUPS.AntiCheat.Editor.Helper
  nameWithType:
    CSharp: GUPS.AntiCheat.Editor.Helper
    VB: GUPS.AntiCheat.Editor.Helper
  qualifiedName:
    CSharp: GUPS.AntiCheat.Editor.Helper
    VB: GUPS.AntiCheat.Editor.Helper
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Editor.Helper.StyleHelper
    commentId: T:GUPS.AntiCheat.Editor.Helper.StyleHelper
    language: CSharp
    name:
      CSharp: StyleHelper
      VB: StyleHelper
    nameWithType:
      CSharp: StyleHelper
      VB: StyleHelper
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.Helper.StyleHelper
      VB: GUPS.AntiCheat.Editor.Helper.StyleHelper
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor.Helper
    source:
      id: StyleHelper
      path: ''
      startLine: 3606
    summary: "\nHelper class for gui styles.\n"
    example: []
    syntax:
      content:
        CSharp: public static class StyleHelper
        VB: Public Module StyleHelper
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: GUPS.AntiCheat.Editor.Helper.StyleHelper.DarkBackground
      commentId: P:GUPS.AntiCheat.Editor.Helper.StyleHelper.DarkBackground
      language: CSharp
      name:
        CSharp: DarkBackground
        VB: DarkBackground
      nameWithType:
        CSharp: StyleHelper.DarkBackground
        VB: StyleHelper.DarkBackground
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.Helper.StyleHelper.DarkBackground
        VB: GUPS.AntiCheat.Editor.Helper.StyleHelper.DarkBackground
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor.Helper
      source:
        id: DarkBackground
        path: ''
        startLine: 3611
      summary: "\nReturns the style for a dark background.\n"
      example: []
      syntax:
        content:
          CSharp: public static GUIStyle DarkBackground { get; }
          VB: Public Shared ReadOnly Property DarkBackground As GUIStyle
        parameters: []
        return:
          type: GUPS.AntiCheat.GUIStyle
      overload: GUPS.AntiCheat.Editor.Helper.StyleHelper.DarkBackground*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
  - id: GUPS.AntiCheat.Editor.Helper.TextureHelper
    commentId: T:GUPS.AntiCheat.Editor.Helper.TextureHelper
    language: CSharp
    name:
      CSharp: TextureHelper
      VB: TextureHelper
    nameWithType:
      CSharp: TextureHelper
      VB: TextureHelper
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.Helper.TextureHelper
      VB: GUPS.AntiCheat.Editor.Helper.TextureHelper
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor.Helper
    source:
      id: TextureHelper
      path: ''
      startLine: 3631
    summary: "\nA helper class for creating textures.\n"
    example: []
    syntax:
      content:
        CSharp: public static class TextureHelper
        VB: Public Module TextureHelper
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: GUPS.AntiCheat.Editor.Helper.TextureHelper.MakeTexture(System.Int32,System.Int32,Color)
      commentId: M:GUPS.AntiCheat.Editor.Helper.TextureHelper.MakeTexture(System.Int32,System.Int32,Color)
      language: CSharp
      name:
        CSharp: MakeTexture(Int32, Int32, Color)
        VB: MakeTexture(Int32, Int32, Color)
      nameWithType:
        CSharp: TextureHelper.MakeTexture(Int32, Int32, Color)
        VB: TextureHelper.MakeTexture(Int32, Int32, Color)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.Helper.TextureHelper.MakeTexture(System.Int32, System.Int32, Color)
        VB: GUPS.AntiCheat.Editor.Helper.TextureHelper.MakeTexture(System.Int32, System.Int32, Color)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor.Helper
      source:
        id: MakeTexture
        path: ''
        startLine: 3640
      summary: "\nCreates a texture with the given width, height and color.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D MakeTexture(int _Width, int _Height, Color _Color)
          VB: Public Shared Function MakeTexture(_Width As Integer, _Height As Integer, _Color As Color) As Texture2D
        parameters:
        - id: _Width
          type: System.Int32
          description: The width of the texture.
        - id: _Height
          type: System.Int32
          description: The height of the texture.
        - id: _Color
          type: GUPS.AntiCheat.Color
          description: The color of the texture.
        return:
          type: GUPS.AntiCheat.Texture2D
          description: Returns the created texture.
      overload: GUPS.AntiCheat.Editor.Helper.TextureHelper.MakeTexture*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: GUPS.AntiCheat.Editor.Window
  commentId: N:GUPS.AntiCheat.Editor.Window
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Editor.Window
    VB: GUPS.AntiCheat.Editor.Window
  nameWithType:
    CSharp: GUPS.AntiCheat.Editor.Window
    VB: GUPS.AntiCheat.Editor.Window
  qualifiedName:
    CSharp: GUPS.AntiCheat.Editor.Window
    VB: GUPS.AntiCheat.Editor.Window
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow
    commentId: T:GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow
    language: CSharp
    name:
      CSharp: GlobalSettingsWindow
      VB: GlobalSettingsWindow
    nameWithType:
      CSharp: GlobalSettingsWindow
      VB: GlobalSettingsWindow
    qualifiedName:
      CSharp: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow
      VB: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Editor.Window
    source:
      id: GlobalSettingsWindow
      path: ''
      startLine: 4402
    summary: "\nConfiguration window for AntiCheat Settings in the project settings.\n"
    example: []
    syntax:
      content:
        CSharp: public static class GlobalSettingsWindow
        VB: Public Module GlobalSettingsWindow
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow.CreateAntiCheatSettingsProvider
      commentId: M:GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow.CreateAntiCheatSettingsProvider
      language: CSharp
      name:
        CSharp: CreateAntiCheatSettingsProvider()
        VB: CreateAntiCheatSettingsProvider()
      nameWithType:
        CSharp: GlobalSettingsWindow.CreateAntiCheatSettingsProvider()
        VB: GlobalSettingsWindow.CreateAntiCheatSettingsProvider()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow.CreateAntiCheatSettingsProvider()
        VB: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow.CreateAntiCheatSettingsProvider()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Editor.Window
      source:
        id: CreateAntiCheatSettingsProvider
        path: ''
        startLine: 4413
      summary: "\nA static method to return a SettingsProvider for the AntiCheat settings, displayed in the project settings.\n"
      example: []
      syntax:
        content:
          CSharp: public static SettingsProvider CreateAntiCheatSettingsProvider()
          VB: Public Shared Function CreateAntiCheatSettingsProvider As SettingsProvider
        return:
          type: GUPS.AntiCheat.SettingsProvider
          description: The created SettingsProvider.
      overload: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow.CreateAntiCheatSettingsProvider*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: GUPS.AntiCheat.Core.Detector
  commentId: N:GUPS.AntiCheat.Core.Detector
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Core.Detector
    VB: GUPS.AntiCheat.Core.Detector
  nameWithType:
    CSharp: GUPS.AntiCheat.Core.Detector
    VB: GUPS.AntiCheat.Core.Detector
  qualifiedName:
    CSharp: GUPS.AntiCheat.Core.Detector
    VB: GUPS.AntiCheat.Core.Detector
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Core.Detector.IDetector
    commentId: T:GUPS.AntiCheat.Core.Detector.IDetector
    language: CSharp
    name:
      CSharp: IDetector
      VB: IDetector
    nameWithType:
      CSharp: IDetector
      VB: IDetector
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Detector.IDetector
      VB: GUPS.AntiCheat.Core.Detector.IDetector
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Detector
    source:
      id: IDetector
      path: ''
      startLine: 6900
    summary: "\nRepresents an interface for detectors that can watch for possible cheating and notify observers about detected threats.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Core.Detector.IDetector\" data-throw-if-not-resolved=\"false\"></xref> interface defines the contract for objects that act as detectors to identify potential cheating activities.\nDetectors implementing this interface can watch for suspicious behavior and notify observers through the observer pattern when threats are detected.\n</p>\n\n<p>\nThe interface extends three other interfaces, providing additional functionality and specifications:\n- <see cref=\"!:IWatcher&lt;IWatchedSubject>\"></see>: Allows the detector to observe and notify observers about changes in watched subjects.\n- <see cref=\"!:IWatchAble&lt;IDetectorStatus>\"></see>: Enables the detector to be observed for changes in its status, providing information about its current state.\n- <see cref=\"!:IThreatRated\"></see>: Specifies the capability to rate the severity of detected threats.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public interface IDetector
        VB: >-
          Public Interface IDetector

              Inherits IWatcher(Of IWatchedSubject), IWatchAble(Of IDetectorStatus), IThreatRated
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Core.Detector.IDetector.Name
      commentId: P:GUPS.AntiCheat.Core.Detector.IDetector.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: IDetector.Name
        VB: IDetector.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Detector.IDetector.Name
        VB: GUPS.AntiCheat.Core.Detector.IDetector.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Detector
      source:
        id: Name
        path: ''
        startLine: 6905
      summary: "\nThe name of the detector.\n"
      example: []
      syntax:
        content:
          CSharp: string Name { get; }
          VB: ReadOnly Property Name As String
        parameters: []
        return:
          type: System.String
      overload: GUPS.AntiCheat.Core.Detector.IDetector.Name*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Detector.IDetector.IsSupported
      commentId: P:GUPS.AntiCheat.Core.Detector.IDetector.IsSupported
      language: CSharp
      name:
        CSharp: IsSupported
        VB: IsSupported
      nameWithType:
        CSharp: IDetector.IsSupported
        VB: IDetector.IsSupported
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Detector.IDetector.IsSupported
        VB: GUPS.AntiCheat.Core.Detector.IDetector.IsSupported
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Detector
      source:
        id: IsSupported
        path: ''
        startLine: 6910
      summary: "\nGets a value indicating whether the detector is supported on the current platform.\n"
      example: []
      syntax:
        content:
          CSharp: bool IsSupported { get; }
          VB: ReadOnly Property IsSupported As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Core.Detector.IDetector.IsSupported*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Detector.IDetector.IsActive
      commentId: P:GUPS.AntiCheat.Core.Detector.IDetector.IsActive
      language: CSharp
      name:
        CSharp: IsActive
        VB: IsActive
      nameWithType:
        CSharp: IDetector.IsActive
        VB: IDetector.IsActive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Detector.IDetector.IsActive
        VB: GUPS.AntiCheat.Core.Detector.IDetector.IsActive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Detector
      source:
        id: IsActive
        path: ''
        startLine: 6915
      summary: "\nGets a value indicating whether the detector is active and watching for possible cheating.\n"
      example: []
      syntax:
        content:
          CSharp: bool IsActive { get; }
          VB: ReadOnly Property IsActive As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Core.Detector.IDetector.IsActive*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Detector.IDetector.PossibleCheatingDetected
      commentId: P:GUPS.AntiCheat.Core.Detector.IDetector.PossibleCheatingDetected
      language: CSharp
      name:
        CSharp: PossibleCheatingDetected
        VB: PossibleCheatingDetected
      nameWithType:
        CSharp: IDetector.PossibleCheatingDetected
        VB: IDetector.PossibleCheatingDetected
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Detector.IDetector.PossibleCheatingDetected
        VB: GUPS.AntiCheat.Core.Detector.IDetector.PossibleCheatingDetected
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Detector
      source:
        id: PossibleCheatingDetected
        path: ''
        startLine: 6920
      summary: "\nGets a value indicating whether the detector has detected a possible cheating activity.\n"
      example: []
      syntax:
        content:
          CSharp: bool PossibleCheatingDetected { get; }
          VB: ReadOnly Property PossibleCheatingDetected As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Core.Detector.IDetector.PossibleCheatingDetected*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    references:
      GUPS.AntiCheat.Core.Detector.IDetector: 
  - id: GUPS.AntiCheat.Core.Detector.IDetectorStatus
    commentId: T:GUPS.AntiCheat.Core.Detector.IDetectorStatus
    language: CSharp
    name:
      CSharp: IDetectorStatus
      VB: IDetectorStatus
    nameWithType:
      CSharp: IDetectorStatus
      VB: IDetectorStatus
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Detector.IDetectorStatus
      VB: GUPS.AntiCheat.Core.Detector.IDetectorStatus
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Detector
    source:
      id: IDetectorStatus
      path: ''
      startLine: 6945
    summary: "\nRepresents an interface for detector subjects that are watched or monitored, enhancing threat assessment capabilities by incorporating a possibility of false positives.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Core.Detector.IDetectorStatus\" data-throw-if-not-resolved=\"false\"></xref> interface defines the contract for objects that act as status subjects for detectors, providing information about their current state.\nDetectors observing objects implementing this interface gain access to threat assessment capabilities, including the possibility of false positives.\n</p>\n\n<p>\nThe interface extends two other interfaces, providing additional functionality and specifications:\n- <see cref=\"!:IWatchedSubject\"></see>: Allows the subject to be observed and monitored by detectors.\n- <see cref=\"!:IThreatRated\"></see>: Specifies the capability to rate the severity of threats.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public interface IDetectorStatus
        VB: >-
          Public Interface IDetectorStatus

              Inherits IWatchedSubject, IThreatRated
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Core.Detector.IDetectorStatus.PossibilityOfFalsePositive
      commentId: P:GUPS.AntiCheat.Core.Detector.IDetectorStatus.PossibilityOfFalsePositive
      language: CSharp
      name:
        CSharp: PossibilityOfFalsePositive
        VB: PossibilityOfFalsePositive
      nameWithType:
        CSharp: IDetectorStatus.PossibilityOfFalsePositive
        VB: IDetectorStatus.PossibilityOfFalsePositive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Detector.IDetectorStatus.PossibilityOfFalsePositive
        VB: GUPS.AntiCheat.Core.Detector.IDetectorStatus.PossibilityOfFalsePositive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Detector
      source:
        id: PossibilityOfFalsePositive
        path: ''
        startLine: 6954
      summary: "\nGets a value indicating the possibility of a false positive when assessing threats for the implementing subject from 0.0 to 1.0.\n"
      remarks: "\nThe value is represented as a positive float value ranging from 0.0 to 1.0, where 0.0 indicates no possibility of a false positive,\nand 1.0 denotes a 100% possibility of a false positive.\n"
      example: []
      syntax:
        content:
          CSharp: float PossibilityOfFalsePositive { get; }
          VB: ReadOnly Property PossibilityOfFalsePositive As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Core.Detector.IDetectorStatus.PossibilityOfFalsePositive*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    references:
      GUPS.AntiCheat.Core.Detector.IDetectorStatus: 
- id: GUPS.AntiCheat.Core.Hash
  commentId: N:GUPS.AntiCheat.Core.Hash
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Core.Hash
    VB: GUPS.AntiCheat.Core.Hash
  nameWithType:
    CSharp: GUPS.AntiCheat.Core.Hash
    VB: GUPS.AntiCheat.Core.Hash
  qualifiedName:
    CSharp: GUPS.AntiCheat.Core.Hash
    VB: GUPS.AntiCheat.Core.Hash
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
    commentId: T:GUPS.AntiCheat.Core.Hash.EHashAlgorithm
    language: CSharp
    name:
      CSharp: EHashAlgorithm
      VB: EHashAlgorithm
    nameWithType:
      CSharp: EHashAlgorithm
      VB: EHashAlgorithm
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
      VB: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Hash
    source:
      id: EHashAlgorithm
      path: ''
      startLine: 6966
    summary: "\nA list of hash algorithms that can be used to hash data.\n"
    example: []
    syntax:
      content:
        CSharp: 'public enum EHashAlgorithm : byte'
        VB: Public Enum EHashAlgorithm As Byte
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.NONE
      commentId: F:GUPS.AntiCheat.Core.Hash.EHashAlgorithm.NONE
      language: CSharp
      name:
        CSharp: NONE
        VB: NONE
      nameWithType:
        CSharp: EHashAlgorithm.NONE
        VB: EHashAlgorithm.NONE
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.NONE
        VB: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.NONE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: NONE
        path: ''
        startLine: 6972
      summary: "\nNo hash algorithm.\n"
      example: []
      syntax:
        content:
          CSharp: NONE = 0
          VB: NONE = 0
        return:
          type: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.MD5
      commentId: F:GUPS.AntiCheat.Core.Hash.EHashAlgorithm.MD5
      language: CSharp
      name:
        CSharp: MD5
        VB: MD5
      nameWithType:
        CSharp: EHashAlgorithm.MD5
        VB: EHashAlgorithm.MD5
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.MD5
        VB: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.MD5
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: MD5
        path: ''
        startLine: 6977
      summary: "\nMD5 hash algorithm. Not recommended for security purposes.\n"
      example: []
      syntax:
        content:
          CSharp: MD5 = 1
          VB: MD5 = 1
        return:
          type: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA1
      commentId: F:GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA1
      language: CSharp
      name:
        CSharp: SHA1
        VB: SHA1
      nameWithType:
        CSharp: EHashAlgorithm.SHA1
        VB: EHashAlgorithm.SHA1
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA1
        VB: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA1
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: SHA1
        path: ''
        startLine: 6982
      summary: "\nSHA1 hash algorithm. Not recommended for security purposes.\n"
      example: []
      syntax:
        content:
          CSharp: SHA1 = 2
          VB: SHA1 = 2
        return:
          type: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA256
      commentId: F:GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA256
      language: CSharp
      name:
        CSharp: SHA256
        VB: SHA256
      nameWithType:
        CSharp: EHashAlgorithm.SHA256
        VB: EHashAlgorithm.SHA256
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA256
        VB: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA256
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: SHA256
        path: ''
        startLine: 6987
      summary: "\nSHA256 hash algorithm.\n"
      example: []
      syntax:
        content:
          CSharp: SHA256 = 3
          VB: SHA256 = 3
        return:
          type: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA384
      commentId: F:GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA384
      language: CSharp
      name:
        CSharp: SHA384
        VB: SHA384
      nameWithType:
        CSharp: EHashAlgorithm.SHA384
        VB: EHashAlgorithm.SHA384
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA384
        VB: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA384
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: SHA384
        path: ''
        startLine: 6992
      summary: "\nSHA384 hash algorithm.\n"
      example: []
      syntax:
        content:
          CSharp: SHA384 = 4
          VB: SHA384 = 4
        return:
          type: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA512
      commentId: F:GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA512
      language: CSharp
      name:
        CSharp: SHA512
        VB: SHA512
      nameWithType:
        CSharp: EHashAlgorithm.SHA512
        VB: EHashAlgorithm.SHA512
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA512
        VB: GUPS.AntiCheat.Core.Hash.EHashAlgorithm.SHA512
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: SHA512
        path: ''
        startLine: 6997
      summary: "\nSHA512 hash algorithm.\n"
      example: []
      syntax:
        content:
          CSharp: SHA512 = 5
          VB: SHA512 = 5
        return:
          type: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: GUPS.AntiCheat.Core.Hash.HashHelper
    commentId: T:GUPS.AntiCheat.Core.Hash.HashHelper
    language: CSharp
    name:
      CSharp: HashHelper
      VB: HashHelper
    nameWithType:
      CSharp: HashHelper
      VB: HashHelper
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Hash.HashHelper
      VB: GUPS.AntiCheat.Core.Hash.HashHelper
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Hash
    source:
      id: HashHelper
      path: ''
      startLine: 7027
    summary: "\nProvides utility methods for hashing operations, including obtaining hash algorithms, computing hash values, and converting \nhash values to hexadecimal strings.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Core.Hash.HashHelper\" data-throw-if-not-resolved=\"false\"></xref> class offers a collection of static methods to facilitate various hashing tasks. It provides \nfunctionalities such as obtaining hash algorithms based on specified algorithms or names, computing hash values from byte arrays, \nand converting hash values to hexadecimal strings.\n</p>\n<p>\nThe class is designed to be used statically and does not require instantiation. It supports multiple hash algorithms, including \nMD5, SHA1, SHA256, SHA384, and SHA512. Users can choose to compute hash values using these algorithms and convert the results \nto hexadecimal strings with optional uppercasing and separators.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public static class HashHelper
        VB: Public Module HashHelper
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: GUPS.AntiCheat.Core.Hash.HashHelper.GetName(GUPS.AntiCheat.Core.Hash.EHashAlgorithm)
      commentId: M:GUPS.AntiCheat.Core.Hash.HashHelper.GetName(GUPS.AntiCheat.Core.Hash.EHashAlgorithm)
      language: CSharp
      name:
        CSharp: GetName(EHashAlgorithm)
        VB: GetName(EHashAlgorithm)
      nameWithType:
        CSharp: HashHelper.GetName(EHashAlgorithm)
        VB: HashHelper.GetName(EHashAlgorithm)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.HashHelper.GetName(GUPS.AntiCheat.Core.Hash.EHashAlgorithm)
        VB: GUPS.AntiCheat.Core.Hash.HashHelper.GetName(GUPS.AntiCheat.Core.Hash.EHashAlgorithm)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: GetName
        path: ''
        startLine: 7034
      summary: "\nRetrieves the name corresponding to the specified hash algorithm enumeration.\n"
      example: []
      syntax:
        content:
          CSharp: public static String GetName(EHashAlgorithm _HashAlgorithm)
          VB: Public Shared Function GetName(_HashAlgorithm As EHashAlgorithm) As String
        parameters:
        - id: _HashAlgorithm
          type: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
          description: The enumeration value representing the hash algorithm.
        return:
          type: GUPS.AntiCheat.String
          description: The name of the hash algorithm.
      overload: GUPS.AntiCheat.Core.Hash.HashHelper.GetName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm(GUPS.AntiCheat.Core.Hash.EHashAlgorithm)
      commentId: M:GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm(GUPS.AntiCheat.Core.Hash.EHashAlgorithm)
      language: CSharp
      name:
        CSharp: GetHashAlgorithm(EHashAlgorithm)
        VB: GetHashAlgorithm(EHashAlgorithm)
      nameWithType:
        CSharp: HashHelper.GetHashAlgorithm(EHashAlgorithm)
        VB: HashHelper.GetHashAlgorithm(EHashAlgorithm)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm(GUPS.AntiCheat.Core.Hash.EHashAlgorithm)
        VB: GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm(GUPS.AntiCheat.Core.Hash.EHashAlgorithm)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: GetHashAlgorithm
        path: ''
        startLine: 7058
      summary: "\nRetrieves the hash algorithm corresponding to the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">_HashAlgorithm</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public static HashAlgorithm GetHashAlgorithm(EHashAlgorithm _HashAlgorithm)
          VB: Public Shared Function GetHashAlgorithm(_HashAlgorithm As EHashAlgorithm) As HashAlgorithm
        parameters:
        - id: _HashAlgorithm
          type: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
          description: The enumeration value representing the hash algorithm.
        return:
          type: GUPS.AntiCheat.HashAlgorithm
          description: The <see cref="!:HashAlgorithm"></see> instance corresponding to the specified algorithm.
      overload: GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm(String)
      commentId: M:GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm(String)
      language: CSharp
      name:
        CSharp: GetHashAlgorithm(String)
        VB: GetHashAlgorithm(String)
      nameWithType:
        CSharp: HashHelper.GetHashAlgorithm(String)
        VB: HashHelper.GetHashAlgorithm(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm(String)
        VB: GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: GetHashAlgorithm
        path: ''
        startLine: 7082
      summary: "\nRetrieves the hash algorithm corresponding to the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">_HashAlgorithm</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public static HashAlgorithm GetHashAlgorithm(String _HashAlgorithm)
          VB: Public Shared Function GetHashAlgorithm(_HashAlgorithm As String) As HashAlgorithm
        parameters:
        - id: _HashAlgorithm
          type: GUPS.AntiCheat.String
          description: The name of the hash algorithm.
        return:
          type: GUPS.AntiCheat.HashAlgorithm
          description: The <see cref="!:HashAlgorithm"></see> instance corresponding to the specified algorithm name.
      overload: GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(GUPS.AntiCheat.Core.Hash.EHashAlgorithm,System.Byte[])
      commentId: M:GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(GUPS.AntiCheat.Core.Hash.EHashAlgorithm,System.Byte[])
      language: CSharp
      name:
        CSharp: ComputeHash(EHashAlgorithm, Byte[])
        VB: ComputeHash(EHashAlgorithm, Byte())
      nameWithType:
        CSharp: HashHelper.ComputeHash(EHashAlgorithm, Byte[])
        VB: HashHelper.ComputeHash(EHashAlgorithm, Byte())
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(GUPS.AntiCheat.Core.Hash.EHashAlgorithm, System.Byte[])
        VB: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(GUPS.AntiCheat.Core.Hash.EHashAlgorithm, System.Byte())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: ComputeHash
        path: ''
        startLine: 7093
      summary: "\nComputes the hash value of the specified byte array using the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">_HashAlgorithm</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] ComputeHash(EHashAlgorithm _HashAlgorithm, byte[] _Buffer)
          VB: Public Shared Function ComputeHash(_HashAlgorithm As EHashAlgorithm, _Buffer As Byte()) As Byte()
        parameters:
        - id: _HashAlgorithm
          type: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
          description: The enumeration value representing the hash algorithm.
        - id: _Buffer
          type: System.Byte[]
          description: The input byte array to compute the hash value.
        return:
          type: System.Byte[]
          description: The computed hash value as a byte array.
      overload: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(String,System.Byte[])
      commentId: M:GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(String,System.Byte[])
      language: CSharp
      name:
        CSharp: ComputeHash(String, Byte[])
        VB: ComputeHash(String, Byte())
      nameWithType:
        CSharp: HashHelper.ComputeHash(String, Byte[])
        VB: HashHelper.ComputeHash(String, Byte())
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(String, System.Byte[])
        VB: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(String, System.Byte())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: ComputeHash
        path: ''
        startLine: 7107
      summary: "\nComputes the hash value of the specified byte array using the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">_HashAlgorithm</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] ComputeHash(String _HashAlgorithm, byte[] _Buffer)
          VB: Public Shared Function ComputeHash(_HashAlgorithm As String, _Buffer As Byte()) As Byte()
        parameters:
        - id: _HashAlgorithm
          type: GUPS.AntiCheat.String
          description: The name of the hash algorithm.
        - id: _Buffer
          type: System.Byte[]
          description: The input byte array to compute the hash value.
        return:
          type: System.Byte[]
          description: The computed hash value as a byte array.
      overload: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(GUPS.AntiCheat.Core.Hash.EHashAlgorithm,Stream)
      commentId: M:GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(GUPS.AntiCheat.Core.Hash.EHashAlgorithm,Stream)
      language: CSharp
      name:
        CSharp: ComputeHash(EHashAlgorithm, Stream)
        VB: ComputeHash(EHashAlgorithm, Stream)
      nameWithType:
        CSharp: HashHelper.ComputeHash(EHashAlgorithm, Stream)
        VB: HashHelper.ComputeHash(EHashAlgorithm, Stream)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(GUPS.AntiCheat.Core.Hash.EHashAlgorithm, Stream)
        VB: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(GUPS.AntiCheat.Core.Hash.EHashAlgorithm, Stream)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: ComputeHash
        path: ''
        startLine: 7121
      summary: "\nComputes the hash value of the specified stream using the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">_HashAlgorithm</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] ComputeHash(EHashAlgorithm _HashAlgorithm, Stream _Stream)
          VB: Public Shared Function ComputeHash(_HashAlgorithm As EHashAlgorithm, _Stream As Stream) As Byte()
        parameters:
        - id: _HashAlgorithm
          type: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
          description: The enumeration value representing the hash algorithm.
        - id: _Stream
          type: GUPS.AntiCheat.Stream
          description: The input stream to compute the hash value.
        return:
          type: System.Byte[]
          description: The computed hash value as a byte array.
      overload: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(String,Stream)
      commentId: M:GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(String,Stream)
      language: CSharp
      name:
        CSharp: ComputeHash(String, Stream)
        VB: ComputeHash(String, Stream)
      nameWithType:
        CSharp: HashHelper.ComputeHash(String, Stream)
        VB: HashHelper.ComputeHash(String, Stream)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(String, Stream)
        VB: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash(String, Stream)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: ComputeHash
        path: ''
        startLine: 7135
      summary: "\nComputes the hash value of the specified stream using the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">_HashAlgorithm</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] ComputeHash(String _HashAlgorithm, Stream _Stream)
          VB: Public Shared Function ComputeHash(_HashAlgorithm As String, _Stream As Stream) As Byte()
        parameters:
        - id: _HashAlgorithm
          type: GUPS.AntiCheat.String
          description: The name of the hash algorithm.
        - id: _Stream
          type: GUPS.AntiCheat.Stream
          description: The input stream to compute the hash value.
        return:
          type: System.Byte[]
          description: The computed hash value as a byte array.
      overload: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Core.Hash.HashHelper.CompareHashes(System.Byte[],System.Byte[])
      commentId: M:GUPS.AntiCheat.Core.Hash.HashHelper.CompareHashes(System.Byte[],System.Byte[])
      language: CSharp
      name:
        CSharp: CompareHashes(Byte[], Byte[])
        VB: CompareHashes(Byte(), Byte())
      nameWithType:
        CSharp: HashHelper.CompareHashes(Byte[], Byte[])
        VB: HashHelper.CompareHashes(Byte(), Byte())
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.HashHelper.CompareHashes(System.Byte[], System.Byte[])
        VB: GUPS.AntiCheat.Core.Hash.HashHelper.CompareHashes(System.Byte(), System.Byte())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: CompareHashes
        path: ''
        startLine: 7153
      summary: "\nCompares two byte arrays representing cryptographic hashes for equality.\n"
      remarks: "\nThis method performs a time-constant comparison to mitigate timing attacks.\nIt should be used for comparing cryptographic hashes, not for general byte array comparison.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool CompareHashes(byte[] _Hash1, byte[] __Hash2)
          VB: Public Shared Function CompareHashes(_Hash1 As Byte(), __Hash2 As Byte()) As Boolean
        parameters:
        - id: _Hash1
          type: System.Byte[]
          description: The first hash to compare.
        - id: __Hash2
          type: System.Byte[]
          description: The second hash to compare.
        return:
          type: System.Boolean
          description: True if the hashes are equal, false otherwise.
      overload: GUPS.AntiCheat.Core.Hash.HashHelper.CompareHashes*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Core.Hash.HashHelper.ToHex(System.Byte[],System.Boolean,System.Boolean)
      commentId: M:GUPS.AntiCheat.Core.Hash.HashHelper.ToHex(System.Byte[],System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: ToHex(Byte[], Boolean, Boolean)
        VB: ToHex(Byte(), Boolean, Boolean)
      nameWithType:
        CSharp: HashHelper.ToHex(Byte[], Boolean, Boolean)
        VB: HashHelper.ToHex(Byte(), Boolean, Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.HashHelper.ToHex(System.Byte[], System.Boolean, System.Boolean)
        VB: GUPS.AntiCheat.Core.Hash.HashHelper.ToHex(System.Byte(), System.Boolean, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: ToHex
        path: ''
        startLine: 7182
      summary: "\nConverts the specified byte array to a hexadecimal string representation.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToHex(byte[] _Buffer, bool _UpperCase, bool _Separator)
          VB: Public Shared Function ToHex(_Buffer As Byte(), _UpperCase As Boolean, _Separator As Boolean) As String
        parameters:
        - id: _Buffer
          type: System.Byte[]
          description: The byte array to convert to a hexadecimal string.
        - id: _UpperCase
          type: System.Boolean
          description: Specifies whether the hexadecimal string should be in uppercase.
        - id: _Separator
          type: System.Boolean
          description: Specifies whether to include separators between hexadecimal pairs.
        return:
          type: System.String
          description: The hexadecimal string representation of the byte array.
      overload: GUPS.AntiCheat.Core.Hash.HashHelper.ToHex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Core.Hash.HashHelper.FromHex(System.String,System.Boolean)
      commentId: M:GUPS.AntiCheat.Core.Hash.HashHelper.FromHex(System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: FromHex(String, Boolean)
        VB: FromHex(String, Boolean)
      nameWithType:
        CSharp: HashHelper.FromHex(String, Boolean)
        VB: HashHelper.FromHex(String, Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Hash.HashHelper.FromHex(System.String, System.Boolean)
        VB: GUPS.AntiCheat.Core.Hash.HashHelper.FromHex(System.String, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Hash
      source:
        id: FromHex
        path: ''
        startLine: 7207
      summary: "\nConverts the specified hexadecimal string to a byte array.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] FromHex(string _Hex, bool _Separator)
          VB: Public Shared Function FromHex(_Hex As String, _Separator As Boolean) As Byte()
        parameters:
        - id: _Hex
          type: System.String
          description: The hexadecimal string to convert to a byte array.
        - id: _Separator
          type: System.Boolean
          description: Specifies whether the hexadecimal string includes separators between hexadecimal pairs.
        return:
          type: System.Byte[]
          description: The byte array representation of the hexadecimal string.
      overload: GUPS.AntiCheat.Core.Hash.HashHelper.FromHex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    references:
      GUPS.AntiCheat.Core.Hash.HashHelper: 
- id: GUPS.AntiCheat.Core.HoneyPot
  commentId: N:GUPS.AntiCheat.Core.HoneyPot
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Core.HoneyPot
    VB: GUPS.AntiCheat.Core.HoneyPot
  nameWithType:
    CSharp: GUPS.AntiCheat.Core.HoneyPot
    VB: GUPS.AntiCheat.Core.HoneyPot
  qualifiedName:
    CSharp: GUPS.AntiCheat.Core.HoneyPot
    VB: GUPS.AntiCheat.Core.HoneyPot
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot
    commentId: T:GUPS.AntiCheat.Core.HoneyPot.IHoneyPot
    language: CSharp
    name:
      CSharp: IHoneyPot
      VB: IHoneyPot
    nameWithType:
      CSharp: IHoneyPot
      VB: IHoneyPot
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot
      VB: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.HoneyPot
    source:
      id: IHoneyPot
      path: ''
      startLine: 7249
    summary: "\nRepresents an interface for classes implementing a honey pot mechanism to detect and counteract unauthorized activities.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Core.HoneyPot.IHoneyPot\" data-throw-if-not-resolved=\"false\"></xref> interface outlines the contract for classes that implement a honey pot, which is a deceptive element used to identify \nand counteract unauthorized or malicious actions.\n</p>\n\n<p>\nThe interface extends <see cref=\"!:IWatchAble&lt;IWatchedSubject>\"></see>, allowing honey pot implementations to be observed and monitored for changes by external entities.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public interface IHoneyPot
        VB: >-
          Public Interface IHoneyPot

              Inherits IWatchAble(Of IWatchedSubject)
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot.PlaceHoneyPot
      commentId: M:GUPS.AntiCheat.Core.HoneyPot.IHoneyPot.PlaceHoneyPot
      language: CSharp
      name:
        CSharp: PlaceHoneyPot()
        VB: PlaceHoneyPot()
      nameWithType:
        CSharp: IHoneyPot.PlaceHoneyPot()
        VB: IHoneyPot.PlaceHoneyPot()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot.PlaceHoneyPot()
        VB: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot.PlaceHoneyPot()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.HoneyPot
      source:
        id: PlaceHoneyPot
        path: ''
        startLine: 7254
      summary: "\nPlaces a honey pot, a deceptive element designed to attract and identify unauthorized or malicious actions.\n"
      example: []
      syntax:
        content:
          CSharp: void PlaceHoneyPot()
          VB: Sub PlaceHoneyPot
      overload: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot.PlaceHoneyPot*
      modifiers:
        CSharp: []
        VB: []
    references:
      GUPS.AntiCheat.Core.HoneyPot.IHoneyPot: 
- id: GUPS.AntiCheat.Core.Integrity
  commentId: N:GUPS.AntiCheat.Core.Integrity
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Core.Integrity
    VB: GUPS.AntiCheat.Core.Integrity
  nameWithType:
    CSharp: GUPS.AntiCheat.Core.Integrity
    VB: GUPS.AntiCheat.Core.Integrity
  qualifiedName:
    CSharp: GUPS.AntiCheat.Core.Integrity
    VB: GUPS.AntiCheat.Core.Integrity
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Core.Integrity.IDataIntegrity
    commentId: T:GUPS.AntiCheat.Core.Integrity.IDataIntegrity
    language: CSharp
    name:
      CSharp: IDataIntegrity
      VB: IDataIntegrity
    nameWithType:
      CSharp: IDataIntegrity
      VB: IDataIntegrity
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Integrity.IDataIntegrity
      VB: GUPS.AntiCheat.Core.Integrity.IDataIntegrity
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Integrity
    source:
      id: IDataIntegrity
      path: ''
      startLine: 7268
    summary: "\nRepresents an interface for classes responsible for ensuring and verifying data integrity.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Core.Integrity.IDataIntegrity\" data-throw-if-not-resolved=\"false\"></xref> interface defines the contract for classes that are responsible for maintaining and validating the integrity of their contained data.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public interface IDataIntegrity
        VB: Public Interface IDataIntegrity
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.HasIntegrity
      commentId: P:GUPS.AntiCheat.Core.Integrity.IDataIntegrity.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: IDataIntegrity.HasIntegrity
        VB: IDataIntegrity.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.HasIntegrity
        VB: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Integrity
      source:
        id: HasIntegrity
        path: ''
        startLine: 7273
      summary: "\nGets a value indicating whether the implementing class has data integrity.\n"
      example: []
      syntax:
        content:
          CSharp: bool HasIntegrity { get; }
          VB: ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.HasIntegrity*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Core.Integrity.IDataIntegrity.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: IDataIntegrity.CheckIntegrity()
        VB: IDataIntegrity.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.CheckIntegrity()
        VB: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Integrity
      source:
        id: CheckIntegrity
        path: ''
        startLine: 7281
      summary: "\nChecks the integrity of the data within the implementing class.\n"
      example: []
      syntax:
        content:
          CSharp: bool CheckIntegrity()
          VB: Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: "\nTrue if the data integrity check is successful; otherwise, false.\n"
      overload: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.CheckIntegrity*
      modifiers:
        CSharp: []
        VB: []
    references:
      GUPS.AntiCheat.Core.Integrity.IDataIntegrity: 
- id: GUPS.AntiCheat.Core.Monitor
  commentId: N:GUPS.AntiCheat.Core.Monitor
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Core.Monitor
    VB: GUPS.AntiCheat.Core.Monitor
  nameWithType:
    CSharp: GUPS.AntiCheat.Core.Monitor
    VB: GUPS.AntiCheat.Core.Monitor
  qualifiedName:
    CSharp: GUPS.AntiCheat.Core.Monitor
    VB: GUPS.AntiCheat.Core.Monitor
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Core.Monitor.IMonitor
    commentId: T:GUPS.AntiCheat.Core.Monitor.IMonitor
    language: CSharp
    name:
      CSharp: IMonitor
      VB: IMonitor
    nameWithType:
      CSharp: IMonitor
      VB: IMonitor
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Monitor.IMonitor
      VB: GUPS.AntiCheat.Core.Monitor.IMonitor
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Monitor
    source:
      id: IMonitor
      path: ''
      startLine: 7296
    summary: "\nDefines an interface for implementing a monitor, which provides methods to control the lifecycle of a monitoring process.\n"
    remarks: "\n<p>\nThe IMonitor interface outlines the contract for objects that serve as monitors, responsible for managing the lifecycle\nof a monitoring process. Monitors are used to collect and process data related to a specific aspect of the operating system \nor the game / application.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public interface IMonitor
        VB: Public Interface IMonitor
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Name
      commentId: P:GUPS.AntiCheat.Core.Monitor.IMonitor.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: IMonitor.Name
        VB: IMonitor.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Monitor.IMonitor.Name
        VB: GUPS.AntiCheat.Core.Monitor.IMonitor.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Monitor
      source:
        id: Name
        path: ''
        startLine: 7301
      summary: "\nThe name of the monitor.\n"
      example: []
      syntax:
        content:
          CSharp: string Name { get; }
          VB: ReadOnly Property Name As String
        parameters: []
        return:
          type: System.String
      overload: GUPS.AntiCheat.Core.Monitor.IMonitor.Name*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Monitor.IMonitor.IsStarted
      commentId: P:GUPS.AntiCheat.Core.Monitor.IMonitor.IsStarted
      language: CSharp
      name:
        CSharp: IsStarted
        VB: IsStarted
      nameWithType:
        CSharp: IMonitor.IsStarted
        VB: IMonitor.IsStarted
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Monitor.IMonitor.IsStarted
        VB: GUPS.AntiCheat.Core.Monitor.IMonitor.IsStarted
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Monitor
      source:
        id: IsStarted
        path: ''
        startLine: 7306
      summary: "\nGets a value indicating whether the monitor has been started and is currently running.\n"
      example: []
      syntax:
        content:
          CSharp: bool IsStarted { get; }
          VB: ReadOnly Property IsStarted As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Core.Monitor.IMonitor.IsStarted*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Monitor.IMonitor.IsPaused
      commentId: P:GUPS.AntiCheat.Core.Monitor.IMonitor.IsPaused
      language: CSharp
      name:
        CSharp: IsPaused
        VB: IsPaused
      nameWithType:
        CSharp: IMonitor.IsPaused
        VB: IMonitor.IsPaused
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Monitor.IMonitor.IsPaused
        VB: GUPS.AntiCheat.Core.Monitor.IMonitor.IsPaused
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Monitor
      source:
        id: IsPaused
        path: ''
        startLine: 7311
      summary: "\nGets a value indicating whether the monitor has been paused and is currently suspended.\n"
      example: []
      syntax:
        content:
          CSharp: bool IsPaused { get; }
          VB: ReadOnly Property IsPaused As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Core.Monitor.IMonitor.IsPaused*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Start
      commentId: M:GUPS.AntiCheat.Core.Monitor.IMonitor.Start
      language: CSharp
      name:
        CSharp: Start()
        VB: Start()
      nameWithType:
        CSharp: IMonitor.Start()
        VB: IMonitor.Start()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Monitor.IMonitor.Start()
        VB: GUPS.AntiCheat.Core.Monitor.IMonitor.Start()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Monitor
      source:
        id: Start
        path: ''
        startLine: 7316
      summary: "\nInitiates the monitoring process, enabling the monitor to start collecting and processing data.\n"
      example: []
      syntax:
        content:
          CSharp: void Start()
          VB: Sub Start
      overload: GUPS.AntiCheat.Core.Monitor.IMonitor.Start*
      modifiers:
        CSharp: []
        VB: []
    - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Pause
      commentId: M:GUPS.AntiCheat.Core.Monitor.IMonitor.Pause
      language: CSharp
      name:
        CSharp: Pause()
        VB: Pause()
      nameWithType:
        CSharp: IMonitor.Pause()
        VB: IMonitor.Pause()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Monitor.IMonitor.Pause()
        VB: GUPS.AntiCheat.Core.Monitor.IMonitor.Pause()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Monitor
      source:
        id: Pause
        path: ''
        startLine: 7321
      summary: "\nPauses the monitoring process, temporarily suspending data collection and processing without terminating the monitor.\n"
      example: []
      syntax:
        content:
          CSharp: void Pause()
          VB: Sub Pause
      overload: GUPS.AntiCheat.Core.Monitor.IMonitor.Pause*
      modifiers:
        CSharp: []
        VB: []
    - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Resume
      commentId: M:GUPS.AntiCheat.Core.Monitor.IMonitor.Resume
      language: CSharp
      name:
        CSharp: Resume()
        VB: Resume()
      nameWithType:
        CSharp: IMonitor.Resume()
        VB: IMonitor.Resume()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Monitor.IMonitor.Resume()
        VB: GUPS.AntiCheat.Core.Monitor.IMonitor.Resume()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Monitor
      source:
        id: Resume
        path: ''
        startLine: 7326
      summary: "\nResumes the monitoring process after a pause, allowing the monitor to continue collecting and processing data.\n"
      example: []
      syntax:
        content:
          CSharp: void Resume()
          VB: Sub Resume
      overload: GUPS.AntiCheat.Core.Monitor.IMonitor.Resume*
      modifiers:
        CSharp: []
        VB: []
    - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Stop
      commentId: M:GUPS.AntiCheat.Core.Monitor.IMonitor.Stop
      language: CSharp
      name:
        CSharp: Stop()
        VB: Stop()
      nameWithType:
        CSharp: IMonitor.Stop()
        VB: IMonitor.Stop()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Monitor.IMonitor.Stop()
        VB: GUPS.AntiCheat.Core.Monitor.IMonitor.Stop()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Monitor
      source:
        id: Stop
        path: ''
        startLine: 7331
      summary: "\nStops and terminates the monitoring process, concluding data collection and finalizing any necessary cleanup operations.\n"
      example: []
      syntax:
        content:
          CSharp: void Stop()
          VB: Sub Stop
      overload: GUPS.AntiCheat.Core.Monitor.IMonitor.Stop*
      modifiers:
        CSharp: []
        VB: []
- id: GUPS.AntiCheat.Core.Obfuscate
  commentId: N:GUPS.AntiCheat.Core.Obfuscate
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Core.Obfuscate
    VB: GUPS.AntiCheat.Core.Obfuscate
  nameWithType:
    CSharp: GUPS.AntiCheat.Core.Obfuscate
    VB: GUPS.AntiCheat.Core.Obfuscate
  qualifiedName:
    CSharp: GUPS.AntiCheat.Core.Obfuscate
    VB: GUPS.AntiCheat.Core.Obfuscate
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Core.Obfuscate.IObfuscated
    commentId: T:GUPS.AntiCheat.Core.Obfuscate.IObfuscated
    language: CSharp
    name:
      CSharp: IObfuscated
      VB: IObfuscated
    nameWithType:
      CSharp: IObfuscated
      VB: IObfuscated
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Obfuscate.IObfuscated
      VB: GUPS.AntiCheat.Core.Obfuscate.IObfuscated
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Obfuscate
    source:
      id: IObfuscated
      path: ''
      startLine: 7345
    summary: "\nRepresents an interface for classes responsible for implementing obfuscation.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Core.Obfuscate.IObfuscated\" data-throw-if-not-resolved=\"false\"></xref> interface defines the contract for classes that are tasked with applying obfuscation to their own content.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public interface IObfuscated
        VB: Public Interface IObfuscated
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Core.Obfuscate.IObfuscated.Obfuscate
      commentId: M:GUPS.AntiCheat.Core.Obfuscate.IObfuscated.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: IObfuscated.Obfuscate()
        VB: IObfuscated.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Obfuscate.IObfuscated.Obfuscate()
        VB: GUPS.AntiCheat.Core.Obfuscate.IObfuscated.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Obfuscate
      source:
        id: Obfuscate
        path: ''
        startLine: 7350
      summary: "\nApplies obfuscation to the implementing class.\n"
      example: []
      syntax:
        content:
          CSharp: void Obfuscate()
          VB: Sub Obfuscate
      overload: GUPS.AntiCheat.Core.Obfuscate.IObfuscated.Obfuscate*
      modifiers:
        CSharp: []
        VB: []
    references:
      GUPS.AntiCheat.Core.Obfuscate.IObfuscated: 
- id: GUPS.AntiCheat.Core.Protected
  commentId: N:GUPS.AntiCheat.Core.Protected
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Core.Protected
    VB: GUPS.AntiCheat.Core.Protected
  nameWithType:
    CSharp: GUPS.AntiCheat.Core.Protected
    VB: GUPS.AntiCheat.Core.Protected
  qualifiedName:
    CSharp: GUPS.AntiCheat.Core.Protected
    VB: GUPS.AntiCheat.Core.Protected
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Core.Protected.IProtected
    commentId: T:GUPS.AntiCheat.Core.Protected.IProtected
    language: CSharp
    name:
      CSharp: IProtected
      VB: IProtected
    nameWithType:
      CSharp: IProtected
      VB: IProtected
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Protected.IProtected
      VB: GUPS.AntiCheat.Core.Protected.IProtected
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Protected
    source:
      id: IProtected
      path: ''
      startLine: 7377
    summary: "\nRepresents an interface that combines features for obfuscation, data integrity, and subject monitoring.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Core.Protected.IProtected\" data-throw-if-not-resolved=\"false\"></xref> interface provides a unified contract for classes that integrate obfuscation, data integrity verification, and \nsubject monitoring. Implementing classes are expected to provide mechanisms for obfuscating their content, ensuring data integrity.\n</p>\n\n<p>\nImplementing classes are expected to inherit features from the following interfaces:\n- <see cref=\"!:IObfuscated\"></see>: Allows the class to apply obfuscation to its content.\n- <see cref=\"!:IDataIntegrity\"></see>: Provides mechanisms for ensuring and verifying data integrity.\n- <see cref=\"!:IWatchedSubject\"></see>: Enables the class to be observed and monitored by external entities.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public interface IProtected
        VB: >-
          Public Interface IProtected

              Inherits IObfuscated, IDataIntegrity, IWatchedSubject
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Core.Protected.IProtected.Value
      commentId: P:GUPS.AntiCheat.Core.Protected.IProtected.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: IProtected.Value
        VB: IProtected.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Protected.IProtected.Value
        VB: GUPS.AntiCheat.Core.Protected.IProtected.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Protected
      source:
        id: Value
        path: ''
        startLine: 7389
      summary: "\nGets the value of the protected object.\n"
      example: []
      syntax:
        content:
          CSharp: object Value { get; }
          VB: ReadOnly Property Value As Object
        parameters: []
        return:
          type: System.Object
      overload: GUPS.AntiCheat.Core.Protected.IProtected.Value*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    references:
      GUPS.AntiCheat.Core.Protected.IProtected: 
- id: GUPS.AntiCheat.Core.Punisher
  commentId: N:GUPS.AntiCheat.Core.Punisher
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Core.Punisher
    VB: GUPS.AntiCheat.Core.Punisher
  nameWithType:
    CSharp: GUPS.AntiCheat.Core.Punisher
    VB: GUPS.AntiCheat.Core.Punisher
  qualifiedName:
    CSharp: GUPS.AntiCheat.Core.Punisher
    VB: GUPS.AntiCheat.Core.Punisher
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Core.Punisher.IPunisher
    commentId: T:GUPS.AntiCheat.Core.Punisher.IPunisher
    language: CSharp
    name:
      CSharp: IPunisher
      VB: IPunisher
    nameWithType:
      CSharp: IPunisher
      VB: IPunisher
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Punisher.IPunisher
      VB: GUPS.AntiCheat.Core.Punisher.IPunisher
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Punisher
    source:
      id: IPunisher
      path: ''
      startLine: 7410
    summary: "\nRepresents an interface for entities equipped to administer punitive actions in response to perceived threats, enhancing threat assessment capabilities.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Core.Punisher.IPunisher\" data-throw-if-not-resolved=\"false\"></xref> interface defines the contract for entities that possess the capability to administer punitive actions based on perceived threat levels.\n</p>\n\n<p>\nThe interface inherits the <see cref=\"!:IThreatRated\"></see> interface, providing access to the threat rating property to decide when to administer punitive actions.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public interface IPunisher
        VB: >-
          Public Interface IPunisher

              Inherits IThreatRated
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Core.Punisher.IPunisher.Name
      commentId: P:GUPS.AntiCheat.Core.Punisher.IPunisher.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: IPunisher.Name
        VB: IPunisher.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Punisher.IPunisher.Name
        VB: GUPS.AntiCheat.Core.Punisher.IPunisher.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Punisher
      source:
        id: Name
        path: ''
        startLine: 7415
      summary: "\nThe name of the punisher.\n"
      example: []
      syntax:
        content:
          CSharp: string Name { get; }
          VB: ReadOnly Property Name As String
        parameters: []
        return:
          type: System.String
      overload: GUPS.AntiCheat.Core.Punisher.IPunisher.Name*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Punisher.IPunisher.IsSupported
      commentId: P:GUPS.AntiCheat.Core.Punisher.IPunisher.IsSupported
      language: CSharp
      name:
        CSharp: IsSupported
        VB: IsSupported
      nameWithType:
        CSharp: IPunisher.IsSupported
        VB: IPunisher.IsSupported
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Punisher.IPunisher.IsSupported
        VB: GUPS.AntiCheat.Core.Punisher.IPunisher.IsSupported
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Punisher
      source:
        id: IsSupported
        path: ''
        startLine: 7420
      summary: "\nReturns if the punisher is supported on the current platform.\n"
      example: []
      syntax:
        content:
          CSharp: bool IsSupported { get; }
          VB: ReadOnly Property IsSupported As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Core.Punisher.IPunisher.IsSupported*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Punisher.IPunisher.IsActive
      commentId: P:GUPS.AntiCheat.Core.Punisher.IPunisher.IsActive
      language: CSharp
      name:
        CSharp: IsActive
        VB: IsActive
      nameWithType:
        CSharp: IPunisher.IsActive
        VB: IPunisher.IsActive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Punisher.IPunisher.IsActive
        VB: GUPS.AntiCheat.Core.Punisher.IPunisher.IsActive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Punisher
      source:
        id: IsActive
        path: ''
        startLine: 7425
      summary: "\nGets a value indicating whether the punisher is active and can administer punitive actions.\n"
      example: []
      syntax:
        content:
          CSharp: bool IsActive { get; }
          VB: ReadOnly Property IsActive As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Core.Punisher.IPunisher.IsActive*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Punisher.IPunisher.PunishOnce
      commentId: P:GUPS.AntiCheat.Core.Punisher.IPunisher.PunishOnce
      language: CSharp
      name:
        CSharp: PunishOnce
        VB: PunishOnce
      nameWithType:
        CSharp: IPunisher.PunishOnce
        VB: IPunisher.PunishOnce
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Punisher.IPunisher.PunishOnce
        VB: GUPS.AntiCheat.Core.Punisher.IPunisher.PunishOnce
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Punisher
      source:
        id: PunishOnce
        path: ''
        startLine: 7430
      summary: "\nReturns if the punisher should only administer punitive actions once or any time the threat level exceeds the threat rating.\n"
      example: []
      syntax:
        content:
          CSharp: bool PunishOnce { get; }
          VB: ReadOnly Property PunishOnce As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Core.Punisher.IPunisher.PunishOnce*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Punisher.IPunisher.HasPunished
      commentId: P:GUPS.AntiCheat.Core.Punisher.IPunisher.HasPunished
      language: CSharp
      name:
        CSharp: HasPunished
        VB: HasPunished
      nameWithType:
        CSharp: IPunisher.HasPunished
        VB: IPunisher.HasPunished
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Punisher.IPunisher.HasPunished
        VB: GUPS.AntiCheat.Core.Punisher.IPunisher.HasPunished
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Punisher
      source:
        id: HasPunished
        path: ''
        startLine: 7435
      summary: "\nReturns if the punisher has administered punitive actions.\n"
      example: []
      syntax:
        content:
          CSharp: bool HasPunished { get; }
          VB: ReadOnly Property HasPunished As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Core.Punisher.IPunisher.HasPunished*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Punisher.IPunisher.Punish
      commentId: M:GUPS.AntiCheat.Core.Punisher.IPunisher.Punish
      language: CSharp
      name:
        CSharp: Punish()
        VB: Punish()
      nameWithType:
        CSharp: IPunisher.Punish()
        VB: IPunisher.Punish()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Punisher.IPunisher.Punish()
        VB: GUPS.AntiCheat.Core.Punisher.IPunisher.Punish()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Punisher
      source:
        id: Punish
        path: ''
        startLine: 7440
      summary: "\nAdministers punitive actions based on the perceived threat level as indicated by the threat rating.\n"
      example: []
      syntax:
        content:
          CSharp: void Punish()
          VB: Sub Punish
      overload: GUPS.AntiCheat.Core.Punisher.IPunisher.Punish*
      modifiers:
        CSharp: []
        VB: []
    references:
      GUPS.AntiCheat.Core.Punisher.IPunisher: 
- id: GUPS.AntiCheat.Core.Random
  commentId: N:GUPS.AntiCheat.Core.Random
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Core.Random
    VB: GUPS.AntiCheat.Core.Random
  nameWithType:
    CSharp: GUPS.AntiCheat.Core.Random
    VB: GUPS.AntiCheat.Core.Random
  qualifiedName:
    CSharp: GUPS.AntiCheat.Core.Random
    VB: GUPS.AntiCheat.Core.Random
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Core.Random.IRandomProvider
    commentId: T:GUPS.AntiCheat.Core.Random.IRandomProvider
    language: CSharp
    name:
      CSharp: IRandomProvider
      VB: IRandomProvider
    nameWithType:
      CSharp: IRandomProvider
      VB: IRandomProvider
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Random.IRandomProvider
      VB: GUPS.AntiCheat.Core.Random.IRandomProvider
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Random
    source:
      id: IRandomProvider
      path: ''
      startLine: 7460
    summary: "\nRepresents a provider for generating random values.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Core.Random.IRandomProvider\" data-throw-if-not-resolved=\"false\"></xref> interface defines the contract for a provider that offers methods to generate random integer values.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public interface IRandomProvider
        VB: Public Interface IRandomProvider
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32
      commentId: M:GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32
      language: CSharp
      name:
        CSharp: RandomInt32()
        VB: RandomInt32()
      nameWithType:
        CSharp: IRandomProvider.RandomInt32()
        VB: IRandomProvider.RandomInt32()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32()
        VB: GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Random
      source:
        id: RandomInt32
        path: ''
        startLine: 7466
      summary: "\nReturns a random number between <see cref=\"!:Int32.MinValue\"></see> and <see cref=\"!:Int32.MaxValue\"></see> - 1.\n"
      example: []
      syntax:
        content:
          CSharp: Int32 RandomInt32()
          VB: Function RandomInt32 As Int32
        return:
          type: GUPS.AntiCheat.Int32
          description: A random integer value.
      overload: GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32*
      modifiers:
        CSharp: []
        VB: []
    - id: GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32(Int32,Int32)
      commentId: M:GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32(Int32,Int32)
      language: CSharp
      name:
        CSharp: RandomInt32(Int32, Int32)
        VB: RandomInt32(Int32, Int32)
      nameWithType:
        CSharp: IRandomProvider.RandomInt32(Int32, Int32)
        VB: IRandomProvider.RandomInt32(Int32, Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32(Int32, Int32)
        VB: GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32(Int32, Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Random
      source:
        id: RandomInt32
        path: ''
        startLine: 7474
      summary: "\nReturns a random number between <code data-dev-comment-type=\"paramref\" class=\"paramref\">_Min</code> (inclusive) and <code data-dev-comment-type=\"paramref\" class=\"paramref\">_Max</code> (exclusive).\n"
      example: []
      syntax:
        content:
          CSharp: Int32 RandomInt32(Int32 _Min, Int32 _Max)
          VB: Function RandomInt32(_Min As Int32, _Max As Int32) As Int32
        parameters:
        - id: _Min
          type: GUPS.AntiCheat.Int32
          description: Inclusive minimum value.
        - id: _Max
          type: GUPS.AntiCheat.Int32
          description: Exclusive maximum value.
        return:
          type: GUPS.AntiCheat.Int32
          description: A random integer value within the specified range.
      overload: GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32*
      modifiers:
        CSharp: []
        VB: []
    references:
      GUPS.AntiCheat.Core.Random.IRandomProvider: 
  - id: GUPS.AntiCheat.Core.Random.PseudoRandom
    commentId: T:GUPS.AntiCheat.Core.Random.PseudoRandom
    language: CSharp
    name:
      CSharp: PseudoRandom
      VB: PseudoRandom
    nameWithType:
      CSharp: PseudoRandom
      VB: PseudoRandom
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Random.PseudoRandom
      VB: GUPS.AntiCheat.Core.Random.PseudoRandom
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Random
    source:
      id: PseudoRandom
      path: ''
      startLine: 7488
    summary: "\nUses the System.Random class to generate random values.\nIs very fast but predictable under high effort.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class PseudoRandom : IRandomProvider'
        VB: >-
          Public Class PseudoRandom

              Implements IRandomProvider
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Core.Random.IRandomProvider
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32
      commentId: M:GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32
      language: CSharp
      name:
        CSharp: RandomInt32()
        VB: RandomInt32()
      nameWithType:
        CSharp: PseudoRandom.RandomInt32()
        VB: PseudoRandom.RandomInt32()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32()
        VB: GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Random
      source:
        id: RandomInt32
        path: ''
        startLine: 7496
      summary: "\nReturns a random number between <see cref=\"!:Int32.MinValue\"></see> and <see cref=\"!:Int32.MaxValue\"></see> - 1.\n"
      example: []
      syntax:
        content:
          CSharp: public int RandomInt32()
          VB: Public Function RandomInt32 As Integer
        return:
          type: System.Int32
          description: A random integer value.
      overload: GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32(Int32,Int32)
      commentId: M:GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32(Int32,Int32)
      language: CSharp
      name:
        CSharp: RandomInt32(Int32, Int32)
        VB: RandomInt32(Int32, Int32)
      nameWithType:
        CSharp: PseudoRandom.RandomInt32(Int32, Int32)
        VB: PseudoRandom.RandomInt32(Int32, Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32(Int32, Int32)
        VB: GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32(Int32, Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Random
      source:
        id: RandomInt32
        path: ''
        startLine: 7508
      summary: "\nReturns a random number between <code data-dev-comment-type=\"paramref\" class=\"paramref\">_Min</code> (inclusive) and <code data-dev-comment-type=\"paramref\" class=\"paramref\">_Max</code> (exclusive).\n"
      example: []
      syntax:
        content:
          CSharp: public int RandomInt32(Int32 _Min, Int32 _Max)
          VB: Public Function RandomInt32(_Min As Int32, _Max As Int32) As Integer
        parameters:
        - id: _Min
          type: GUPS.AntiCheat.Int32
          description: Inclusive minimum value.
        - id: _Max
          type: GUPS.AntiCheat.Int32
          description: Exclusive maximum value.
        return:
          type: System.Int32
          description: A random integer value within the specified range.
      overload: GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: GUPS.AntiCheat.Core.Random.TrueRandom
    commentId: T:GUPS.AntiCheat.Core.Random.TrueRandom
    language: CSharp
    name:
      CSharp: TrueRandom
      VB: TrueRandom
    nameWithType:
      CSharp: TrueRandom
      VB: TrueRandom
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Random.TrueRandom
      VB: GUPS.AntiCheat.Core.Random.TrueRandom
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Random
    source:
      id: TrueRandom
      path: ''
      startLine: 7525
    summary: "\nUses the System.Security.Cryptography.RNGCryptoServiceProvider class to generate random values.\nIt is slower than System.Random but unpredictable because of its crypto-strength seed.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TrueRandom : IRandomProvider'
        VB: >-
          Public Class TrueRandom

              Implements IRandomProvider
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Core.Random.IRandomProvider
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32
      commentId: M:GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32
      language: CSharp
      name:
        CSharp: RandomInt32()
        VB: RandomInt32()
      nameWithType:
        CSharp: TrueRandom.RandomInt32()
        VB: TrueRandom.RandomInt32()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32()
        VB: GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Random
      source:
        id: RandomInt32
        path: ''
        startLine: 7533
      summary: "\nReturns a random number between <see cref=\"!:Int32.MinValue\"></see> and <see cref=\"!:Int32.MaxValue\"></see> - 1.\n"
      example: []
      syntax:
        content:
          CSharp: public int RandomInt32()
          VB: Public Function RandomInt32 As Integer
        return:
          type: System.Int32
          description: A random integer value.
      overload: GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32(Int32,Int32)
      commentId: M:GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32(Int32,Int32)
      language: CSharp
      name:
        CSharp: RandomInt32(Int32, Int32)
        VB: RandomInt32(Int32, Int32)
      nameWithType:
        CSharp: TrueRandom.RandomInt32(Int32, Int32)
        VB: TrueRandom.RandomInt32(Int32, Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32(Int32, Int32)
        VB: GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32(Int32, Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Random
      source:
        id: RandomInt32
        path: ''
        startLine: 7544
      summary: "\nReturns a random number between <code data-dev-comment-type=\"paramref\" class=\"paramref\">_Min</code> (inclusive) and <code data-dev-comment-type=\"paramref\" class=\"paramref\">_Max</code> (exclusive).\n"
      example: []
      syntax:
        content:
          CSharp: public int RandomInt32(Int32 _Min, Int32 _Max)
          VB: Public Function RandomInt32(_Min As Int32, _Max As Int32) As Integer
        parameters:
        - id: _Min
          type: GUPS.AntiCheat.Int32
          description: Inclusive minimum value.
        - id: _Max
          type: GUPS.AntiCheat.Int32
          description: Exclusive maximum value.
        return:
          type: System.Int32
          description: A random integer value within the specified range.
      overload: GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: GUPS.AntiCheat.Core.Storage
  commentId: N:GUPS.AntiCheat.Core.Storage
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Core.Storage
    VB: GUPS.AntiCheat.Core.Storage
  nameWithType:
    CSharp: GUPS.AntiCheat.Core.Storage
    VB: GUPS.AntiCheat.Core.Storage
  qualifiedName:
    CSharp: GUPS.AntiCheat.Core.Storage
    VB: GUPS.AntiCheat.Core.Storage
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Core.Storage.EStorageType
    commentId: T:GUPS.AntiCheat.Core.Storage.EStorageType
    language: CSharp
    name:
      CSharp: EStorageType
      VB: EStorageType
    nameWithType:
      CSharp: EStorageType
      VB: EStorageType
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Storage.EStorageType
      VB: GUPS.AntiCheat.Core.Storage.EStorageType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Storage
    source:
      id: EStorageType
      path: ''
      startLine: 7578
    summary: "\nRepresents the storage types for reading different data types.\n"
    example: []
    syntax:
      content:
        CSharp: 'public enum EStorageType : byte'
        VB: Public Enum EStorageType As Byte
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Byte
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Byte
      language: CSharp
      name:
        CSharp: Byte
        VB: Byte
      nameWithType:
        CSharp: EStorageType.Byte
        VB: EStorageType.Byte
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Byte
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Byte
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Byte
        path: ''
        startLine: 7587
      summary: "\nRepresents a byte (8-bit unsigned integer).\n"
      remarks: "\nUse this for handling byte data.\n"
      example: []
      syntax:
        content:
          CSharp: Byte = 0
          VB: Byte = 0
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.ByteArray
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.ByteArray
      language: CSharp
      name:
        CSharp: ByteArray
        VB: ByteArray
      nameWithType:
        CSharp: EStorageType.ByteArray
        VB: EStorageType.ByteArray
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.ByteArray
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.ByteArray
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: ByteArray
        path: ''
        startLine: 7595
      summary: "\nRepresents a byte array.\n"
      remarks: "\nUse this for handling byte array data.\n"
      example: []
      syntax:
        content:
          CSharp: ByteArray = 1
          VB: ByteArray = 1
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Boolean
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Boolean
      language: CSharp
      name:
        CSharp: Boolean
        VB: Boolean
      nameWithType:
        CSharp: EStorageType.Boolean
        VB: EStorageType.Boolean
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Boolean
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Boolean
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Boolean
        path: ''
        startLine: 7603
      summary: "\nRepresents a Boolean value.\n"
      remarks: "\nUse this for handling true or false values.\n"
      example: []
      syntax:
        content:
          CSharp: Boolean = 2
          VB: Boolean = 2
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Int16
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Int16
      language: CSharp
      name:
        CSharp: Int16
        VB: Int16
      nameWithType:
        CSharp: EStorageType.Int16
        VB: EStorageType.Int16
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Int16
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Int16
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Int16
        path: ''
        startLine: 7611
      summary: "\nRepresents a 16-bit signed integer.\n"
      remarks: "\nUse this for handling short integer values.\n"
      example: []
      syntax:
        content:
          CSharp: Int16 = 3
          VB: Int16 = 3
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Int32
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Int32
      language: CSharp
      name:
        CSharp: Int32
        VB: Int32
      nameWithType:
        CSharp: EStorageType.Int32
        VB: EStorageType.Int32
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Int32
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Int32
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Int32
        path: ''
        startLine: 7619
      summary: "\nRepresents a 32-bit signed integer.\n"
      remarks: "\nUse this for handling integer values.\n"
      example: []
      syntax:
        content:
          CSharp: Int32 = 4
          VB: Int32 = 4
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Int64
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Int64
      language: CSharp
      name:
        CSharp: Int64
        VB: Int64
      nameWithType:
        CSharp: EStorageType.Int64
        VB: EStorageType.Int64
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Int64
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Int64
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Int64
        path: ''
        startLine: 7627
      summary: "\nRepresents a 64-bit signed integer.\n"
      remarks: "\nUse this for handling long integer values.\n"
      example: []
      syntax:
        content:
          CSharp: Int64 = 5
          VB: Int64 = 5
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.UInt16
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.UInt16
      language: CSharp
      name:
        CSharp: UInt16
        VB: UInt16
      nameWithType:
        CSharp: EStorageType.UInt16
        VB: EStorageType.UInt16
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.UInt16
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.UInt16
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: UInt16
        path: ''
        startLine: 7635
      summary: "\nRepresents a 16-bit unsigned integer.\n"
      remarks: "\nUse this for handling unsigned short integer values.\n"
      example: []
      syntax:
        content:
          CSharp: UInt16 = 6
          VB: UInt16 = 6
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.UInt32
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.UInt32
      language: CSharp
      name:
        CSharp: UInt32
        VB: UInt32
      nameWithType:
        CSharp: EStorageType.UInt32
        VB: EStorageType.UInt32
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.UInt32
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.UInt32
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: UInt32
        path: ''
        startLine: 7643
      summary: "\nRepresents a 32-bit unsigned integer.\n"
      remarks: "\nUse this for handling unsigned integer values.\n"
      example: []
      syntax:
        content:
          CSharp: UInt32 = 7
          VB: UInt32 = 7
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.UInt64
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.UInt64
      language: CSharp
      name:
        CSharp: UInt64
        VB: UInt64
      nameWithType:
        CSharp: EStorageType.UInt64
        VB: EStorageType.UInt64
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.UInt64
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.UInt64
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: UInt64
        path: ''
        startLine: 7651
      summary: "\nRepresents a 64-bit unsigned integer.\n"
      remarks: "\nUse this for handling unsigned long integer values.\n"
      example: []
      syntax:
        content:
          CSharp: UInt64 = 8
          VB: UInt64 = 8
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Single
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Single
      language: CSharp
      name:
        CSharp: Single
        VB: Single
      nameWithType:
        CSharp: EStorageType.Single
        VB: EStorageType.Single
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Single
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Single
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Single
        path: ''
        startLine: 7659
      summary: "\nRepresents a single-precision floating-point number.\n"
      remarks: "\nUse this for handling float values.\n"
      example: []
      syntax:
        content:
          CSharp: Single = 9
          VB: Single = 9
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Double
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Double
      language: CSharp
      name:
        CSharp: Double
        VB: Double
      nameWithType:
        CSharp: EStorageType.Double
        VB: EStorageType.Double
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Double
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Double
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Double
        path: ''
        startLine: 7667
      summary: "\nRepresents a double-precision floating-point number.\n"
      remarks: "\nUse this for handling double values.\n"
      example: []
      syntax:
        content:
          CSharp: Double = 10
          VB: Double = 10
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Decimal
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Decimal
      language: CSharp
      name:
        CSharp: Decimal
        VB: Decimal
      nameWithType:
        CSharp: EStorageType.Decimal
        VB: EStorageType.Decimal
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Decimal
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Decimal
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Decimal
        path: ''
        startLine: 7675
      summary: "\nRepresents a decimal number.\n"
      remarks: "\nUse this for handling high precision decimal values.\n"
      example: []
      syntax:
        content:
          CSharp: Decimal = 11
          VB: Decimal = 11
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Char
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Char
      language: CSharp
      name:
        CSharp: Char
        VB: Char
      nameWithType:
        CSharp: EStorageType.Char
        VB: EStorageType.Char
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Char
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Char
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Char
        path: ''
        startLine: 7683
      summary: "\nRepresents a single Unicode character.\n"
      remarks: "\nUse this for handling character data.\n"
      example: []
      syntax:
        content:
          CSharp: Char = 12
          VB: Char = 12
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.String
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.String
      language: CSharp
      name:
        CSharp: String
        VB: String
      nameWithType:
        CSharp: EStorageType.String
        VB: EStorageType.String
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.String
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.String
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: String
        path: ''
        startLine: 7691
      summary: "\nRepresents a string.\n"
      remarks: "\nUse this for handling textual data.\n"
      example: []
      syntax:
        content:
          CSharp: String = 13
          VB: String = 13
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Color
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Color
      language: CSharp
      name:
        CSharp: Color
        VB: Color
      nameWithType:
        CSharp: EStorageType.Color
        VB: EStorageType.Color
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Color
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Color
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Color
        path: ''
        startLine: 7699
      summary: "\nRepresents a Unity color.\n"
      remarks: "\nUse this for handling color data in Unity.\n"
      example: []
      syntax:
        content:
          CSharp: Color = 14
          VB: Color = 14
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Color32
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Color32
      language: CSharp
      name:
        CSharp: Color32
        VB: Color32
      nameWithType:
        CSharp: EStorageType.Color32
        VB: EStorageType.Color32
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Color32
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Color32
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Color32
        path: ''
        startLine: 7707
      summary: "\nRepresents a Unity color with 32-bit color depth.\n"
      remarks: "\nUse this for handling Color32 data in Unity.\n"
      example: []
      syntax:
        content:
          CSharp: Color32 = 15
          VB: Color32 = 15
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Vector2
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Vector2
      language: CSharp
      name:
        CSharp: Vector2
        VB: Vector2
      nameWithType:
        CSharp: EStorageType.Vector2
        VB: EStorageType.Vector2
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Vector2
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Vector2
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Vector2
        path: ''
        startLine: 7715
      summary: "\nRepresents a 2D vector.\n"
      remarks: "\nUse this for handling Vector2 data in Unity.\n"
      example: []
      syntax:
        content:
          CSharp: Vector2 = 16
          VB: Vector2 = 16
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Vector2Int
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Vector2Int
      language: CSharp
      name:
        CSharp: Vector2Int
        VB: Vector2Int
      nameWithType:
        CSharp: EStorageType.Vector2Int
        VB: EStorageType.Vector2Int
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Vector2Int
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Vector2Int
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Vector2Int
        path: ''
        startLine: 7723
      summary: "\nRepresents a 2D integer vector.\n"
      remarks: "\nUse this for handling Vector2Int data in Unity.\n"
      example: []
      syntax:
        content:
          CSharp: Vector2Int = 17
          VB: Vector2Int = 17
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Vector3
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Vector3
      language: CSharp
      name:
        CSharp: Vector3
        VB: Vector3
      nameWithType:
        CSharp: EStorageType.Vector3
        VB: EStorageType.Vector3
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Vector3
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Vector3
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Vector3
        path: ''
        startLine: 7731
      summary: "\nRepresents a 3D vector.\n"
      remarks: "\nUse this for handling Vector3 data in Unity.\n"
      example: []
      syntax:
        content:
          CSharp: Vector3 = 18
          VB: Vector3 = 18
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Vector3Int
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Vector3Int
      language: CSharp
      name:
        CSharp: Vector3Int
        VB: Vector3Int
      nameWithType:
        CSharp: EStorageType.Vector3Int
        VB: EStorageType.Vector3Int
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Vector3Int
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Vector3Int
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Vector3Int
        path: ''
        startLine: 7739
      summary: "\nRepresents a 3D integer vector.\n"
      remarks: "\nUse this for handling Vector3Int data in Unity.\n"
      example: []
      syntax:
        content:
          CSharp: Vector3Int = 19
          VB: Vector3Int = 19
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Vector4
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Vector4
      language: CSharp
      name:
        CSharp: Vector4
        VB: Vector4
      nameWithType:
        CSharp: EStorageType.Vector4
        VB: EStorageType.Vector4
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Vector4
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Vector4
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Vector4
        path: ''
        startLine: 7747
      summary: "\nRepresents a 4D vector.\n"
      remarks: "\nUse this for handling Vector4 data in Unity.\n"
      example: []
      syntax:
        content:
          CSharp: Vector4 = 20
          VB: Vector4 = 20
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Quaternion
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Quaternion
      language: CSharp
      name:
        CSharp: Quaternion
        VB: Quaternion
      nameWithType:
        CSharp: EStorageType.Quaternion
        VB: EStorageType.Quaternion
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Quaternion
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Quaternion
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Quaternion
        path: ''
        startLine: 7755
      summary: "\nRepresents a quaternion for rotation.\n"
      remarks: "\nUse this for handling quaternion rotations in Unity.\n"
      example: []
      syntax:
        content:
          CSharp: Quaternion = 21
          VB: Quaternion = 21
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Rect
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Rect
      language: CSharp
      name:
        CSharp: Rect
        VB: Rect
      nameWithType:
        CSharp: EStorageType.Rect
        VB: EStorageType.Rect
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Rect
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Rect
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Rect
        path: ''
        startLine: 7763
      summary: "\nRepresents a rectangle with position and size.\n"
      remarks: "\nUse this for handling Rect data in Unity.\n"
      example: []
      syntax:
        content:
          CSharp: Rect = 22
          VB: Rect = 22
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Plane
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Plane
      language: CSharp
      name:
        CSharp: Plane
        VB: Plane
      nameWithType:
        CSharp: EStorageType.Plane
        VB: EStorageType.Plane
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Plane
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Plane
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Plane
        path: ''
        startLine: 7771
      summary: "\nRepresents a mathematical plane.\n"
      remarks: "\nUse this for handling Plane data in Unity.\n"
      example: []
      syntax:
        content:
          CSharp: Plane = 23
          VB: Plane = 23
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Ray
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Ray
      language: CSharp
      name:
        CSharp: Ray
        VB: Ray
      nameWithType:
        CSharp: EStorageType.Ray
        VB: EStorageType.Ray
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Ray
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Ray
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Ray
        path: ''
        startLine: 7779
      summary: "\nRepresents a ray with an origin and direction.\n"
      remarks: "\nUse this for handling Ray data in Unity.\n"
      example: []
      syntax:
        content:
          CSharp: Ray = 24
          VB: Ray = 24
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Core.Storage.EStorageType.Matrix4x4
      commentId: F:GUPS.AntiCheat.Core.Storage.EStorageType.Matrix4x4
      language: CSharp
      name:
        CSharp: Matrix4x4
        VB: Matrix4x4
      nameWithType:
        CSharp: EStorageType.Matrix4x4
        VB: EStorageType.Matrix4x4
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.EStorageType.Matrix4x4
        VB: GUPS.AntiCheat.Core.Storage.EStorageType.Matrix4x4
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Matrix4x4
        path: ''
        startLine: 7787
      summary: "\nRepresents a 4x4 transformation matrix.\n"
      remarks: "\nUse this for handling Matrix4x4 data in Unity.\n"
      example: []
      syntax:
        content:
          CSharp: Matrix4x4 = 25
          VB: Matrix4x4 = 25
        return:
          type: GUPS.AntiCheat.Core.Storage.EStorageType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: GUPS.AntiCheat.Core.Storage.StorageContainer
    commentId: T:GUPS.AntiCheat.Core.Storage.StorageContainer
    language: CSharp
    name:
      CSharp: StorageContainer
      VB: StorageContainer
    nameWithType:
      CSharp: StorageContainer
      VB: StorageContainer
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer
      VB: GUPS.AntiCheat.Core.Storage.StorageContainer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Storage
    source:
      id: StorageContainer
      path: ''
      startLine: 7815
    summary: "\nRepresents a store able container that can hold data in a key value format. It allows to assign \nan owner to the container and also sign it to verify its authenticity. Can be useful for save\nfiles and other data storage purposes.\n"
    remarks: "\nThis class provides a basic implementation of the IReadAble and IWriteAble interfaces.\nIt is intended to be used as a container for multiple storage items. It can have an owner\nand also be signed to verify its authenticity.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class StorageContainer : IReadAble'
        VB: >-
          Public Class StorageContainer

              Inherits IReadAble
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.IWriteAble
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Owner
      commentId: P:GUPS.AntiCheat.Core.Storage.StorageContainer.Owner
      language: CSharp
      name:
        CSharp: Owner
        VB: Owner
      nameWithType:
        CSharp: StorageContainer.Owner
        VB: StorageContainer.Owner
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Owner
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Owner
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Owner
        path: ''
        startLine: 7849
      summary: "\nGets or sets the owner of the storage container.\n"
      remarks: "\nThis property is used to identify the owner of the storage container.\n"
      example: []
      syntax:
        content:
          CSharp: public String Owner { get; set; }
          VB: Public Property Owner As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Owner*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Signature
      commentId: P:GUPS.AntiCheat.Core.Storage.StorageContainer.Signature
      language: CSharp
      name:
        CSharp: Signature
        VB: Signature
      nameWithType:
        CSharp: StorageContainer.Signature
        VB: StorageContainer.Signature
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Signature
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Signature
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Signature
        path: ''
        startLine: 7871
      summary: "\nGets or sets the signature of the storage container.\n"
      remarks: "\nThis property is used to verify the authenticity of the storage container.\n"
      example: []
      syntax:
        content:
          CSharp: public String Signature { get; }
          VB: Public ReadOnly Property Signature As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Signature*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor
      language: CSharp
      name:
        CSharp: StorageContainer()
        VB: StorageContainer()
      nameWithType:
        CSharp: StorageContainer.StorageContainer()
        VB: StorageContainer.StorageContainer()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.StorageContainer()
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.StorageContainer()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: .ctor
        path: ''
        startLine: 7885
      summary: "\nInstantiates a new <xref href=\"GUPS.AntiCheat.Core.Storage.StorageContainer\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
      remarks: "\nThis is the default constructor that initializes an empty storage container.\nThe owner and signature properties remain null until explicitly set.\nUse this constructor when the owner information is not immediately available\nor when working with temporary storage containers.\n"
      example: []
      syntax:
        content:
          CSharp: public StorageContainer()
          VB: Public Sub New
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Core.Storage.StorageContainer: 
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor(String)
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor(String)
      language: CSharp
      name:
        CSharp: StorageContainer(String)
        VB: StorageContainer(String)
      nameWithType:
        CSharp: StorageContainer.StorageContainer(String)
        VB: StorageContainer.StorageContainer(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.StorageContainer(String)
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.StorageContainer(String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: .ctor
        path: ''
        startLine: 7907
      summary: "\nInstantiates a new <xref href=\"GUPS.AntiCheat.Core.Storage.StorageContainer\" data-throw-if-not-resolved=\"false\"></xref> object with the specified owner. You can for \nexample assign the owner to the player&apos;s name or <see cref=\"!:UnityEngine.SystemInfo.deviceUniqueIdentifier\"></see> \nas unique device id.\n"
      remarks: "\nThis constructor initializes a storage container with a specific owner.\nThe owner parameter is useful for:\n- Tracking who created or has access to the container\n- Implementing ownership-based access control\n- Associating saved data with specific users or devices\n- Maintaining data persistence across gaming sessions\n\nThe signature property remains null until explicitly set or until\nthe container is written to a binary format.\n"
      example: []
      syntax:
        content:
          CSharp: public StorageContainer(String _Owner)
          VB: Public Sub New(_Owner As String)
        parameters:
        - id: _Owner
          type: GUPS.AntiCheat.String
          description: The owner of the storage container.
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Core.Storage.StorageContainer: 
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor(String,System.Byte[])
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor(String,System.Byte[])
      language: CSharp
      name:
        CSharp: StorageContainer(String, Byte[])
        VB: StorageContainer(String, Byte())
      nameWithType:
        CSharp: StorageContainer.StorageContainer(String, Byte[])
        VB: StorageContainer.StorageContainer(String, Byte())
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.StorageContainer(String, System.Byte[])
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.StorageContainer(String, System.Byte())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: .ctor
        path: ''
        startLine: 7932
      summary: "\nInstantiates a new <xref href=\"GUPS.AntiCheat.Core.Storage.StorageContainer\" data-throw-if-not-resolved=\"false\"></xref> object with the specified owner. You can for \nexample assign the owner to the player&apos;s name or <see cref=\"!:UnityEngine.SystemInfo.deviceUniqueIdentifier\"></see> \nas unique device id. Also you can set a binary encryption key to encrypt and decrypt the storage container\nsymmetrically.\n"
      remarks: "\nThis constructor initializes a storage container with a specific owner.\nThe owner parameter is useful for:\n- Tracking who created or has access to the container\n- Implementing ownership-based access control\n- Associating saved data with specific users or devices\n- Maintaining data persistence across gaming sessions\n\nThe signature property remains null until explicitly set or until\nthe container is written to a binary format.\n"
      example: []
      syntax:
        content:
          CSharp: public StorageContainer(String _Owner, byte[] _EncryptionKey)
          VB: Public Sub New(_Owner As String, _EncryptionKey As Byte())
        parameters:
        - id: _Owner
          type: GUPS.AntiCheat.String
          description: The owner of the storage container.
        - id: _EncryptionKey
          type: System.Byte[]
          description: The encryption key to use for the storage container.
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Core.Storage.StorageContainer: 
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Has(String)
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.Has(String)
      language: CSharp
      name:
        CSharp: Has(String)
        VB: Has(String)
      nameWithType:
        CSharp: StorageContainer.Has(String)
        VB: StorageContainer.Has(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Has(String)
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Has(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Has
        path: ''
        startLine: 7947
      summary: "\nReturns if the storage container has an item with the specified key.\n"
      remarks: "\nThis method checks if the storage container internal items dictionary contains an item with the specified key.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Has(String _Key)
          VB: Public Function Has(_Key As String) As Boolean
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key of the item to check.
        return:
          type: System.Boolean
          description: True if the storage container has an item with the specified key; otherwise false.
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Has*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Add(String,Object)
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.Add(String,Object)
      language: CSharp
      name:
        CSharp: Add(String, Object)
        VB: Add(String, Object)
      nameWithType:
        CSharp: StorageContainer.Add(String, Object)
        VB: StorageContainer.Add(String, Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Add(String, Object)
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Add(String, Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Add
        path: ''
        startLine: 7961
      summary: "\nAdds a new item to the storage container.\n"
      remarks: "\nThis method creates a new StorageItem instance with the specified value and adds it to the \nItems dictionary.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(String _Key, Object _Value)
          VB: Public Sub Add(_Key As String, _Value As Object)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key of the item to add.
        - id: _Value
          type: GUPS.AntiCheat.Object
          description: The value of the item to add.
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Set(String,Object)
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.Set(String,Object)
      language: CSharp
      name:
        CSharp: Set(String, Object)
        VB: Set(String, Object)
      nameWithType:
        CSharp: StorageContainer.Set(String, Object)
        VB: StorageContainer.Set(String, Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Set(String, Object)
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Set(String, Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Set
        path: ''
        startLine: 7980
      summary: "\nSets the value of an existing item in the storage container.\n"
      remarks: "\nThis method creates a new StorageItem instance with the specified value and updates the existing \nitem in the Items dictionary.\n"
      example: []
      syntax:
        content:
          CSharp: public void Set(String _Key, Object _Value)
          VB: Public Sub Set(_Key As String, _Value As Object)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key of the item to set.
        - id: _Value
          type: GUPS.AntiCheat.Object
          description: The new value of the item.
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Set*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Remove(String)
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.Remove(String)
      language: CSharp
      name:
        CSharp: Remove(String)
        VB: Remove(String)
      nameWithType:
        CSharp: StorageContainer.Remove(String)
        VB: StorageContainer.Remove(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Remove(String)
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Remove(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Remove
        path: ''
        startLine: 7992
      summary: "\nRemoves an item from the storage container.\n"
      remarks: "\nThis method removes the item with the specified key from the Items dictionary.\n"
      example: []
      syntax:
        content:
          CSharp: public void Remove(String _Key)
          VB: Public Sub Remove(_Key As String)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key of the item to remove.
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Remove*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Get(String)
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.Get(String)
      language: CSharp
      name:
        CSharp: Get(String)
        VB: Get(String)
      nameWithType:
        CSharp: StorageContainer.Get(String)
        VB: StorageContainer.Get(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Get(String)
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Get(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Get
        path: ''
        startLine: 8005
      summary: "\nGets the value of an item in the storage container.\n"
      remarks: "\nThis method returns the value of the item with the specified key from the Items dictionary.\n"
      example: []
      syntax:
        content:
          CSharp: public Object Get(String _Key)
          VB: Public Function Get(_Key As String) As Object
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key of the item to get.
        return:
          type: GUPS.AntiCheat.Object
          description: The value of the item.
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Get*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Get``1(String)
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.Get``1(String)
      language: CSharp
      name:
        CSharp: Get<T>(String)
        VB: Get(Of T)(String)
      nameWithType:
        CSharp: StorageContainer.Get<T>(String)
        VB: StorageContainer.Get(Of T)(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Get<T>(String)
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Get(Of T)(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Get
        path: ''
        startLine: 8019
      summary: "\nGets the value of an item in the storage container, cast to a specific type.\n"
      remarks: "\nThis method returns the value of the item with the specified key from the Items dictionary, cast to the specified type.\n"
      example: []
      syntax:
        content:
          CSharp: public T Get<T>(String _Key)
          VB: Public Function Get(Of T)(_Key As String) As T
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key of the item to get.
        typeParameters:
        - id: T
          description: The type to cast the value to.
        return:
          type: '{T}'
          description: The value of the item, cast to the specified type.
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Get*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Clear
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: StorageContainer.Clear()
        VB: StorageContainer.Clear()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Clear()
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Clear
        path: ''
        startLine: 8043
      summary: "\nClears all items from the storage container.\n"
      remarks: "\nThis method clears all items from the Items dictionary.\n"
      example: []
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Read(System.IO.Stream)
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.Read(System.IO.Stream)
      language: CSharp
      name:
        CSharp: Read(Stream)
        VB: Read(Stream)
      nameWithType:
        CSharp: StorageContainer.Read(Stream)
        VB: StorageContainer.Read(Stream)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Read(System.IO.Stream)
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Read(System.IO.Stream)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Read
        path: ''
        startLine: 8055
      summary: "\nReads the storage container from a stream.\n"
      remarks: "\nThis method reads the binary data from the specified stream and then reads the storage container using the Read(byte[]) method.\n"
      example: []
      syntax:
        content:
          CSharp: public void Read(Stream _Stream)
          VB: Public Sub Read(_Stream As Stream)
        parameters:
        - id: _Stream
          type: System.IO.Stream
          description: The stream to read from.
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Read*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Read(System.Byte[])
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.Read(System.Byte[])
      language: CSharp
      name:
        CSharp: Read(Byte[])
        VB: Read(Byte())
      nameWithType:
        CSharp: StorageContainer.Read(Byte[])
        VB: StorageContainer.Read(Byte())
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Read(System.Byte[])
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Read(System.Byte())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Read
        path: ''
        startLine: 8074
      summary: "\nReads the storage container from a binary array.\n"
      remarks: "\nThis method creates a binary reader from the specified binary array and reads the storage container using the IReadAble interface.\n"
      example: []
      syntax:
        content:
          CSharp: public void Read(byte[] _Binary)
          VB: Public Sub Read(_Binary As Byte())
        parameters:
        - id: _Binary
          type: System.Byte[]
          description: The binary array to read from.
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Read*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Write(System.IO.Stream)
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.Write(System.IO.Stream)
      language: CSharp
      name:
        CSharp: Write(Stream)
        VB: Write(Stream)
      nameWithType:
        CSharp: StorageContainer.Write(Stream)
        VB: StorageContainer.Write(Stream)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Write(System.IO.Stream)
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Write(System.IO.Stream)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Write
        path: ''
        startLine: 8146
      summary: "\nWrites the storage container to a stream.\n"
      remarks: "\nThis method writes the binary data of the storage container to the specified stream.\n"
      example: []
      syntax:
        content:
          CSharp: public void Write(Stream _Stream)
          VB: Public Sub Write(_Stream As Stream)
        parameters:
        - id: _Stream
          type: System.IO.Stream
          description: The stream to write to.
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Write
      commentId: M:GUPS.AntiCheat.Core.Storage.StorageContainer.Write
      language: CSharp
      name:
        CSharp: Write()
        VB: Write()
      nameWithType:
        CSharp: StorageContainer.Write()
        VB: StorageContainer.Write()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Storage.StorageContainer.Write()
        VB: GUPS.AntiCheat.Core.Storage.StorageContainer.Write()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Storage
      source:
        id: Write
        path: ''
        startLine: 8159
      summary: "\nWrites the storage container to a binary array.\n"
      remarks: "\nThis method creates a binary writer and writes the storage container using the IWriteAble interface.\n"
      example: []
      syntax:
        content:
          CSharp: public byte[] Write()
          VB: Public Function Write As Byte()
        return:
          type: System.Byte[]
          description: The binary array representation of the storage container.
      overload: GUPS.AntiCheat.Core.Storage.StorageContainer.Write*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: GUPS.AntiCheat.Core.Threat
  commentId: N:GUPS.AntiCheat.Core.Threat
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Core.Threat
    VB: GUPS.AntiCheat.Core.Threat
  nameWithType:
    CSharp: GUPS.AntiCheat.Core.Threat
    VB: GUPS.AntiCheat.Core.Threat
  qualifiedName:
    CSharp: GUPS.AntiCheat.Core.Threat
    VB: GUPS.AntiCheat.Core.Threat
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Core.Threat.IThreatRated
    commentId: T:GUPS.AntiCheat.Core.Threat.IThreatRated
    language: CSharp
    name:
      CSharp: IThreatRated
      VB: IThreatRated
    nameWithType:
      CSharp: IThreatRated
      VB: IThreatRated
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Threat.IThreatRated
      VB: GUPS.AntiCheat.Core.Threat.IThreatRated
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Threat
    source:
      id: IThreatRated
      path: ''
      startLine: 8618
    summary: "\nRepresents an interface for classes that assess and convey threat levels by providing a threat rating.\n"
    example: []
    syntax:
      content:
        CSharp: public interface IThreatRated
        VB: Public Interface IThreatRated
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Core.Threat.IThreatRated.ThreatRating
      commentId: P:GUPS.AntiCheat.Core.Threat.IThreatRated.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: IThreatRated.ThreatRating
        VB: IThreatRated.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Core.Threat.IThreatRated.ThreatRating
        VB: GUPS.AntiCheat.Core.Threat.IThreatRated.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Core.Threat
      source:
        id: ThreatRating
        path: ''
        startLine: 8626
      summary: "\nGets the threat rating associated with the implementing class, indicating the assessed level of potential threat.\n"
      remarks: "\nThe threat rating is represented as a positive 32-bit integer (UInt32), where higher values denote greater perceived threats.\n"
      example: []
      syntax:
        content:
          CSharp: UInt32 ThreatRating { get; }
          VB: ReadOnly Property ThreatRating As UInt32
        parameters: []
        return:
          type: GUPS.AntiCheat.UInt32
      overload: GUPS.AntiCheat.Core.Threat.IThreatRated.ThreatRating*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
- id: GUPS.AntiCheat.Core.Watch
  commentId: N:GUPS.AntiCheat.Core.Watch
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Core.Watch
    VB: GUPS.AntiCheat.Core.Watch
  nameWithType:
    CSharp: GUPS.AntiCheat.Core.Watch
    VB: GUPS.AntiCheat.Core.Watch
  qualifiedName:
    CSharp: GUPS.AntiCheat.Core.Watch
    VB: GUPS.AntiCheat.Core.Watch
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Core.Watch.IWatchAble`1
    commentId: T:GUPS.AntiCheat.Core.Watch.IWatchAble`1
    language: CSharp
    name:
      CSharp: IWatchAble<TWatchedSubject>
      VB: IWatchAble(Of TWatchedSubject)
    nameWithType:
      CSharp: IWatchAble<TWatchedSubject>
      VB: IWatchAble(Of TWatchedSubject)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Watch.IWatchAble<TWatchedSubject>
      VB: GUPS.AntiCheat.Core.Watch.IWatchAble(Of TWatchedSubject)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Watch
    source:
      id: IWatchAble
      path: ''
      startLine: 8661
    summary: "\nRepresents an interface for entities that can be watched or monitored, extending the capabilities of the observer pattern.\nThis interface extends the standard observer pattern by incorporating disposable resources.\n"
    remarks: "\n<p>\nThis interface inherits from IObservable{TWatchedSubject} and IDisposable. It is designed for entities that can be observed or monitored.\nThe generic type parameter TWatchedSubject represents the type of the subject being watched, and it must implement the IWatchedSubject interface.\n</p>\n\n<p>\nThe interface does not declare any additional members beyond those inherited.\n</p>\n\n<p>\nMembers inherited from IObservable{TWatchedSubject}:\n- IDisposable Subscribe(IObserver{TWatchedSubject} observer): Subscribes an observer to receive notifications.\n- IDisposable Subscribe(Action{TWatchedSubject} onNext, Action{Exception} onError, Action onCompleted): Subscribes actions to handle notifications.\n</p>\n\n<p>\nMembers inherited from IDisposable:\n- void Dispose(): Performs application-defined tasks associated with freeing, releasing, or resetting resources.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          public interface IWatchAble<out TWatchedSubject>

              where TWatchedSubject : IWatchedSubject
        VB: >-
          Public Interface IWatchAble(Of Out TWatchedSubject As IWatchedSubject)

              Inherits IObservable(Of TWatchedSubject), IDisposable
      typeParameters:
      - id: TWatchedSubject
        description: The type of the subject being watched, which must implement the IWatchedSubject interface.
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items: []
  - id: GUPS.AntiCheat.Core.Watch.IWatchedSubject
    commentId: T:GUPS.AntiCheat.Core.Watch.IWatchedSubject
    language: CSharp
    name:
      CSharp: IWatchedSubject
      VB: IWatchedSubject
    nameWithType:
      CSharp: IWatchedSubject
      VB: IWatchedSubject
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Watch.IWatchedSubject
      VB: GUPS.AntiCheat.Core.Watch.IWatchedSubject
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Watch
    source:
      id: IWatchedSubject
      path: ''
      startLine: 8697
    summary: "\nRepresents an interface for subjects that are watched or monitored.\n"
    remarks: "\n<p>\nThe IWatchedSubject interface serves as the foundation for implementing the subject side of the observer pattern.\nClasses that implement this interface act as subjects that can be watched or monitored by observers.\n</p>\n\n<p>\nObservers can subscribe to receive notifications about changes or events in the watched subject.\nImplementing classes should provide mechanisms for observers to register, unregister, and notify them of relevant changes.\n</p>\n\n<p>\nThis interface itself does not contain any specific members but serves as a marker or contract for classes to adhere to\nwhen implementing the observer pattern.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public interface IWatchedSubject
        VB: Public Interface IWatchedSubject
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items: []
  - id: GUPS.AntiCheat.Core.Watch.IWatcher`1
    commentId: T:GUPS.AntiCheat.Core.Watch.IWatcher`1
    language: CSharp
    name:
      CSharp: IWatcher<TWatchedSubject>
      VB: IWatcher(Of TWatchedSubject)
    nameWithType:
      CSharp: IWatcher<TWatchedSubject>
      VB: IWatcher(Of TWatchedSubject)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Core.Watch.IWatcher<TWatchedSubject>
      VB: GUPS.AntiCheat.Core.Watch.IWatcher(Of TWatchedSubject)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Core.Watch
    source:
      id: IWatcher
      path: ''
      startLine: 8739
    syntax:
      content:
        CSharp: >-
          public interface IWatcher<in TWatchedSubject>

              where TWatchedSubject : IWatchedSubject
        VB: >-
          Public Interface IWatcher(Of In TWatchedSubject As IWatchedSubject)

              Inherits IObserver(Of TWatchedSubject), IDisposable
      typeParameters:
      - id: TWatchedSubject
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items: []
- id: GUPS.AntiCheat.Detector
  commentId: N:GUPS.AntiCheat.Detector
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Detector
    VB: GUPS.AntiCheat.Detector
  nameWithType:
    CSharp: GUPS.AntiCheat.Detector
    VB: GUPS.AntiCheat.Detector
  qualifiedName:
    CSharp: GUPS.AntiCheat.Detector
    VB: GUPS.AntiCheat.Detector
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Detector.ADetector
    commentId: T:GUPS.AntiCheat.Detector.ADetector
    language: CSharp
    name:
      CSharp: ADetector
      VB: ADetector
    nameWithType:
      CSharp: ADetector
      VB: ADetector
    qualifiedName:
      CSharp: GUPS.AntiCheat.Detector.ADetector
      VB: GUPS.AntiCheat.Detector.ADetector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Detector
    source:
      id: ADetector
      path: ''
      startLine: 8783
    syntax:
      content:
        CSharp: 'public abstract class ADetector : MonoBehaviour'
        VB: >-
          Public MustInherit Class ADetector

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.IDetector
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: GUPS.AntiCheat.Detector.ADetector.Name
      commentId: P:GUPS.AntiCheat.Detector.ADetector.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: ADetector.Name
        VB: ADetector.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.ADetector.Name
        VB: GUPS.AntiCheat.Detector.ADetector.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: Name
        path: ''
        startLine: 8791
      summary: "\nThe name of the detector.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract String Name { get; }
          VB: Public MustOverride ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Detector.ADetector.Name*
      modifiers:
        CSharp:
        - public
        - abstract
        - get
        VB:
        - Public
        - MustOverride
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.ADetector.IsSupported
      commentId: P:GUPS.AntiCheat.Detector.ADetector.IsSupported
      language: CSharp
      name:
        CSharp: IsSupported
        VB: IsSupported
      nameWithType:
        CSharp: ADetector.IsSupported
        VB: ADetector.IsSupported
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.ADetector.IsSupported
        VB: GUPS.AntiCheat.Detector.ADetector.IsSupported
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: IsSupported
        path: ''
        startLine: 8801
      summary: "\nGets whether the detector is supported on the current platform.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract bool IsSupported { get; }
          VB: Public MustOverride ReadOnly Property IsSupported As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.ADetector.IsSupported*
      modifiers:
        CSharp:
        - public
        - abstract
        - get
        VB:
        - Public
        - MustOverride
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.ADetector.IsActive
      commentId: P:GUPS.AntiCheat.Detector.ADetector.IsActive
      language: CSharp
      name:
        CSharp: IsActive
        VB: IsActive
      nameWithType:
        CSharp: ADetector.IsActive
        VB: ADetector.IsActive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.ADetector.IsActive
        VB: GUPS.AntiCheat.Detector.ADetector.IsActive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: IsActive
        path: ''
        startLine: 8814
      summary: "\nGets or sets whether the detector is active and watching for possible cheating (Default: true).\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsActive { get; set; }
          VB: Public Property IsActive As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.ADetector.IsActive*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.ADetector.ThreatRating
      commentId: P:GUPS.AntiCheat.Detector.ADetector.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: ADetector.ThreatRating
        VB: ADetector.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.ADetector.ThreatRating
        VB: GUPS.AntiCheat.Detector.ADetector.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: ThreatRating
        path: ''
        startLine: 8827
      summary: "\nGets the threat rating of the detector, indicating the assessed level of potential threat.\n"
      remarks: "\nA higher values denote greater perceived threats.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract uint ThreatRating { get; protected set; }
          VB: Public MustOverride Property ThreatRating As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: GUPS.AntiCheat.Detector.ADetector.ThreatRating*
      modifiers:
        CSharp:
        - public
        - abstract
        - get
        - protected set
        VB:
        - Public
        - MustOverride
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
      commentId: P:GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
      language: CSharp
      name:
        CSharp: PossibleCheatingDetected
        VB: PossibleCheatingDetected
      nameWithType:
        CSharp: ADetector.PossibleCheatingDetected
        VB: ADetector.PossibleCheatingDetected
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
        VB: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: PossibleCheatingDetected
        path: ''
        startLine: 8832
      summary: "\nGet whether the detector has detected a possible cheating activity.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract bool PossibleCheatingDetected { get; protected set; }
          VB: Public MustOverride Property PossibleCheatingDetected As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected*
      modifiers:
        CSharp:
        - public
        - abstract
        - get
        - protected set
        VB:
        - Public
        - MustOverride
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver{IDetectorStatus})
      commentId: M:GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver{IDetectorStatus})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<IDetectorStatus>)
        VB: Subscribe(IObserver(Of IDetectorStatus))
      nameWithType:
        CSharp: ADetector.Subscribe(IObserver<IDetectorStatus>)
        VB: ADetector.Subscribe(IObserver(Of IDetectorStatus))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver<IDetectorStatus>)
        VB: GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver(Of IDetectorStatus))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: Subscribe
        path: ''
        startLine: 8849
      summary: "\nSubscribes an observer to receive notifications of the monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<IDetectorStatus> _Observer)
          VB: Public Function Subscribe(_Observer As IObserver(Of IDetectorStatus)) As IDisposable
        parameters:
        - id: _Observer
          type: GUPS.AntiCheat.IObserver{IDetectorStatus}
          description: The observer to subscribe.
        return:
          type: GUPS.AntiCheat.IDisposable
          description: An <see cref="!:IDisposable"></see> object that can be used to unsubscribe the observer.
      overload: GUPS.AntiCheat.Detector.ADetector.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
      commentId: M:GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
      language: CSharp
      name:
        CSharp: Notify(IDetectorStatus)
        VB: Notify(IDetectorStatus)
      nameWithType:
        CSharp: ADetector.Notify(IDetectorStatus)
        VB: ADetector.Notify(IDetectorStatus)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
        VB: GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: Notify
        path: ''
        startLine: 8863
      summary: "\nNotifies the observers of the monitor of the detected status and possible cheating.\n"
      example: []
      syntax:
        content:
          CSharp: public void Notify(IDetectorStatus _Subject)
          VB: Public Sub Notify(_Subject As IDetectorStatus)
        parameters:
        - id: _Subject
          type: GUPS.AntiCheat.IDetectorStatus
          description: ''
      overload: GUPS.AntiCheat.Detector.ADetector.Notify*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.ADetector.Dispose
      commentId: M:GUPS.AntiCheat.Detector.ADetector.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ADetector.Dispose()
        VB: ADetector.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.ADetector.Dispose()
        VB: GUPS.AntiCheat.Detector.ADetector.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: Dispose
        path: ''
        startLine: 8910
      summary: "\nNotifies the observers that the monitor has completed.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Detector.ADetector.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.ADetector.OnCompleted
      commentId: M:GUPS.AntiCheat.Detector.ADetector.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: ADetector.OnCompleted()
        VB: ADetector.OnCompleted()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.ADetector.OnCompleted()
        VB: GUPS.AntiCheat.Detector.ADetector.OnCompleted()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnCompleted
        path: ''
        startLine: 8933
      summary: "\nCalled when the observed monitor has completed.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract void OnCompleted()
          VB: Public MustOverride Sub OnCompleted
      overload: GUPS.AntiCheat.Detector.ADetector.OnCompleted*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
      commentId: M:GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: ADetector.OnError(Exception)
        VB: ADetector.OnError(Exception)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
        VB: GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnError
        path: ''
        startLine: 8939
      summary: "\nCalled when an error occurs in the observed monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract void OnError(Exception _Error)
          VB: Public MustOverride Sub OnError(_Error As Exception)
        parameters:
        - id: _Error
          type: GUPS.AntiCheat.Exception
          description: The error that occurred.
      overload: GUPS.AntiCheat.Detector.ADetector.OnError*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
      commentId: M:GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
      language: CSharp
      name:
        CSharp: OnNext(IWatchedSubject)
        VB: OnNext(IWatchedSubject)
      nameWithType:
        CSharp: ADetector.OnNext(IWatchedSubject)
        VB: ADetector.OnNext(IWatchedSubject)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
        VB: GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnNext
        path: ''
        startLine: 8945
      summary: "\nCalled when the observed monitor has a new status.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract void OnNext(IWatchedSubject _Subject)
          VB: Public MustOverride Sub OnNext(_Subject As IWatchedSubject)
        parameters:
        - id: _Subject
          type: GUPS.AntiCheat.IWatchedSubject
          description: The new status of the monitor.
      overload: GUPS.AntiCheat.Detector.ADetector.OnNext*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: GUPS.AntiCheat.Detector.ADetector.Awake
      commentId: M:GUPS.AntiCheat.Detector.ADetector.Awake
      language: CSharp
      name:
        CSharp: Awake()
        VB: Awake()
      nameWithType:
        CSharp: ADetector.Awake()
        VB: ADetector.Awake()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.ADetector.Awake()
        VB: GUPS.AntiCheat.Detector.ADetector.Awake()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: Awake
        path: ''
        startLine: 8955
      summary: "\nOn awake, check if the detector is supported and disable it if it is not.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void Awake()
          VB: Protected Overridable Sub Awake
      overload: GUPS.AntiCheat.Detector.ADetector.Awake*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
  - id: GUPS.AntiCheat.Detector.CheatingDetectionEvent`1
    commentId: T:GUPS.AntiCheat.Detector.CheatingDetectionEvent`1
    language: CSharp
    name:
      CSharp: CheatingDetectionEvent<T>
      VB: CheatingDetectionEvent(Of T)
    nameWithType:
      CSharp: CheatingDetectionEvent<T>
      VB: CheatingDetectionEvent(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Detector.CheatingDetectionEvent<T>
      VB: GUPS.AntiCheat.Detector.CheatingDetectionEvent(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Detector
    source:
      id: CheatingDetectionEvent
      path: ''
      startLine: 9971
    summary: "\nA unity event that is used to subscribe to the cheating detection events. It is useful if you do not want to write custom \nobservers to subscribe to the detectors and simply attach a callback to the detector event through the inspector.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class CheatingDetectionEvent<T> : UnityEvent<T> where T : IDetectorStatus'
        VB: >-
          Public Class CheatingDetectionEvent(Of T As IDetectorStatus)

              Inherits UnityEvent(Of T)
      typeParameters:
      - id: T
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector
    commentId: T:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector
    language: CSharp
    name:
      CSharp: PrimitiveCheatingDetector
      VB: PrimitiveCheatingDetector
    nameWithType:
      CSharp: PrimitiveCheatingDetector
      VB: PrimitiveCheatingDetector
    qualifiedName:
      CSharp: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector
      VB: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Detector
    source:
      id: PrimitiveCheatingDetector
      path: ''
      startLine: 10211
    summary: "\nThis detector is used to detect unexpected value modifications of primitive protected types, commonly done through memory manipulation / cheating.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class PrimitiveCheatingDetector : ADetector'
        VB: >-
          Public Class PrimitiveCheatingDetector

              Inherits ADetector
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Detector.ADetector
    implements:
    - GUPS.AntiCheat.IDetector
    inheritedMembers:
    - GUPS.AntiCheat.Detector.ADetector.IsActive
    - GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver{IDetectorStatus})
    - GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
    - GUPS.AntiCheat.Detector.ADetector.Dispose
    - GUPS.AntiCheat.Detector.ADetector.Awake
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.Name
      commentId: P:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: PrimitiveCheatingDetector.Name
        VB: PrimitiveCheatingDetector.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.Name
        VB: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: Name
        path: ''
        startLine: 10219
      summary: "\nThe name of the detector.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.Name*
      overridden: GUPS.AntiCheat.Detector.ADetector.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.IsSupported
      commentId: P:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.IsSupported
      language: CSharp
      name:
        CSharp: IsSupported
        VB: IsSupported
      nameWithType:
        CSharp: PrimitiveCheatingDetector.IsSupported
        VB: PrimitiveCheatingDetector.IsSupported
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.IsSupported
        VB: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.IsSupported
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: IsSupported
        path: ''
        startLine: 10229
      summary: "\nIs supported on all platforms.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool IsSupported { get; }
          VB: Public Overrides ReadOnly Property IsSupported As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.IsSupported*
      overridden: GUPS.AntiCheat.Detector.ADetector.IsSupported
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibilityOfFalsePositive
      commentId: P:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibilityOfFalsePositive
      language: CSharp
      name:
        CSharp: PossibilityOfFalsePositive
        VB: PossibilityOfFalsePositive
      nameWithType:
        CSharp: PrimitiveCheatingDetector.PossibilityOfFalsePositive
        VB: PrimitiveCheatingDetector.PossibilityOfFalsePositive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibilityOfFalsePositive
        VB: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibilityOfFalsePositive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: PossibilityOfFalsePositive
        path: ''
        startLine: 10239
      summary: "\nThe possibility of a false positive is very low.\n"
      example: []
      syntax:
        content:
          CSharp: public float PossibilityOfFalsePositive { get; }
          VB: Public ReadOnly Property PossibilityOfFalsePositive As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibilityOfFalsePositive*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.ThreatRating
      commentId: P:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: PrimitiveCheatingDetector.ThreatRating
        VB: PrimitiveCheatingDetector.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.ThreatRating
        VB: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: ThreatRating
        path: ''
        startLine: 10252
      summary: "\nThe threat rating of this detector. It is set to a very high value, because false positives are very unlikely and the impact of cheating is very high (Recommended: 500).\n"
      example: []
      syntax:
        content:
          CSharp: public override uint ThreatRating { get; protected set; }
          VB: Public Overrides Property ThreatRating As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.ThreatRating*
      overridden: GUPS.AntiCheat.Detector.ADetector.ThreatRating
      modifiers:
        CSharp:
        - public
        - override
        - get
        - protected set
        VB:
        - Public
        - Overrides
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibleCheatingDetected
      commentId: P:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibleCheatingDetected
      language: CSharp
      name:
        CSharp: PossibleCheatingDetected
        VB: PossibleCheatingDetected
      nameWithType:
        CSharp: PrimitiveCheatingDetector.PossibleCheatingDetected
        VB: PrimitiveCheatingDetector.PossibleCheatingDetected
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibleCheatingDetected
        VB: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibleCheatingDetected
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: PossibleCheatingDetected
        path: ''
        startLine: 10257
      summary: "\nStores whether a cheating got detected.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool PossibleCheatingDetected { get; protected set; }
          VB: Public Overrides Property PossibleCheatingDetected As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibleCheatingDetected*
      overridden: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
      modifiers:
        CSharp:
        - public
        - override
        - get
        - protected set
        VB:
        - Public
        - Overrides
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCheatingDetectionEvent
      commentId: F:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCheatingDetectionEvent
      language: CSharp
      name:
        CSharp: OnCheatingDetectionEvent
        VB: OnCheatingDetectionEvent
      nameWithType:
        CSharp: PrimitiveCheatingDetector.OnCheatingDetectionEvent
        VB: PrimitiveCheatingDetector.OnCheatingDetectionEvent
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCheatingDetectionEvent
        VB: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCheatingDetectionEvent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnCheatingDetectionEvent
        path: ''
        startLine: 10270
      summary: "\nA unity event that is used to subscribe to the cheating detection events. It is useful if you do not want to write custom observers to subscribe to the detectors and \nsimply attach a callback to the detector event through the inspector.\n"
      example: []
      syntax:
        content:
          CSharp: public CheatingDetectionEvent<CheatingDetectionStatus> OnCheatingDetectionEvent
          VB: Public OnCheatingDetectionEvent As CheatingDetectionEvent(Of CheatingDetectionStatus)
        return:
          type: GUPS.AntiCheat.Detector.CheatingDetectionEvent{GUPS.AntiCheat.Detector.CheatingDetectionStatus}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnNext(IWatchedSubject)
      commentId: M:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnNext(IWatchedSubject)
      language: CSharp
      name:
        CSharp: OnNext(IWatchedSubject)
        VB: OnNext(IWatchedSubject)
      nameWithType:
        CSharp: PrimitiveCheatingDetector.OnNext(IWatchedSubject)
        VB: PrimitiveCheatingDetector.OnNext(IWatchedSubject)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnNext(IWatchedSubject)
        VB: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnNext(IWatchedSubject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnNext
        path: ''
        startLine: 10281
      summary: "\nCalled directly by the protected primitive types when an unexpected modification is detected. Notifies observers of the detected cheating.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnNext(IWatchedSubject _Subject)
          VB: Public Overrides Sub OnNext(_Subject As IWatchedSubject)
        parameters:
        - id: _Subject
          type: GUPS.AntiCheat.IWatchedSubject
          description: ''
      overload: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnNext*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnError(Exception)
      commentId: M:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: PrimitiveCheatingDetector.OnError(Exception)
        VB: PrimitiveCheatingDetector.OnError(Exception)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnError(Exception)
        VB: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnError(Exception)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnError
        path: ''
        startLine: 10301
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnError(Exception _Error)
          VB: Public Overrides Sub OnError(_Error As Exception)
        parameters:
        - id: _Error
          type: GUPS.AntiCheat.Exception
          description: Error to handle.
      overload: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnError*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCompleted
      commentId: M:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: PrimitiveCheatingDetector.OnCompleted()
        VB: PrimitiveCheatingDetector.OnCompleted()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCompleted()
        VB: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCompleted()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnCompleted
        path: ''
        startLine: 10309
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnCompleted()
          VB: Public Overrides Sub OnCompleted
      overload: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCompleted*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnCompleted
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector
    commentId: T:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector
    language: CSharp
    name:
      CSharp: DeviceTimeCheatingDetector
      VB: DeviceTimeCheatingDetector
    nameWithType:
      CSharp: DeviceTimeCheatingDetector
      VB: DeviceTimeCheatingDetector
    qualifiedName:
      CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector
      VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Detector
    source:
      id: DeviceTimeCheatingDetector
      path: ''
      startLine: 10339
    summary: "\nThis detector is used to detect device or system time manipulation. It observes the device time monitor and subscribes to time deviations, \nbased on this it calculates the possibility of cheating and notifies observers of the detected cheating. It also provides a trustworthy \nDateTime.UtcNow either calculated based on the internet time or device time, provided in the ProtectedTime class.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class DeviceTimeCheatingDetector : ADetector'
        VB: >-
          Public Class DeviceTimeCheatingDetector

              Inherits ADetector
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Detector.ADetector
    implements:
    - GUPS.AntiCheat.IDetector
    inheritedMembers:
    - GUPS.AntiCheat.Detector.ADetector.IsActive
    - GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver{IDetectorStatus})
    - GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
    - GUPS.AntiCheat.Detector.ADetector.Dispose
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Name
      commentId: P:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.Name
        VB: DeviceTimeCheatingDetector.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Name
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: Name
        path: ''
        startLine: 10347
      summary: "\nThe name of the detector.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Name*
      overridden: GUPS.AntiCheat.Detector.ADetector.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.IsSupported
      commentId: P:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.IsSupported
      language: CSharp
      name:
        CSharp: IsSupported
        VB: IsSupported
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.IsSupported
        VB: DeviceTimeCheatingDetector.IsSupported
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.IsSupported
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.IsSupported
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: IsSupported
        path: ''
        startLine: 10357
      summary: "\nIs supported on all platforms.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool IsSupported { get; }
          VB: Public Overrides ReadOnly Property IsSupported As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.IsSupported*
      overridden: GUPS.AntiCheat.Detector.ADetector.IsSupported
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.ThreatRating
      commentId: P:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.ThreatRating
        VB: DeviceTimeCheatingDetector.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.ThreatRating
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: ThreatRating
        path: ''
        startLine: 10375
      summary: "\nThe threat rating of this detector. It is set to a very high value, because false positives are very unlikely and the impact of cheating is very high (Recommended: 500).\n"
      example: []
      syntax:
        content:
          CSharp: public override uint ThreatRating { get; protected set; }
          VB: Public Overrides Property ThreatRating As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.ThreatRating*
      overridden: GUPS.AntiCheat.Detector.ADetector.ThreatRating
      modifiers:
        CSharp:
        - public
        - override
        - get
        - protected set
        VB:
        - Public
        - Overrides
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.PossibleCheatingDetected
      commentId: P:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.PossibleCheatingDetected
      language: CSharp
      name:
        CSharp: PossibleCheatingDetected
        VB: PossibleCheatingDetected
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.PossibleCheatingDetected
        VB: DeviceTimeCheatingDetector.PossibleCheatingDetected
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.PossibleCheatingDetected
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.PossibleCheatingDetected
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: PossibleCheatingDetected
        path: ''
        startLine: 10380
      summary: "\nStores whether a cheating got detected.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool PossibleCheatingDetected { get; protected set; }
          VB: Public Overrides Property PossibleCheatingDetected As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.PossibleCheatingDetected*
      overridden: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
      modifiers:
        CSharp:
        - public
        - override
        - get
        - protected set
        VB:
        - Public
        - Overrides
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCheatingDetectionEvent
      commentId: F:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCheatingDetectionEvent
      language: CSharp
      name:
        CSharp: OnCheatingDetectionEvent
        VB: OnCheatingDetectionEvent
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.OnCheatingDetectionEvent
        VB: DeviceTimeCheatingDetector.OnCheatingDetectionEvent
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCheatingDetectionEvent
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCheatingDetectionEvent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnCheatingDetectionEvent
        path: ''
        startLine: 10393
      summary: "\nA unity event that is used to subscribe to the cheating detection events. It is useful if you do not want to write custom observers to subscribe to the detectors and \nsimply attach a callback to the detector event through the inspector.\n"
      example: []
      syntax:
        content:
          CSharp: public CheatingDetectionEvent<CheatingDetectionStatus> OnCheatingDetectionEvent
          VB: Public OnCheatingDetectionEvent As CheatingDetectionEvent(Of CheatingDetectionStatus)
        return:
          type: GUPS.AntiCheat.Detector.CheatingDetectionEvent{GUPS.AntiCheat.Detector.CheatingDetectionStatus}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnNext(IWatchedSubject)
      commentId: M:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnNext(IWatchedSubject)
      language: CSharp
      name:
        CSharp: OnNext(IWatchedSubject)
        VB: OnNext(IWatchedSubject)
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.OnNext(IWatchedSubject)
        VB: DeviceTimeCheatingDetector.OnNext(IWatchedSubject)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnNext(IWatchedSubject)
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnNext(IWatchedSubject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnNext
        path: ''
        startLine: 10404
      summary: "\nWhen notified by the device time monitor, notify observers of the detected cheating.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnNext(IWatchedSubject _Subject)
          VB: Public Overrides Sub OnNext(_Subject As IWatchedSubject)
        parameters:
        - id: _Subject
          type: GUPS.AntiCheat.IWatchedSubject
          description: ''
      overload: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnNext*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnError(Exception)
      commentId: M:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.OnError(Exception)
        VB: DeviceTimeCheatingDetector.OnError(Exception)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnError(Exception)
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnError(Exception)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnError
        path: ''
        startLine: 10434
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnError(Exception _Error)
          VB: Public Overrides Sub OnError(_Error As Exception)
        parameters:
        - id: _Error
          type: GUPS.AntiCheat.Exception
          description: Error to handle.
      overload: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnError*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCompleted
      commentId: M:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.OnCompleted()
        VB: DeviceTimeCheatingDetector.OnCompleted()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCompleted()
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCompleted()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnCompleted
        path: ''
        startLine: 10442
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnCompleted()
          VB: Public Overrides Sub OnCompleted
      overload: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCompleted*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnCompleted
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.UseInternetTime
      commentId: P:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.UseInternetTime
      language: CSharp
      name:
        CSharp: UseInternetTime
        VB: UseInternetTime
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.UseInternetTime
        VB: DeviceTimeCheatingDetector.UseInternetTime
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.UseInternetTime
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.UseInternetTime
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: UseInternetTime
        path: ''
        startLine: 10473
      summary: "\nGets whether the monitor uses internet time for synchronization.\n"
      example: []
      syntax:
        content:
          CSharp: public bool UseInternetTime { get; }
          VB: Public ReadOnly Property UseInternetTime As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.UseInternetTime*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.CurrentUtcTime
      commentId: F:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.CurrentUtcTime
      language: CSharp
      name:
        CSharp: CurrentUtcTime
        VB: CurrentUtcTime
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.CurrentUtcTime
        VB: DeviceTimeCheatingDetector.CurrentUtcTime
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.CurrentUtcTime
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.CurrentUtcTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: CurrentUtcTime
        path: ''
        startLine: 10507
      summary: "\nThe calculated utc time, which may differs from the original DateTime.UtcNow because it is calculated to be secure and trustable as possible.\n"
      example: []
      syntax:
        content:
          CSharp: public DateTime CurrentUtcTime
          VB: Public CurrentUtcTime As DateTime
        return:
          type: GUPS.AntiCheat.DateTime
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Awake
      commentId: M:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Awake
      language: CSharp
      name:
        CSharp: Awake()
        VB: Awake()
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.Awake()
        VB: DeviceTimeCheatingDetector.Awake()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Awake()
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Awake()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: Awake
        path: ''
        startLine: 10608
      summary: "\nOn awake register to the device time monitor on the same game object.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Awake()
          VB: Protected Overrides Sub Awake
      overload: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Awake*
      overridden: GUPS.AntiCheat.Detector.ADetector.Awake
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.FixedUpdate
      commentId: M:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.FixedUpdate
      language: CSharp
      name:
        CSharp: FixedUpdate()
        VB: FixedUpdate()
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.FixedUpdate()
        VB: DeviceTimeCheatingDetector.FixedUpdate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.FixedUpdate()
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.FixedUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: FixedUpdate
        path: ''
        startLine: 10636
      summary: "\nOn unity fixed update, calculate the current utc time.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void FixedUpdate()
          VB: Protected Overridable Sub FixedUpdate
      overload: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.FixedUpdate*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationFocus(System.Boolean)
      commentId: M:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationFocus(System.Boolean)
      language: CSharp
      name:
        CSharp: OnApplicationFocus(Boolean)
        VB: OnApplicationFocus(Boolean)
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.OnApplicationFocus(Boolean)
        VB: DeviceTimeCheatingDetector.OnApplicationFocus(Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationFocus(System.Boolean)
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationFocus(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnApplicationFocus
        path: ''
        startLine: 10652
      summary: "\nWhen the application gains focus again after losing it, the application time gets recalculated.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnApplicationFocus(bool _HasFocus)
          VB: Protected Overridable Sub OnApplicationFocus(_HasFocus As Boolean)
        parameters:
        - id: _HasFocus
          type: System.Boolean
          description: True if the application gains focus, false if it loses focus.
      overload: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationFocus*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationPause(System.Boolean)
      commentId: M:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationPause(System.Boolean)
      language: CSharp
      name:
        CSharp: OnApplicationPause(Boolean)
        VB: OnApplicationPause(Boolean)
      nameWithType:
        CSharp: DeviceTimeCheatingDetector.OnApplicationPause(Boolean)
        VB: DeviceTimeCheatingDetector.OnApplicationPause(Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationPause(System.Boolean)
        VB: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationPause(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnApplicationPause
        path: ''
        startLine: 10665
      summary: "\nWhen the application is unpaused after being paused,the application time gets recalculated.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnApplicationPause(bool _IsPaused)
          VB: Protected Overridable Sub OnApplicationPause(_IsPaused As Boolean)
        parameters:
        - id: _IsPaused
          type: System.Boolean
          description: True if the application is paused, false if it is unpaused.
      overload: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationPause*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
  - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector
    commentId: T:GUPS.AntiCheat.Detector.GameTimeCheatingDetector
    language: CSharp
    name:
      CSharp: GameTimeCheatingDetector
      VB: GameTimeCheatingDetector
    nameWithType:
      CSharp: GameTimeCheatingDetector
      VB: GameTimeCheatingDetector
    qualifiedName:
      CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector
      VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Detector
    source:
      id: GameTimeCheatingDetector
      path: ''
      startLine: 10698
    summary: "\nThis detector is used to detect game time (UnityEngine.Time) cheating. It observes the game time monitor and subscribes to time deviations,\nbased on this it calculates the possibility of cheating and notifies observers of the detected cheating. Additionally, it starts doing counter measures\nby calculating the game time based on system ticks, if a cheating got detected. So even if cheated, the game time will be calculated correctly and applied\nin GUPS.AntiCheat.Protected.Time.ProtectedTime.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GameTimeCheatingDetector : ADetector'
        VB: >-
          Public Class GameTimeCheatingDetector

              Inherits ADetector
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Detector.ADetector
    implements:
    - GUPS.AntiCheat.IDetector
    inheritedMembers:
    - GUPS.AntiCheat.Detector.ADetector.IsActive
    - GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver{IDetectorStatus})
    - GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
    - GUPS.AntiCheat.Detector.ADetector.Dispose
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Name
      commentId: P:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: GameTimeCheatingDetector.Name
        VB: GameTimeCheatingDetector.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Name
        VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: Name
        path: ''
        startLine: 10706
      summary: "\nThe name of the detector.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Name*
      overridden: GUPS.AntiCheat.Detector.ADetector.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.IsSupported
      commentId: P:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.IsSupported
      language: CSharp
      name:
        CSharp: IsSupported
        VB: IsSupported
      nameWithType:
        CSharp: GameTimeCheatingDetector.IsSupported
        VB: GameTimeCheatingDetector.IsSupported
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.IsSupported
        VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.IsSupported
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: IsSupported
        path: ''
        startLine: 10716
      summary: "\nIs supported on all platforms.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool IsSupported { get; }
          VB: Public Overrides ReadOnly Property IsSupported As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.IsSupported*
      overridden: GUPS.AntiCheat.Detector.ADetector.IsSupported
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibilityOfFalsePositive
      commentId: P:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibilityOfFalsePositive
      language: CSharp
      name:
        CSharp: PossibilityOfFalsePositive
        VB: PossibilityOfFalsePositive
      nameWithType:
        CSharp: GameTimeCheatingDetector.PossibilityOfFalsePositive
        VB: GameTimeCheatingDetector.PossibilityOfFalsePositive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibilityOfFalsePositive
        VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibilityOfFalsePositive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: PossibilityOfFalsePositive
        path: ''
        startLine: 10727
      summary: "\nThe possibility of false positive reachs from 0.0 to 1.0. The game time monitoring is not so reliable, \nbecause of possible hickups of the game itself. So the possibility of false positive is set to 0.45.\n"
      example: []
      syntax:
        content:
          CSharp: public float PossibilityOfFalsePositive { get; }
          VB: Public ReadOnly Property PossibilityOfFalsePositive As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibilityOfFalsePositive*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.ThreatRating
      commentId: P:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: GameTimeCheatingDetector.ThreatRating
        VB: GameTimeCheatingDetector.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.ThreatRating
        VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: ThreatRating
        path: ''
        startLine: 10740
      summary: "\nThe threat rating of this detector. It is set to a low value, because false positives are likely and a high amount of possible cheating detections will be send to the monitor (Recommended: 25).\n"
      example: []
      syntax:
        content:
          CSharp: public override uint ThreatRating { get; protected set; }
          VB: Public Overrides Property ThreatRating As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.ThreatRating*
      overridden: GUPS.AntiCheat.Detector.ADetector.ThreatRating
      modifiers:
        CSharp:
        - public
        - override
        - get
        - protected set
        VB:
        - Public
        - Overrides
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibleCheatingDetected
      commentId: P:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibleCheatingDetected
      language: CSharp
      name:
        CSharp: PossibleCheatingDetected
        VB: PossibleCheatingDetected
      nameWithType:
        CSharp: GameTimeCheatingDetector.PossibleCheatingDetected
        VB: GameTimeCheatingDetector.PossibleCheatingDetected
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibleCheatingDetected
        VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibleCheatingDetected
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: PossibleCheatingDetected
        path: ''
        startLine: 10745
      summary: "\nStores whether a cheating got detected.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool PossibleCheatingDetected { get; protected set; }
          VB: Public Overrides Property PossibleCheatingDetected As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibleCheatingDetected*
      overridden: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
      modifiers:
        CSharp:
        - public
        - override
        - get
        - protected set
        VB:
        - Public
        - Overrides
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCheatingDetectionEvent
      commentId: F:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCheatingDetectionEvent
      language: CSharp
      name:
        CSharp: OnCheatingDetectionEvent
        VB: OnCheatingDetectionEvent
      nameWithType:
        CSharp: GameTimeCheatingDetector.OnCheatingDetectionEvent
        VB: GameTimeCheatingDetector.OnCheatingDetectionEvent
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCheatingDetectionEvent
        VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCheatingDetectionEvent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnCheatingDetectionEvent
        path: ''
        startLine: 10758
      summary: "\nA unity event that is used to subscribe to the cheating detection events. It is useful if you do not want to write custom observers to subscribe to the detectors and \nsimply attach a callback to the detector event through the inspector.\n"
      example: []
      syntax:
        content:
          CSharp: public CheatingDetectionEvent<CheatingDetectionStatus> OnCheatingDetectionEvent
          VB: Public OnCheatingDetectionEvent As CheatingDetectionEvent(Of CheatingDetectionStatus)
        return:
          type: GUPS.AntiCheat.Detector.CheatingDetectionEvent{GUPS.AntiCheat.Detector.CheatingDetectionStatus}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnNext(IWatchedSubject)
      commentId: M:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnNext(IWatchedSubject)
      language: CSharp
      name:
        CSharp: OnNext(IWatchedSubject)
        VB: OnNext(IWatchedSubject)
      nameWithType:
        CSharp: GameTimeCheatingDetector.OnNext(IWatchedSubject)
        VB: GameTimeCheatingDetector.OnNext(IWatchedSubject)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnNext(IWatchedSubject)
        VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnNext(IWatchedSubject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnNext
        path: ''
        startLine: 10769
      summary: "\nWhen notified by the game time monitor, record the deviation and notify observers of the detected cheating.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnNext(IWatchedSubject _Subject)
          VB: Public Overrides Sub OnNext(_Subject As IWatchedSubject)
        parameters:
        - id: _Subject
          type: GUPS.AntiCheat.IWatchedSubject
          description: ''
      overload: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnNext*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnError(Exception)
      commentId: M:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: GameTimeCheatingDetector.OnError(Exception)
        VB: GameTimeCheatingDetector.OnError(Exception)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnError(Exception)
        VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnError(Exception)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnError
        path: ''
        startLine: 10811
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnError(Exception _Error)
          VB: Public Overrides Sub OnError(_Error As Exception)
        parameters:
        - id: _Error
          type: GUPS.AntiCheat.Exception
          description: Error to handle.
      overload: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnError*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCompleted
      commentId: M:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: GameTimeCheatingDetector.OnCompleted()
        VB: GameTimeCheatingDetector.OnCompleted()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCompleted()
        VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCompleted()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnCompleted
        path: ''
        startLine: 10819
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnCompleted()
          VB: Public Overrides Sub OnCompleted
      overload: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCompleted*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnCompleted
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Awake
      commentId: M:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Awake
      language: CSharp
      name:
        CSharp: Awake()
        VB: Awake()
      nameWithType:
        CSharp: GameTimeCheatingDetector.Awake()
        VB: GameTimeCheatingDetector.Awake()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Awake()
        VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Awake()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: Awake
        path: ''
        startLine: 10842
      summary: "\nOn awake register to the game time monitor on the same game object.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Awake()
          VB: Protected Overrides Sub Awake
      overload: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Awake*
      overridden: GUPS.AntiCheat.Detector.ADetector.Awake
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Update
      commentId: M:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Update
      language: CSharp
      name:
        CSharp: Update()
        VB: Update()
      nameWithType:
        CSharp: GameTimeCheatingDetector.Update()
        VB: GameTimeCheatingDetector.Update()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Update()
        VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Update()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: Update
        path: ''
        startLine: 10864
      syntax:
        content:
          CSharp: protected virtual void Update()
          VB: Protected Overridable Sub Update
      overload: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Update*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnLevelFinishedLoading(Scene,LoadSceneMode)
      commentId: M:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnLevelFinishedLoading(Scene,LoadSceneMode)
      language: CSharp
      name:
        CSharp: OnLevelFinishedLoading(Scene, LoadSceneMode)
        VB: OnLevelFinishedLoading(Scene, LoadSceneMode)
      nameWithType:
        CSharp: GameTimeCheatingDetector.OnLevelFinishedLoading(Scene, LoadSceneMode)
        VB: GameTimeCheatingDetector.OnLevelFinishedLoading(Scene, LoadSceneMode)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnLevelFinishedLoading(Scene, LoadSceneMode)
        VB: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnLevelFinishedLoading(Scene, LoadSceneMode)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: OnLevelFinishedLoading
        path: ''
        startLine: 10895
      summary: "\nOn a new level got loaded, reset the time since level loaded time.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnLevelFinishedLoading(Scene _Scene, LoadSceneMode _Mode)
          VB: Protected Overridable Sub OnLevelFinishedLoading(_Scene As Scene, _Mode As LoadSceneMode)
        parameters:
        - id: _Scene
          type: GUPS.AntiCheat.Scene
          description: The loaded scene.
        - id: _Mode
          type: GUPS.AntiCheat.LoadSceneMode
          description: The scene loading mode.
      overload: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnLevelFinishedLoading*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
  - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus
    commentId: T:GUPS.AntiCheat.Detector.CheatingDetectionStatus
    language: CSharp
    name:
      CSharp: CheatingDetectionStatus
      VB: CheatingDetectionStatus
    nameWithType:
      CSharp: CheatingDetectionStatus
      VB: CheatingDetectionStatus
    qualifiedName:
      CSharp: GUPS.AntiCheat.Detector.CheatingDetectionStatus
      VB: GUPS.AntiCheat.Detector.CheatingDetectionStatus
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Detector
    source:
      id: CheatingDetectionStatus
      path: ''
      startLine: 11064
    summary: "\nRepresents a default implementation of the <see cref=\"!:IDetectorStatus\"></see> interface, providing a possibility of false positive and threat rating.\n"
    example: []
    syntax:
      content:
        CSharp: public struct CheatingDetectionStatus
        VB: Public Structure CheatingDetectionStatus
    implements:
    - GUPS.AntiCheat.IDetectorStatus
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus.PossibilityOfFalsePositive
      commentId: P:GUPS.AntiCheat.Detector.CheatingDetectionStatus.PossibilityOfFalsePositive
      language: CSharp
      name:
        CSharp: PossibilityOfFalsePositive
        VB: PossibilityOfFalsePositive
      nameWithType:
        CSharp: CheatingDetectionStatus.PossibilityOfFalsePositive
        VB: CheatingDetectionStatus.PossibilityOfFalsePositive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.CheatingDetectionStatus.PossibilityOfFalsePositive
        VB: GUPS.AntiCheat.Detector.CheatingDetectionStatus.PossibilityOfFalsePositive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: PossibilityOfFalsePositive
        path: ''
        startLine: 11073
      summary: "\nGets a value indicating the possibility of a false positive when assessing threats for the implementing subject from 0.0 to 1.0.\n"
      remarks: "\nThe value is represented as a positive float value ranging from 0.0 to 1.0, where 0.0 indicates no possibility of a false positive,\nand 1.0 denotes a 100% possibility of a false positive.\n"
      example: []
      syntax:
        content:
          CSharp: public float PossibilityOfFalsePositive { readonly get; }
          VB: Public ReadOnly Property PossibilityOfFalsePositive As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Detector.CheatingDetectionStatus.PossibilityOfFalsePositive*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus.ThreatRating
      commentId: P:GUPS.AntiCheat.Detector.CheatingDetectionStatus.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: CheatingDetectionStatus.ThreatRating
        VB: CheatingDetectionStatus.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.CheatingDetectionStatus.ThreatRating
        VB: GUPS.AntiCheat.Detector.CheatingDetectionStatus.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: ThreatRating
        path: ''
        startLine: 11081
      summary: "\nGets the threat rating associated with the detected cheating, indicating the assessed level of a potential threat.\n"
      remarks: "\nThe threat rating is represented as a positive 32-bit integer (UInt32), where higher values denote greater perceived threats.\n"
      example: []
      syntax:
        content:
          CSharp: public uint ThreatRating { readonly get; }
          VB: Public ReadOnly Property ThreatRating As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: GUPS.AntiCheat.Detector.CheatingDetectionStatus.ThreatRating*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus.#ctor(System.Single,System.UInt32)
      commentId: M:GUPS.AntiCheat.Detector.CheatingDetectionStatus.#ctor(System.Single,System.UInt32)
      language: CSharp
      name:
        CSharp: CheatingDetectionStatus(Single, UInt32)
        VB: CheatingDetectionStatus(Single, UInt32)
      nameWithType:
        CSharp: CheatingDetectionStatus.CheatingDetectionStatus(Single, UInt32)
        VB: CheatingDetectionStatus.CheatingDetectionStatus(Single, UInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.CheatingDetectionStatus.CheatingDetectionStatus(System.Single, System.UInt32)
        VB: GUPS.AntiCheat.Detector.CheatingDetectionStatus.CheatingDetectionStatus(System.Single, System.UInt32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector
      source:
        id: .ctor
        path: ''
        startLine: 11088
      summary: "\nCreates a new instance of the <xref href=\"GUPS.AntiCheat.Detector.CheatingDetectionStatus\" data-throw-if-not-resolved=\"false\"></xref> struct with the specified possibility of false positive and threat rating.\n"
      example: []
      syntax:
        content:
          CSharp: public CheatingDetectionStatus(float _PossibilityOfFalsePositive, uint _ThreatRating)
          VB: Public Sub New(_PossibilityOfFalsePositive As Single, _ThreatRating As UInteger)
        parameters:
        - id: _PossibilityOfFalsePositive
          type: System.Single
          description: The possibility of a false positive ranging from 0.0 to 1.0.
        - id: _ThreatRating
          type: System.UInt32
          description: The threat rating.
      overload: GUPS.AntiCheat.Detector.CheatingDetectionStatus.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Detector.CheatingDetectionStatus: 
- id: GUPS.AntiCheat.Detector.Android
  commentId: N:GUPS.AntiCheat.Detector.Android
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Detector.Android
    VB: GUPS.AntiCheat.Detector.Android
  nameWithType:
    CSharp: GUPS.AntiCheat.Detector.Android
    VB: GUPS.AntiCheat.Detector.Android
  qualifiedName:
    CSharp: GUPS.AntiCheat.Detector.Android
    VB: GUPS.AntiCheat.Detector.Android
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector
    commentId: T:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector
    language: CSharp
    name:
      CSharp: AndroidDeviceCheatingDetector
      VB: AndroidDeviceCheatingDetector
    nameWithType:
      CSharp: AndroidDeviceCheatingDetector
      VB: AndroidDeviceCheatingDetector
    qualifiedName:
      CSharp: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector
      VB: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Detector.Android
    source:
      id: AndroidDeviceCheatingDetector
      path: ''
      startLine: 9002
    summary: "\nThis detector is used to detect if the Android device has unallowed applications installed which can be used to cheat in the game. If so it will notify the \nobservers about the unallowed applications.\n"
    remarks: "\n<p>\nOn awake the detector will register to the android device monitors on the same game object. Currently it is only the <see cref=\"!:AndroidInstalledApplicationMonitor\"></see>. \nIf the monitors are not found on the same game object, the detector will not subscribe to them.\n</p>\n<p>\nThe detector observes the android device monitors. If there are any indications of cheating, the detector will notify its observers (mostly the \nAntiCheat-Monitor) about the detected cheating, so you can react to it. The detector will also notify the event listeners through the \n<xref href=\"GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCheatingDetectionEvent\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AndroidDeviceCheatingDetector : ADetector'
        VB: >-
          Public Class AndroidDeviceCheatingDetector

              Inherits ADetector
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Detector.ADetector
    implements:
    - GUPS.AntiCheat.IDetector
    inheritedMembers:
    - GUPS.AntiCheat.Detector.ADetector.IsActive
    - GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver{IDetectorStatus})
    - GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
    - GUPS.AntiCheat.Detector.ADetector.Dispose
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Name
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: AndroidDeviceCheatingDetector.Name
        VB: AndroidDeviceCheatingDetector.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Name
        VB: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: Name
        path: ''
        startLine: 9010
      summary: "\nThe name of the detector.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Name*
      overridden: GUPS.AntiCheat.Detector.ADetector.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.IsSupported
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.IsSupported
      language: CSharp
      name:
        CSharp: IsSupported
        VB: IsSupported
      nameWithType:
        CSharp: AndroidDeviceCheatingDetector.IsSupported
        VB: AndroidDeviceCheatingDetector.IsSupported
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.IsSupported
        VB: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.IsSupported
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: IsSupported
        path: ''
        startLine: 9023
      summary: "\nIs supported only for Android platforms.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool IsSupported { get; }
          VB: Public Overrides ReadOnly Property IsSupported As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.IsSupported*
      overridden: GUPS.AntiCheat.Detector.ADetector.IsSupported
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibilityOfFalsePositive
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibilityOfFalsePositive
      language: CSharp
      name:
        CSharp: PossibilityOfFalsePositive
        VB: PossibilityOfFalsePositive
      nameWithType:
        CSharp: AndroidDeviceCheatingDetector.PossibilityOfFalsePositive
        VB: AndroidDeviceCheatingDetector.PossibilityOfFalsePositive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibilityOfFalsePositive
        VB: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibilityOfFalsePositive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: PossibilityOfFalsePositive
        path: ''
        startLine: 9034
      summary: "\nThe possibility of a false positive is very low.\n"
      example: []
      syntax:
        content:
          CSharp: public float PossibilityOfFalsePositive { get; }
          VB: Public ReadOnly Property PossibilityOfFalsePositive As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibilityOfFalsePositive*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.ThreatRating
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: AndroidDeviceCheatingDetector.ThreatRating
        VB: AndroidDeviceCheatingDetector.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.ThreatRating
        VB: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: ThreatRating
        path: ''
        startLine: 9047
      summary: "\nThe threat rating of this detector. It is set to a very high value, because false positives are very unlikely and the impact of cheating is very high (Recommended: 500).\n"
      example: []
      syntax:
        content:
          CSharp: public override uint ThreatRating { get; protected set; }
          VB: Public Overrides Property ThreatRating As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.ThreatRating*
      overridden: GUPS.AntiCheat.Detector.ADetector.ThreatRating
      modifiers:
        CSharp:
        - public
        - override
        - get
        - protected set
        VB:
        - Public
        - Overrides
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibleCheatingDetected
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibleCheatingDetected
      language: CSharp
      name:
        CSharp: PossibleCheatingDetected
        VB: PossibleCheatingDetected
      nameWithType:
        CSharp: AndroidDeviceCheatingDetector.PossibleCheatingDetected
        VB: AndroidDeviceCheatingDetector.PossibleCheatingDetected
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibleCheatingDetected
        VB: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibleCheatingDetected
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: PossibleCheatingDetected
        path: ''
        startLine: 9052
      summary: "\nStores whether a cheating got detected.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool PossibleCheatingDetected { get; protected set; }
          VB: Public Overrides Property PossibleCheatingDetected As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibleCheatingDetected*
      overridden: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
      modifiers:
        CSharp:
        - public
        - override
        - get
        - protected set
        VB:
        - Public
        - Overrides
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCheatingDetectionEvent
      commentId: F:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCheatingDetectionEvent
      language: CSharp
      name:
        CSharp: OnCheatingDetectionEvent
        VB: OnCheatingDetectionEvent
      nameWithType:
        CSharp: AndroidDeviceCheatingDetector.OnCheatingDetectionEvent
        VB: AndroidDeviceCheatingDetector.OnCheatingDetectionEvent
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCheatingDetectionEvent
        VB: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCheatingDetectionEvent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: OnCheatingDetectionEvent
        path: ''
        startLine: 9065
      summary: "\nA unity event that is used to subscribe to the cheating detection events. It is useful if you do not want to write custom observers to subscribe to the detectors and \nsimply attach a callback to the detector event through the inspector.\n"
      example: []
      syntax:
        content:
          CSharp: public CheatingDetectionEvent<AndroidCheatingDetectionStatus> OnCheatingDetectionEvent
          VB: Public OnCheatingDetectionEvent As CheatingDetectionEvent(Of AndroidCheatingDetectionStatus)
        return:
          type: GUPS.AntiCheat.Detector.CheatingDetectionEvent{GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnNext(IWatchedSubject)
      commentId: M:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnNext(IWatchedSubject)
      language: CSharp
      name:
        CSharp: OnNext(IWatchedSubject)
        VB: OnNext(IWatchedSubject)
      nameWithType:
        CSharp: AndroidDeviceCheatingDetector.OnNext(IWatchedSubject)
        VB: AndroidDeviceCheatingDetector.OnNext(IWatchedSubject)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnNext(IWatchedSubject)
        VB: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnNext(IWatchedSubject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: OnNext
        path: ''
        startLine: 9076
      summary: "\nThe detector observes android package monitors. If there are any indications of tampering, the detector will notify the observers.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnNext(IWatchedSubject _Subject)
          VB: Public Overrides Sub OnNext(_Subject As IWatchedSubject)
        parameters:
        - id: _Subject
          type: GUPS.AntiCheat.IWatchedSubject
          description: ''
      overload: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnNext*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnError(Exception)
      commentId: M:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: AndroidDeviceCheatingDetector.OnError(Exception)
        VB: AndroidDeviceCheatingDetector.OnError(Exception)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnError(Exception)
        VB: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnError(Exception)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: OnError
        path: ''
        startLine: 9112
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnError(Exception _Error)
          VB: Public Overrides Sub OnError(_Error As Exception)
        parameters:
        - id: _Error
          type: GUPS.AntiCheat.Exception
          description: Error to handle.
      overload: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnError*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCompleted
      commentId: M:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: AndroidDeviceCheatingDetector.OnCompleted()
        VB: AndroidDeviceCheatingDetector.OnCompleted()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCompleted()
        VB: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCompleted()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: OnCompleted
        path: ''
        startLine: 9120
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnCompleted()
          VB: Public Overrides Sub OnCompleted
      overload: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCompleted*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnCompleted
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Awake
      commentId: M:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Awake
      language: CSharp
      name:
        CSharp: Awake()
        VB: Awake()
      nameWithType:
        CSharp: AndroidDeviceCheatingDetector.Awake()
        VB: AndroidDeviceCheatingDetector.Awake()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Awake()
        VB: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Awake()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: Awake
        path: ''
        startLine: 9133
      summary: "\nOn awake register to the android device monitors on the same game object.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Awake()
          VB: Protected Overrides Sub Awake
      overload: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Awake*
      overridden: GUPS.AntiCheat.Detector.ADetector.Awake
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCheatingDetectionEvent: 
  - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector
    commentId: T:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector
    language: CSharp
    name:
      CSharp: AndroidPackageTamperingDetector
      VB: AndroidPackageTamperingDetector
    nameWithType:
      CSharp: AndroidPackageTamperingDetector
      VB: AndroidPackageTamperingDetector
    qualifiedName:
      CSharp: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector
      VB: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Detector.Android
    source:
      id: AndroidPackageTamperingDetector
      path: ''
      startLine: 9275
    summary: "\nThis detector is used to detect if the Android package (APK/AAB) is tampered with. If so it will notify the observers of the detected tampering.\n"
    remarks: "\n<p>\nOn awake the detector will register to the android package monitors on the same game object. These are the <see cref=\"!:AndroidPackageSourceMonitor\"></see>,\n<see cref=\"!:AndroidPackageHashMonitor\"></see>, <see cref=\"!:AndroidPackageFingerprintMonitor\"></see>, <see cref=\"!:AndroidPackageLibraryMonitor\"></see>. If the monitors are \nnot found on the same game object, the detector will not subscribe to them.\n</p>\n<p>\nThe detector observes the android package monitors. If there are any indications of tampering, the detector will notify its observers (mostly the \nAntiCheat-Monitor) about the detected tampering, so you can react to it. The detector will also notify the event listeners through the \n<xref href=\"GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCheatingDetectionEvent\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AndroidPackageTamperingDetector : ADetector'
        VB: >-
          Public Class AndroidPackageTamperingDetector

              Inherits ADetector
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Detector.ADetector
    implements:
    - GUPS.AntiCheat.IDetector
    inheritedMembers:
    - GUPS.AntiCheat.Detector.ADetector.IsActive
    - GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver{IDetectorStatus})
    - GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
    - GUPS.AntiCheat.Detector.ADetector.Dispose
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Name
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: AndroidPackageTamperingDetector.Name
        VB: AndroidPackageTamperingDetector.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Name
        VB: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: Name
        path: ''
        startLine: 9283
      summary: "\nThe name of the detector.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Name*
      overridden: GUPS.AntiCheat.Detector.ADetector.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.IsSupported
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.IsSupported
      language: CSharp
      name:
        CSharp: IsSupported
        VB: IsSupported
      nameWithType:
        CSharp: AndroidPackageTamperingDetector.IsSupported
        VB: AndroidPackageTamperingDetector.IsSupported
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.IsSupported
        VB: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.IsSupported
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: IsSupported
        path: ''
        startLine: 9296
      summary: "\nIs supported only for Android platforms.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool IsSupported { get; }
          VB: Public Overrides ReadOnly Property IsSupported As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.IsSupported*
      overridden: GUPS.AntiCheat.Detector.ADetector.IsSupported
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibilityOfFalsePositive
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibilityOfFalsePositive
      language: CSharp
      name:
        CSharp: PossibilityOfFalsePositive
        VB: PossibilityOfFalsePositive
      nameWithType:
        CSharp: AndroidPackageTamperingDetector.PossibilityOfFalsePositive
        VB: AndroidPackageTamperingDetector.PossibilityOfFalsePositive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibilityOfFalsePositive
        VB: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibilityOfFalsePositive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: PossibilityOfFalsePositive
        path: ''
        startLine: 9307
      summary: "\nThe possibility of a false positive is very low.\n"
      example: []
      syntax:
        content:
          CSharp: public float PossibilityOfFalsePositive { get; }
          VB: Public ReadOnly Property PossibilityOfFalsePositive As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibilityOfFalsePositive*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.ThreatRating
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: AndroidPackageTamperingDetector.ThreatRating
        VB: AndroidPackageTamperingDetector.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.ThreatRating
        VB: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: ThreatRating
        path: ''
        startLine: 9320
      summary: "\nThe threat rating of this detector. It is set to a very high value, because false positives are very unlikely and the impact of cheating is very high (Recommended: 500).\n"
      example: []
      syntax:
        content:
          CSharp: public override uint ThreatRating { get; protected set; }
          VB: Public Overrides Property ThreatRating As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.ThreatRating*
      overridden: GUPS.AntiCheat.Detector.ADetector.ThreatRating
      modifiers:
        CSharp:
        - public
        - override
        - get
        - protected set
        VB:
        - Public
        - Overrides
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibleCheatingDetected
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibleCheatingDetected
      language: CSharp
      name:
        CSharp: PossibleCheatingDetected
        VB: PossibleCheatingDetected
      nameWithType:
        CSharp: AndroidPackageTamperingDetector.PossibleCheatingDetected
        VB: AndroidPackageTamperingDetector.PossibleCheatingDetected
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibleCheatingDetected
        VB: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibleCheatingDetected
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: PossibleCheatingDetected
        path: ''
        startLine: 9325
      summary: "\nStores whether a cheating got detected.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool PossibleCheatingDetected { get; protected set; }
          VB: Public Overrides Property PossibleCheatingDetected As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibleCheatingDetected*
      overridden: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
      modifiers:
        CSharp:
        - public
        - override
        - get
        - protected set
        VB:
        - Public
        - Overrides
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCheatingDetectionEvent
      commentId: F:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCheatingDetectionEvent
      language: CSharp
      name:
        CSharp: OnCheatingDetectionEvent
        VB: OnCheatingDetectionEvent
      nameWithType:
        CSharp: AndroidPackageTamperingDetector.OnCheatingDetectionEvent
        VB: AndroidPackageTamperingDetector.OnCheatingDetectionEvent
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCheatingDetectionEvent
        VB: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCheatingDetectionEvent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: OnCheatingDetectionEvent
        path: ''
        startLine: 9338
      summary: "\nA unity event that is used to subscribe to the cheating detection events. It is useful if you do not want to write custom observers to subscribe to the detectors and \nsimply attach a callback to the detector event through the inspector.\n"
      example: []
      syntax:
        content:
          CSharp: public CheatingDetectionEvent<AndroidCheatingDetectionStatus> OnCheatingDetectionEvent
          VB: Public OnCheatingDetectionEvent As CheatingDetectionEvent(Of AndroidCheatingDetectionStatus)
        return:
          type: GUPS.AntiCheat.Detector.CheatingDetectionEvent{GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnNext(IWatchedSubject)
      commentId: M:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnNext(IWatchedSubject)
      language: CSharp
      name:
        CSharp: OnNext(IWatchedSubject)
        VB: OnNext(IWatchedSubject)
      nameWithType:
        CSharp: AndroidPackageTamperingDetector.OnNext(IWatchedSubject)
        VB: AndroidPackageTamperingDetector.OnNext(IWatchedSubject)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnNext(IWatchedSubject)
        VB: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnNext(IWatchedSubject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: OnNext
        path: ''
        startLine: 9349
      summary: "\nThe detector observes android package monitors. If there are any indications of tampering, the detector will notify the observers.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnNext(IWatchedSubject _Subject)
          VB: Public Overrides Sub OnNext(_Subject As IWatchedSubject)
        parameters:
        - id: _Subject
          type: GUPS.AntiCheat.IWatchedSubject
          description: ''
      overload: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnNext*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnError(Exception)
      commentId: M:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: AndroidPackageTamperingDetector.OnError(Exception)
        VB: AndroidPackageTamperingDetector.OnError(Exception)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnError(Exception)
        VB: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnError(Exception)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: OnError
        path: ''
        startLine: 9400
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnError(Exception _Error)
          VB: Public Overrides Sub OnError(_Error As Exception)
        parameters:
        - id: _Error
          type: GUPS.AntiCheat.Exception
          description: Error to handle.
      overload: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnError*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCompleted
      commentId: M:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: AndroidPackageTamperingDetector.OnCompleted()
        VB: AndroidPackageTamperingDetector.OnCompleted()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCompleted()
        VB: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCompleted()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: OnCompleted
        path: ''
        startLine: 9408
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnCompleted()
          VB: Public Overrides Sub OnCompleted
      overload: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCompleted*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnCompleted
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Awake
      commentId: M:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Awake
      language: CSharp
      name:
        CSharp: Awake()
        VB: Awake()
      nameWithType:
        CSharp: AndroidPackageTamperingDetector.Awake()
        VB: AndroidPackageTamperingDetector.Awake()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Awake()
        VB: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Awake()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: Awake
        path: ''
        startLine: 9421
      summary: "\nOn awake register to the android package monitors on the same game object.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Awake()
          VB: Protected Overrides Sub Awake
      overload: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Awake*
      overridden: GUPS.AntiCheat.Detector.ADetector.Awake
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCheatingDetectionEvent: 
  - id: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
    commentId: T:GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
    language: CSharp
    name:
      CSharp: EAndroidCheatingType
      VB: EAndroidCheatingType
    nameWithType:
      CSharp: EAndroidCheatingType
      VB: EAndroidCheatingType
    qualifiedName:
      CSharp: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
      VB: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Detector.Android
    source:
      id: EAndroidCheatingType
      path: ''
      startLine: 9841
    summary: "\nEnum representing various types of cheating that can occur on an Android device.\n"
    example: []
    syntax:
      content:
        CSharp: 'public enum EAndroidCheatingType : byte'
        VB: Public Enum EAndroidCheatingType As Byte
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.UNKNOWN
      commentId: F:GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.UNKNOWN
      language: CSharp
      name:
        CSharp: UNKNOWN
        VB: UNKNOWN
      nameWithType:
        CSharp: EAndroidCheatingType.UNKNOWN
        VB: EAndroidCheatingType.UNKNOWN
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.UNKNOWN
        VB: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.UNKNOWN
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: UNKNOWN
        path: ''
        startLine: 9846
      summary: "\nA default value representing an unknown cheating type.\n"
      example: []
      syntax:
        content:
          CSharp: UNKNOWN = 0
          VB: UNKNOWN = 0
        return:
          type: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_SOURCE
      commentId: F:GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_SOURCE
      language: CSharp
      name:
        CSharp: PACKAGE_SOURCE
        VB: PACKAGE_SOURCE
      nameWithType:
        CSharp: EAndroidCheatingType.PACKAGE_SOURCE
        VB: EAndroidCheatingType.PACKAGE_SOURCE
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_SOURCE
        VB: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_SOURCE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: PACKAGE_SOURCE
        path: ''
        startLine: 9851
      summary: "\nThe app package installation source is not from the allowed stores.\n"
      example: []
      syntax:
        content:
          CSharp: PACKAGE_SOURCE = 1
          VB: PACKAGE_SOURCE = 1
        return:
          type: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_HASH
      commentId: F:GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_HASH
      language: CSharp
      name:
        CSharp: PACKAGE_HASH
        VB: PACKAGE_HASH
      nameWithType:
        CSharp: EAndroidCheatingType.PACKAGE_HASH
        VB: EAndroidCheatingType.PACKAGE_HASH
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_HASH
        VB: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_HASH
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: PACKAGE_HASH
        path: ''
        startLine: 9856
      summary: "\nThe app package hash is not the expected hash.\n"
      example: []
      syntax:
        content:
          CSharp: PACKAGE_HASH = 2
          VB: PACKAGE_HASH = 2
        return:
          type: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_FINGERPRINT
      commentId: F:GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_FINGERPRINT
      language: CSharp
      name:
        CSharp: PACKAGE_FINGERPRINT
        VB: PACKAGE_FINGERPRINT
      nameWithType:
        CSharp: EAndroidCheatingType.PACKAGE_FINGERPRINT
        VB: EAndroidCheatingType.PACKAGE_FINGERPRINT
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_FINGERPRINT
        VB: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_FINGERPRINT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: PACKAGE_FINGERPRINT
        path: ''
        startLine: 9861
      summary: "\nThe app package certificates fingerprint is not the expected fingerprint.\n"
      example: []
      syntax:
        content:
          CSharp: PACKAGE_FINGERPRINT = 3
          VB: PACKAGE_FINGERPRINT = 3
        return:
          type: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_LIBRARY
      commentId: F:GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_LIBRARY
      language: CSharp
      name:
        CSharp: PACKAGE_LIBRARY
        VB: PACKAGE_LIBRARY
      nameWithType:
        CSharp: EAndroidCheatingType.PACKAGE_LIBRARY
        VB: EAndroidCheatingType.PACKAGE_LIBRARY
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_LIBRARY
        VB: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.PACKAGE_LIBRARY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: PACKAGE_LIBRARY
        path: ''
        startLine: 9866
      summary: "\nThe app package libraries contain a library that is not allowed.\n"
      example: []
      syntax:
        content:
          CSharp: PACKAGE_LIBRARY = 4
          VB: PACKAGE_LIBRARY = 4
        return:
          type: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.DEVICE_INSTALLED_APPS
      commentId: F:GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.DEVICE_INSTALLED_APPS
      language: CSharp
      name:
        CSharp: DEVICE_INSTALLED_APPS
        VB: DEVICE_INSTALLED_APPS
      nameWithType:
        CSharp: EAndroidCheatingType.DEVICE_INSTALLED_APPS
        VB: EAndroidCheatingType.DEVICE_INSTALLED_APPS
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.DEVICE_INSTALLED_APPS
        VB: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.DEVICE_INSTALLED_APPS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: DEVICE_INSTALLED_APPS
        path: ''
        startLine: 9871
      summary: "\nThe device has installed apps that are not allowed.\n"
      example: []
      syntax:
        content:
          CSharp: DEVICE_INSTALLED_APPS = 10
          VB: DEVICE_INSTALLED_APPS = 10
        return:
          type: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
    commentId: T:GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
    language: CSharp
    name:
      CSharp: AndroidCheatingDetectionStatus
      VB: AndroidCheatingDetectionStatus
    nameWithType:
      CSharp: AndroidCheatingDetectionStatus
      VB: AndroidCheatingDetectionStatus
    qualifiedName:
      CSharp: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
      VB: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Detector.Android
    source:
      id: AndroidCheatingDetectionStatus
      path: ''
      startLine: 9881
    summary: "\nRepresents a default implementation of the <xref href=\"GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus\" data-throw-if-not-resolved=\"false\"></xref> interface, providing next to a possibility of false \npositive and threat rating, information about the type of cheating detected on the Android device.\n"
    example: []
    syntax:
      content:
        CSharp: 'public struct AndroidCheatingDetectionStatus : IAndroidCheatingDetectionStatus'
        VB: >-
          Public Structure AndroidCheatingDetectionStatus

              Implements IAndroidCheatingDetectionStatus
    implements:
    - GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus
    - GUPS.AntiCheat.IDetectorStatus
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.PossibilityOfFalsePositive
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.PossibilityOfFalsePositive
      language: CSharp
      name:
        CSharp: PossibilityOfFalsePositive
        VB: PossibilityOfFalsePositive
      nameWithType:
        CSharp: AndroidCheatingDetectionStatus.PossibilityOfFalsePositive
        VB: AndroidCheatingDetectionStatus.PossibilityOfFalsePositive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.PossibilityOfFalsePositive
        VB: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.PossibilityOfFalsePositive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: PossibilityOfFalsePositive
        path: ''
        startLine: 9890
      summary: "\nGets a value indicating the possibility of a false positive when assessing threats for the implementing subject from 0.0 to 1.0.\n"
      remarks: "\nThe value is represented as a positive float value ranging from 0.0 to 1.0, where 0.0 indicates no possibility of a false positive,\nand 1.0 denotes a 100% possibility of a false positive.\n"
      example: []
      syntax:
        content:
          CSharp: public float PossibilityOfFalsePositive { readonly get; }
          VB: Public ReadOnly Property PossibilityOfFalsePositive As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.PossibilityOfFalsePositive*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.ThreatRating
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: AndroidCheatingDetectionStatus.ThreatRating
        VB: AndroidCheatingDetectionStatus.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.ThreatRating
        VB: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: ThreatRating
        path: ''
        startLine: 9898
      summary: "\nGets the threat rating associated with the implementing class, indicating the assessed level of potential threat.\n"
      remarks: "\nThe threat rating is represented as a positive 32-bit integer (UInt32), where higher values denote greater perceived threats.\n"
      example: []
      syntax:
        content:
          CSharp: public uint ThreatRating { readonly get; }
          VB: Public ReadOnly Property ThreatRating As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.ThreatRating*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingType
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingType
      language: CSharp
      name:
        CSharp: AndroidCheatingType
        VB: AndroidCheatingType
      nameWithType:
        CSharp: AndroidCheatingDetectionStatus.AndroidCheatingType
        VB: AndroidCheatingDetectionStatus.AndroidCheatingType
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingType
        VB: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: AndroidCheatingType
        path: ''
        startLine: 9907
      summary: "\nThe type of cheating detected on the Android device.\n"
      remarks: "\nRepresents the type of cheating detected on the Android device, as an instance of the <xref href=\"GUPS.AntiCheat.Detector.Android.EAndroidCheatingType\" data-throw-if-not-resolved=\"false\"></xref> enumeration.\nIf no type of cheating could be classified, the value is set to <xref href=\"GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.UNKNOWN\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public EAndroidCheatingType AndroidCheatingType { readonly get; }
          VB: Public ReadOnly Property AndroidCheatingType As EAndroidCheatingType
        parameters: []
        return:
          type: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
      overload: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingType*
      implements:
      - GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
      references:
        GUPS.AntiCheat.Detector.Android.EAndroidCheatingType: 
        GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.UNKNOWN: 
    - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData
      commentId: P:GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData
      language: CSharp
      name:
        CSharp: MonitorFailedToRetrieveData
        VB: MonitorFailedToRetrieveData
      nameWithType:
        CSharp: AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData
        VB: AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData
        VB: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: MonitorFailedToRetrieveData
        path: ''
        startLine: 9919
      summary: "\nGets if the monitor notifing the detector failed to retrieve its data or an exception occurred while retrieving the data over the native interface.\nSo no valid value was returned and no validation could be performed by the detector.\n"
      remarks: "\nIf the monitor notifing the detector failed to retrieve its data or an exception occurred while retrieving the data over the native interface this \nproperty will be set to false. Meaning no valid value was returned and no validation could be performed by the detector. So it is not certain if this \nwas caused by cheating or not. Mostly the cause is that parts of the native implementation are not available on the current Android device with the \nbuild sdk version (requires at least sdk v19).\n"
      example: []
      syntax:
        content:
          CSharp: public bool MonitorFailedToRetrieveData { readonly get; }
          VB: Public ReadOnly Property MonitorFailedToRetrieveData As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.#ctor(System.Single,System.UInt32,GUPS.AntiCheat.Detector.Android.EAndroidCheatingType,System.Boolean)
      commentId: M:GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.#ctor(System.Single,System.UInt32,GUPS.AntiCheat.Detector.Android.EAndroidCheatingType,System.Boolean)
      language: CSharp
      name:
        CSharp: AndroidCheatingDetectionStatus(Single, UInt32, EAndroidCheatingType, Boolean)
        VB: AndroidCheatingDetectionStatus(Single, UInt32, EAndroidCheatingType, Boolean)
      nameWithType:
        CSharp: AndroidCheatingDetectionStatus.AndroidCheatingDetectionStatus(Single, UInt32, EAndroidCheatingType, Boolean)
        VB: AndroidCheatingDetectionStatus.AndroidCheatingDetectionStatus(Single, UInt32, EAndroidCheatingType, Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingDetectionStatus(System.Single, System.UInt32, GUPS.AntiCheat.Detector.Android.EAndroidCheatingType, System.Boolean)
        VB: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingDetectionStatus(System.Single, System.UInt32, GUPS.AntiCheat.Detector.Android.EAndroidCheatingType, System.Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: .ctor
        path: ''
        startLine: 9928
      summary: "\nCreates a new instance of the <xref href=\"GUPS.AntiCheat.Detector.CheatingDetectionStatus\" data-throw-if-not-resolved=\"false\"></xref> struct with the specified possibility of false positive and threat rating.\n"
      example: []
      syntax:
        content:
          CSharp: public AndroidCheatingDetectionStatus(float _PossibilityOfFalsePositive, uint _ThreatRating, EAndroidCheatingType _AndroidCheatingType, bool _MonitorFailedToRetrieveData)
          VB: Public Sub New(_PossibilityOfFalsePositive As Single, _ThreatRating As UInteger, _AndroidCheatingType As EAndroidCheatingType, _MonitorFailedToRetrieveData As Boolean)
        parameters:
        - id: _PossibilityOfFalsePositive
          type: System.Single
          description: The possibility of a false positive ranging from 0.0 to 1.0.
        - id: _ThreatRating
          type: System.UInt32
          description: The threat rating.
        - id: _AndroidCheatingType
          type: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
          description: The type of cheating detected on the Android device.
        - id: _MonitorFailedToRetrieveData
          type: System.Boolean
          description: The monitor notifing the detector failed to retrieve its data or an exception occurred.
      overload: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Detector.CheatingDetectionStatus: 
    references:
      GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus: 
  - id: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus
    commentId: T:GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus
    language: CSharp
    name:
      CSharp: IAndroidCheatingDetectionStatus
      VB: IAndroidCheatingDetectionStatus
    nameWithType:
      CSharp: IAndroidCheatingDetectionStatus
      VB: IAndroidCheatingDetectionStatus
    qualifiedName:
      CSharp: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus
      VB: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Detector.Android
    source:
      id: IAndroidCheatingDetectionStatus
      path: ''
      startLine: 9947
    summary: "\nRepresents an extension of the <see cref=\"!:IDetectorStatus\"></see> interface, providing next to a possibility of false positive and threat rating,\ninformation about the type of cheating detected on the Android device.\n"
    example: []
    syntax:
      content:
        CSharp: public interface IAndroidCheatingDetectionStatus
        VB: >-
          Public Interface IAndroidCheatingDetectionStatus

              Inherits IDetectorStatus
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
      commentId: P:GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
      language: CSharp
      name:
        CSharp: AndroidCheatingType
        VB: AndroidCheatingType
      nameWithType:
        CSharp: IAndroidCheatingDetectionStatus.AndroidCheatingType
        VB: IAndroidCheatingDetectionStatus.AndroidCheatingType
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
        VB: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Android
      source:
        id: AndroidCheatingType
        path: ''
        startLine: 9952
      summary: "\nThe type of cheating detected on the Android device.\n"
      example: []
      syntax:
        content:
          CSharp: EAndroidCheatingType AndroidCheatingType { get; }
          VB: ReadOnly Property AndroidCheatingType As EAndroidCheatingType
        parameters: []
        return:
          type: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
      overload: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
- id: GUPS.AntiCheat.Detector.Mobile
  commentId: N:GUPS.AntiCheat.Detector.Mobile
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Detector.Mobile
    VB: GUPS.AntiCheat.Detector.Mobile
  nameWithType:
    CSharp: GUPS.AntiCheat.Detector.Mobile
    VB: GUPS.AntiCheat.Detector.Mobile
  qualifiedName:
    CSharp: GUPS.AntiCheat.Detector.Mobile
    VB: GUPS.AntiCheat.Detector.Mobile
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector
    commentId: T:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector
    language: CSharp
    name:
      CSharp: MobileGenuineDetector
      VB: MobileGenuineDetector
    nameWithType:
      CSharp: MobileGenuineDetector
      VB: MobileGenuineDetector
    qualifiedName:
      CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector
      VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Detector.Mobile
    source:
      id: MobileGenuineDetector
      path: ''
      startLine: 9993
    summary: "\nThis detector is used to detect if the build mobile app (Android and iOS) is genuine, i.e. if it is not modified or tampered with.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class MobileGenuineDetector : ADetector'
        VB: >-
          Public Class MobileGenuineDetector

              Inherits ADetector
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Detector.ADetector
    implements:
    - GUPS.AntiCheat.IDetector
    inheritedMembers:
    - GUPS.AntiCheat.Detector.ADetector.IsActive
    - GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver{IDetectorStatus})
    - GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
    - GUPS.AntiCheat.Detector.ADetector.Dispose
    - GUPS.AntiCheat.Detector.ADetector.Awake
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Name
      commentId: P:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: MobileGenuineDetector.Name
        VB: MobileGenuineDetector.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Name
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: Name
        path: ''
        startLine: 10001
      summary: "\nThe name of the detector.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Name*
      overridden: GUPS.AntiCheat.Detector.ADetector.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.IsSupported
      commentId: P:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.IsSupported
      language: CSharp
      name:
        CSharp: IsSupported
        VB: IsSupported
      nameWithType:
        CSharp: MobileGenuineDetector.IsSupported
        VB: MobileGenuineDetector.IsSupported
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.IsSupported
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.IsSupported
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: IsSupported
        path: ''
        startLine: 10014
      summary: "\nIs supported only for Android and iOS platforms.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool IsSupported { get; }
          VB: Public Overrides ReadOnly Property IsSupported As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.IsSupported*
      overridden: GUPS.AntiCheat.Detector.ADetector.IsSupported
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibilityOfFalsePositive
      commentId: P:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibilityOfFalsePositive
      language: CSharp
      name:
        CSharp: PossibilityOfFalsePositive
        VB: PossibilityOfFalsePositive
      nameWithType:
        CSharp: MobileGenuineDetector.PossibilityOfFalsePositive
        VB: MobileGenuineDetector.PossibilityOfFalsePositive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibilityOfFalsePositive
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibilityOfFalsePositive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: PossibilityOfFalsePositive
        path: ''
        startLine: 10025
      summary: "\nThe possibility of a false positive is very low.\n"
      example: []
      syntax:
        content:
          CSharp: public float PossibilityOfFalsePositive { get; }
          VB: Public ReadOnly Property PossibilityOfFalsePositive As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibilityOfFalsePositive*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ThreatRating
      commentId: P:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: MobileGenuineDetector.ThreatRating
        VB: MobileGenuineDetector.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ThreatRating
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: ThreatRating
        path: ''
        startLine: 10038
      summary: "\nThe threat rating of this detector. It is set to a very high value, because false positives are very unlikely and the impact of cheating is very high (Recommended: 500).\n"
      example: []
      syntax:
        content:
          CSharp: public override uint ThreatRating { get; protected set; }
          VB: Public Overrides Property ThreatRating As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ThreatRating*
      overridden: GUPS.AntiCheat.Detector.ADetector.ThreatRating
      modifiers:
        CSharp:
        - public
        - override
        - get
        - protected set
        VB:
        - Public
        - Overrides
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibleCheatingDetected
      commentId: P:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibleCheatingDetected
      language: CSharp
      name:
        CSharp: PossibleCheatingDetected
        VB: PossibleCheatingDetected
      nameWithType:
        CSharp: MobileGenuineDetector.PossibleCheatingDetected
        VB: MobileGenuineDetector.PossibleCheatingDetected
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibleCheatingDetected
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibleCheatingDetected
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: PossibleCheatingDetected
        path: ''
        startLine: 10043
      summary: "\nStores whether a cheating got detected.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool PossibleCheatingDetected { get; protected set; }
          VB: Public Overrides Property PossibleCheatingDetected As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibleCheatingDetected*
      overridden: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
      modifiers:
        CSharp:
        - public
        - override
        - get
        - protected set
        VB:
        - Public
        - Overrides
        - Get
        - Protected Set
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCheatingDetectionEvent
      commentId: F:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCheatingDetectionEvent
      language: CSharp
      name:
        CSharp: OnCheatingDetectionEvent
        VB: OnCheatingDetectionEvent
      nameWithType:
        CSharp: MobileGenuineDetector.OnCheatingDetectionEvent
        VB: MobileGenuineDetector.OnCheatingDetectionEvent
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCheatingDetectionEvent
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCheatingDetectionEvent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: OnCheatingDetectionEvent
        path: ''
        startLine: 10056
      summary: "\nA unity event that is used to subscribe to the cheating detection events. It is useful if you do not want to write custom observers to subscribe to the detectors and \nsimply attach a callback to the detector event through the inspector.\n"
      example: []
      syntax:
        content:
          CSharp: public CheatingDetectionEvent<CheatingDetectionStatus> OnCheatingDetectionEvent
          VB: Public OnCheatingDetectionEvent As CheatingDetectionEvent(Of CheatingDetectionStatus)
        return:
          type: GUPS.AntiCheat.Detector.CheatingDetectionEvent{GUPS.AntiCheat.Detector.CheatingDetectionStatus}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnNext(IWatchedSubject)
      commentId: M:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnNext(IWatchedSubject)
      language: CSharp
      name:
        CSharp: OnNext(IWatchedSubject)
        VB: OnNext(IWatchedSubject)
      nameWithType:
        CSharp: MobileGenuineDetector.OnNext(IWatchedSubject)
        VB: MobileGenuineDetector.OnNext(IWatchedSubject)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnNext(IWatchedSubject)
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnNext(IWatchedSubject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: OnNext
        path: ''
        startLine: 10067
      summary: "\nDoes not observe any subjects.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnNext(IWatchedSubject _Subject)
          VB: Public Overrides Sub OnNext(_Subject As IWatchedSubject)
        parameters:
        - id: _Subject
          type: GUPS.AntiCheat.IWatchedSubject
          description: ''
      overload: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnNext*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnError(Exception)
      commentId: M:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnError(Exception)
      language: CSharp
      name:
        CSharp: OnError(Exception)
        VB: OnError(Exception)
      nameWithType:
        CSharp: MobileGenuineDetector.OnError(Exception)
        VB: MobileGenuineDetector.OnError(Exception)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnError(Exception)
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnError(Exception)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: OnError
        path: ''
        startLine: 10076
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnError(Exception _Error)
          VB: Public Overrides Sub OnError(_Error As Exception)
        parameters:
        - id: _Error
          type: GUPS.AntiCheat.Exception
          description: Error to handle.
      overload: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnError*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCompleted
      commentId: M:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCompleted
      language: CSharp
      name:
        CSharp: OnCompleted()
        VB: OnCompleted()
      nameWithType:
        CSharp: MobileGenuineDetector.OnCompleted()
        VB: MobileGenuineDetector.OnCompleted()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCompleted()
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCompleted()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: OnCompleted
        path: ''
        startLine: 10084
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnCompleted()
          VB: Public Overrides Sub OnCompleted
      overload: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCompleted*
      overridden: GUPS.AntiCheat.Detector.ADetector.OnCompleted
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.CheckGenuineOnlyOnGameStart
      commentId: F:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.CheckGenuineOnlyOnGameStart
      language: CSharp
      name:
        CSharp: CheckGenuineOnlyOnGameStart
        VB: CheckGenuineOnlyOnGameStart
      nameWithType:
        CSharp: MobileGenuineDetector.CheckGenuineOnlyOnGameStart
        VB: MobileGenuineDetector.CheckGenuineOnlyOnGameStart
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.CheckGenuineOnlyOnGameStart
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.CheckGenuineOnlyOnGameStart
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: CheckGenuineOnlyOnGameStart
        path: ''
        startLine: 10099
      summary: "\nEnable to check if the application is genuine only on detector start. The genuine check can be resource intensive. Disable to check in a define interval.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckGenuineOnlyOnGameStart
          VB: Public CheckGenuineOnlyOnGameStart As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.RecheckIntervalForPossibleCheating
      commentId: F:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.RecheckIntervalForPossibleCheating
      language: CSharp
      name:
        CSharp: RecheckIntervalForPossibleCheating
        VB: RecheckIntervalForPossibleCheating
      nameWithType:
        CSharp: MobileGenuineDetector.RecheckIntervalForPossibleCheating
        VB: MobileGenuineDetector.RecheckIntervalForPossibleCheating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.RecheckIntervalForPossibleCheating
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.RecheckIntervalForPossibleCheating
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: RecheckIntervalForPossibleCheating
        path: ''
        startLine: 10106
      summary: "\nInterval in seconds in which to check the genuine of the application.\n"
      example: []
      syntax:
        content:
          CSharp: public float RecheckIntervalForPossibleCheating
          VB: Public RecheckIntervalForPossibleCheating As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ManualGenuineCheck
      commentId: M:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ManualGenuineCheck
      language: CSharp
      name:
        CSharp: ManualGenuineCheck()
        VB: ManualGenuineCheck()
      nameWithType:
        CSharp: MobileGenuineDetector.ManualGenuineCheck()
        VB: MobileGenuineDetector.ManualGenuineCheck()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ManualGenuineCheck()
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ManualGenuineCheck()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: ManualGenuineCheck
        path: ''
        startLine: 10144
      summary: "\nManually check for genuine and return if tampering was detected.\n"
      example: []
      syntax:
        content:
          CSharp: public bool ManualGenuineCheck()
          VB: Public Function ManualGenuineCheck As Boolean
        return:
          type: System.Boolean
          description: ''
      overload: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ManualGenuineCheck*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Start
      commentId: M:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Start
      language: CSharp
      name:
        CSharp: Start()
        VB: Start()
      nameWithType:
        CSharp: MobileGenuineDetector.Start()
        VB: MobileGenuineDetector.Start()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Start()
        VB: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Start()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Detector.Mobile
      source:
        id: Start
        path: ''
        startLine: 10174
      summary: "\nCheck the genuine of the application on start or check in a defined interval.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void Start()
          VB: Protected Overridable Sub Start
      overload: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Start*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
- id: GUPS.AntiCheat.Monitor
  commentId: N:GUPS.AntiCheat.Monitor
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Monitor
    VB: GUPS.AntiCheat.Monitor
  nameWithType:
    CSharp: GUPS.AntiCheat.Monitor
    VB: GUPS.AntiCheat.Monitor
  qualifiedName:
    CSharp: GUPS.AntiCheat.Monitor
    VB: GUPS.AntiCheat.Monitor
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Monitor.AMonitor
    commentId: T:GUPS.AntiCheat.Monitor.AMonitor
    language: CSharp
    name:
      CSharp: AMonitor
      VB: AMonitor
    nameWithType:
      CSharp: AMonitor
      VB: AMonitor
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.AMonitor
      VB: GUPS.AntiCheat.Monitor.AMonitor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor
    source:
      id: AMonitor
      path: ''
      startLine: 11121
    summary: "\nAn abstract base class that defines the common functionality for monitors in a Unity environment. \nImplements the <see cref=\"!:IMonitor\"></see> and <see cref=\"!:IWatchAble&lt;IWatchedSubject>\"></see> interfaces.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Monitor.AMonitor\" data-throw-if-not-resolved=\"false\"></xref> class serves as an abstract base for implementing monitors in Unity applications. \nIt provides methods to control the lifecycle of a monitoring process and supports the observer pattern \nthrough the <see cref=\"!:IWatchAble&lt;IWatchedSubject>\"></see> interface. Monitors can be started, paused, resumed, and stopped, \nand they notify subscribed observers of relevant events during their lifecycle.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class AMonitor : MonoBehaviour'
        VB: >-
          Public MustInherit Class AMonitor

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.IMonitor
    - GUPS.AntiCheat.IWatchAble{IWatchedSubject}
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: GUPS.AntiCheat.Monitor.AMonitor.Name
      commentId: P:GUPS.AntiCheat.Monitor.AMonitor.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: AMonitor.Name
        VB: AMonitor.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.Name
        VB: GUPS.AntiCheat.Monitor.AMonitor.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: Name
        path: ''
        startLine: 11129
      summary: "\nThe name of the monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract String Name { get; }
          VB: Public MustOverride ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.AMonitor.Name*
      modifiers:
        CSharp:
        - public
        - abstract
        - get
        VB:
        - Public
        - MustOverride
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.AMonitor.IsActive
      commentId: P:GUPS.AntiCheat.Monitor.AMonitor.IsActive
      language: CSharp
      name:
        CSharp: IsActive
        VB: IsActive
      nameWithType:
        CSharp: AMonitor.IsActive
        VB: AMonitor.IsActive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.IsActive
        VB: GUPS.AntiCheat.Monitor.AMonitor.IsActive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: IsActive
        path: ''
        startLine: 11147
      summary: "\nA value indicating whether the monitor is active and should be running.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsActive { get; }
          VB: Public ReadOnly Property IsActive As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Monitor.AMonitor.IsActive*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.AMonitor.IsStarted
      commentId: P:GUPS.AntiCheat.Monitor.AMonitor.IsStarted
      language: CSharp
      name:
        CSharp: IsStarted
        VB: IsStarted
      nameWithType:
        CSharp: AMonitor.IsStarted
        VB: AMonitor.IsStarted
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.IsStarted
        VB: GUPS.AntiCheat.Monitor.AMonitor.IsStarted
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: IsStarted
        path: ''
        startLine: 11152
      summary: "\nGets a value indicating whether the monitor has been started and is currently running.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsStarted { get; }
          VB: Public ReadOnly Property IsStarted As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Monitor.AMonitor.IsStarted*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.AMonitor.IsPaused
      commentId: P:GUPS.AntiCheat.Monitor.AMonitor.IsPaused
      language: CSharp
      name:
        CSharp: IsPaused
        VB: IsPaused
      nameWithType:
        CSharp: AMonitor.IsPaused
        VB: AMonitor.IsPaused
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.IsPaused
        VB: GUPS.AntiCheat.Monitor.AMonitor.IsPaused
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: IsPaused
        path: ''
        startLine: 11157
      summary: "\nGets a value indicating whether the monitor has been paused and is currently suspended.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsPaused { get; }
          VB: Public ReadOnly Property IsPaused As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Monitor.AMonitor.IsPaused*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.AMonitor.Start
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Start
      language: CSharp
      name:
        CSharp: Start()
        VB: Start()
      nameWithType:
        CSharp: AMonitor.Start()
        VB: AMonitor.Start()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.Start()
        VB: GUPS.AntiCheat.Monitor.AMonitor.Start()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: Start
        path: ''
        startLine: 11162
      summary: "\nInitiates the monitoring process, enabling the monitor to start collecting and processing data.\n"
      example: []
      syntax:
        content:
          CSharp: public void Start()
          VB: Public Sub Start
      overload: GUPS.AntiCheat.Monitor.AMonitor.Start*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Monitor.AMonitor.OnStart
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.OnStart
      language: CSharp
      name:
        CSharp: OnStart()
        VB: OnStart()
      nameWithType:
        CSharp: AMonitor.OnStart()
        VB: AMonitor.OnStart()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.OnStart()
        VB: GUPS.AntiCheat.Monitor.AMonitor.OnStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: OnStart
        path: ''
        startLine: 11180
      summary: "\nExecuted when the monitor is started. Override this method to provide custom start behavior.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnStart()
          VB: Protected Overridable Sub OnStart
      overload: GUPS.AntiCheat.Monitor.AMonitor.OnStart*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: GUPS.AntiCheat.Monitor.AMonitor.Pause
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Pause
      language: CSharp
      name:
        CSharp: Pause()
        VB: Pause()
      nameWithType:
        CSharp: AMonitor.Pause()
        VB: AMonitor.Pause()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.Pause()
        VB: GUPS.AntiCheat.Monitor.AMonitor.Pause()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: Pause
        path: ''
        startLine: 11188
      summary: "\nPauses the monitoring process, temporarily suspending data collection and processing without terminating the monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public void Pause()
          VB: Public Sub Pause
      overload: GUPS.AntiCheat.Monitor.AMonitor.Pause*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Monitor.AMonitor.OnPause
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.OnPause
      language: CSharp
      name:
        CSharp: OnPause()
        VB: OnPause()
      nameWithType:
        CSharp: AMonitor.OnPause()
        VB: AMonitor.OnPause()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.OnPause()
        VB: GUPS.AntiCheat.Monitor.AMonitor.OnPause()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: OnPause
        path: ''
        startLine: 11212
      summary: "\nExecuted when the monitor is paused. Override this method to provide custom pause behavior.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnPause()
          VB: Protected Overridable Sub OnPause
      overload: GUPS.AntiCheat.Monitor.AMonitor.OnPause*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: GUPS.AntiCheat.Monitor.AMonitor.Resume
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Resume
      language: CSharp
      name:
        CSharp: Resume()
        VB: Resume()
      nameWithType:
        CSharp: AMonitor.Resume()
        VB: AMonitor.Resume()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.Resume()
        VB: GUPS.AntiCheat.Monitor.AMonitor.Resume()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: Resume
        path: ''
        startLine: 11220
      summary: "\nResumes the monitoring process after a pause, allowing the monitor to continue collecting and processing data.\n"
      example: []
      syntax:
        content:
          CSharp: public void Resume()
          VB: Public Sub Resume
      overload: GUPS.AntiCheat.Monitor.AMonitor.Resume*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Monitor.AMonitor.OnResume
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.OnResume
      language: CSharp
      name:
        CSharp: OnResume()
        VB: OnResume()
      nameWithType:
        CSharp: AMonitor.OnResume()
        VB: AMonitor.OnResume()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.OnResume()
        VB: GUPS.AntiCheat.Monitor.AMonitor.OnResume()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: OnResume
        path: ''
        startLine: 11244
      summary: "\nExecuted when the monitor is resumed after a pause. Override this method to provide custom resume behavior.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnResume()
          VB: Protected Overridable Sub OnResume
      overload: GUPS.AntiCheat.Monitor.AMonitor.OnResume*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: GUPS.AntiCheat.Monitor.AMonitor.Stop
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Stop
      language: CSharp
      name:
        CSharp: Stop()
        VB: Stop()
      nameWithType:
        CSharp: AMonitor.Stop()
        VB: AMonitor.Stop()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.Stop()
        VB: GUPS.AntiCheat.Monitor.AMonitor.Stop()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: Stop
        path: ''
        startLine: 11252
      summary: "\nStops and terminates the monitoring process, concluding data collection and finalizing any necessary cleanup operations.\n"
      example: []
      syntax:
        content:
          CSharp: public void Stop()
          VB: Public Sub Stop
      overload: GUPS.AntiCheat.Monitor.AMonitor.Stop*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Monitor.AMonitor.OnStop
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.OnStop
      language: CSharp
      name:
        CSharp: OnStop()
        VB: OnStop()
      nameWithType:
        CSharp: AMonitor.OnStop()
        VB: AMonitor.OnStop()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.OnStop()
        VB: GUPS.AntiCheat.Monitor.AMonitor.OnStop()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: OnStop
        path: ''
        startLine: 11270
      summary: "\nExecuted when the monitor is stopped. Override this method to provide custom stop behavior.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnStop()
          VB: Protected Overridable Sub OnStop
      overload: GUPS.AntiCheat.Monitor.AMonitor.OnStop*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: AMonitor.OnUpdate()
        VB: AMonitor.OnUpdate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate()
        VB: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: OnUpdate
        path: ''
        startLine: 11300
      summary: "\nExecuted on each Unity update cycle when the monitor is started and not paused.\nOverride this method to implement custom update behavior.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnUpdate()
          VB: Protected Overridable Sub OnUpdate
      overload: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
      language: CSharp
      name:
        CSharp: OnDestroy()
        VB: OnDestroy()
      nameWithType:
        CSharp: AMonitor.OnDestroy()
        VB: AMonitor.OnDestroy()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.OnDestroy()
        VB: GUPS.AntiCheat.Monitor.AMonitor.OnDestroy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: OnDestroy
        path: ''
        startLine: 11308
      summary: "\nWhen the monitor is destroyed, stop the monitor.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnDestroy()
          VB: Protected Overridable Sub OnDestroy
      overload: GUPS.AntiCheat.Monitor.AMonitor.OnDestroy*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: GUPS.AntiCheat.Monitor.AMonitor.Dispose
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: AMonitor.Dispose()
        VB: AMonitor.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.Dispose()
        VB: GUPS.AntiCheat.Monitor.AMonitor.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: Dispose
        path: ''
        startLine: 11317
      summary: "\nNotifies the observers that the monitor has completed.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Monitor.AMonitor.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject})
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject})
      language: CSharp
      name:
        CSharp: Subscribe(IObserver<IWatchedSubject>)
        VB: Subscribe(IObserver(Of IWatchedSubject))
      nameWithType:
        CSharp: AMonitor.Subscribe(IObserver<IWatchedSubject>)
        VB: AMonitor.Subscribe(IObserver(Of IWatchedSubject))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver<IWatchedSubject>)
        VB: GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver(Of IWatchedSubject))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: Subscribe
        path: ''
        startLine: 11347
      summary: "\nSubscribes an observer to receive notifications of the monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public IDisposable Subscribe(IObserver<IWatchedSubject> _Observer)
          VB: Public Function Subscribe(_Observer As IObserver(Of IWatchedSubject)) As IDisposable
        parameters:
        - id: _Observer
          type: GUPS.AntiCheat.IObserver{IWatchedSubject}
          description: The observer to subscribe.
        return:
          type: GUPS.AntiCheat.IDisposable
          description: An <see cref="!:IDisposable"></see> object that can be used to unsubscribe the observer.
      overload: GUPS.AntiCheat.Monitor.AMonitor.Subscribe*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
      commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
      language: CSharp
      name:
        CSharp: Notify(IWatchedSubject)
        VB: Notify(IWatchedSubject)
      nameWithType:
        CSharp: AMonitor.Notify(IWatchedSubject)
        VB: AMonitor.Notify(IWatchedSubject)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
        VB: GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor
      source:
        id: Notify
        path: ''
        startLine: 11361
      summary: "\nNotifies all subscribed observers with the provided watched monitor subject.\n"
      example: []
      syntax:
        content:
          CSharp: public void Notify(IWatchedSubject _Subject)
          VB: Public Sub Notify(_Subject As IWatchedSubject)
        parameters:
        - id: _Subject
          type: GUPS.AntiCheat.IWatchedSubject
          description: The watched subject to notify observers about.
      overload: GUPS.AntiCheat.Monitor.AMonitor.Notify*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      GUPS.AntiCheat.Monitor.AMonitor: 
- id: GUPS.AntiCheat.Monitor.Android
  commentId: N:GUPS.AntiCheat.Monitor.Android
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Monitor.Android
    VB: GUPS.AntiCheat.Monitor.Android
  nameWithType:
    CSharp: GUPS.AntiCheat.Monitor.Android
    VB: GUPS.AntiCheat.Monitor.Android
  qualifiedName:
    CSharp: GUPS.AntiCheat.Monitor.Android
    VB: GUPS.AntiCheat.Monitor.Android
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor
    language: CSharp
    name:
      CSharp: AndroidInstalledApplicationMonitor
      VB: AndroidInstalledApplicationMonitor
    nameWithType:
      CSharp: AndroidInstalledApplicationMonitor
      VB: AndroidInstalledApplicationMonitor
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor
      VB: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: AndroidInstalledApplicationMonitor
      path: ''
      startLine: 11442
    summary: "\nRepresents a monitor designed for Android devices to read and provide information about installed applications on the \ndevice (ignoring system apps). This monitor notifies observers about the installed applications by passing a list of \npackage names.\n"
    remarks: "\n<p>\nThis class extends the functionality of the abstract base class <xref href=\"GUPS.AntiCheat.Monitor.AMonitor\" data-throw-if-not-resolved=\"false\"></xref>, which defines common functionality for \na monitor in a Unity environment.\n</p>\n<p>\nThe monitor controls its lifecycle, including starting, pausing, resuming, and stopping, through methods provided by the \n<xref href=\"GUPS.AntiCheat.Monitor.AMonitor\" data-throw-if-not-resolved=\"false\"></xref> class. It also supports the observer pattern, allowing observers to subscribe and receive notifications \nabout relevant events during the monitor&apos;s lifecycle.\n</p>\n<p>\nThe monitor retrieves the list of installed applications when it starts and notifies observers with the status of the installed \napplications. If any errors occur during the process of retrieving the installed applications a warning message will be logged.\nAlso an empty list, with the notification that something failed, is passed to the observers.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AndroidInstalledApplicationMonitor : AMonitor'
        VB: >-
          Public Class AndroidInstalledApplicationMonitor

              Inherits AMonitor
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Monitor.AMonitor
    implements:
    - GUPS.AntiCheat.IMonitor
    - GUPS.AntiCheat.IWatchAble{IWatchedSubject}
    inheritedMembers:
    - GUPS.AntiCheat.Monitor.AMonitor.IsActive
    - GUPS.AntiCheat.Monitor.AMonitor.IsStarted
    - GUPS.AntiCheat.Monitor.AMonitor.IsPaused
    - GUPS.AntiCheat.Monitor.AMonitor.Start
    - GUPS.AntiCheat.Monitor.AMonitor.Pause
    - GUPS.AntiCheat.Monitor.AMonitor.OnPause
    - GUPS.AntiCheat.Monitor.AMonitor.Resume
    - GUPS.AntiCheat.Monitor.AMonitor.OnResume
    - GUPS.AntiCheat.Monitor.AMonitor.Stop
    - GUPS.AntiCheat.Monitor.AMonitor.OnStop
    - GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
    - GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
    - GUPS.AntiCheat.Monitor.AMonitor.Dispose
    - GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject})
    - GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.Name
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: AndroidInstalledApplicationMonitor.Name
        VB: AndroidInstalledApplicationMonitor.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.Name
        VB: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Name
        path: ''
        startLine: 11450
      summary: "\nThe name of the Monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.Name*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.OnStart
      commentId: M:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.OnStart
      language: CSharp
      name:
        CSharp: OnStart()
        VB: OnStart()
      nameWithType:
        CSharp: AndroidInstalledApplicationMonitor.OnStart()
        VB: AndroidInstalledApplicationMonitor.OnStart()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.OnStart()
        VB: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.OnStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: OnStart
        path: ''
        startLine: 11460
      summary: "\nOn start read the installed applications and notify the observer.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnStart()
          VB: Protected Overrides Sub OnStart
      overload: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.OnStart*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.OnStart
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      GUPS.AntiCheat.Monitor.AMonitor: 
  - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor
    language: CSharp
    name:
      CSharp: AndroidPackageFingerprintMonitor
      VB: AndroidPackageFingerprintMonitor
    nameWithType:
      CSharp: AndroidPackageFingerprintMonitor
      VB: AndroidPackageFingerprintMonitor
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor
      VB: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: AndroidPackageFingerprintMonitor
      path: ''
      startLine: 11574
    summary: "\nRepresents a monitor designed for Android devices to calculate their fingerprints or signatures (of APK/AAB files) \nand notifies observers about the calculated fingerprint. This fingerprint can be used to detect if the application was build\nand signed by the original developer or someone else.\n"
    remarks: "\n<p>\nThis class extends the functionality of the abstract base class <xref href=\"GUPS.AntiCheat.Monitor.AMonitor\" data-throw-if-not-resolved=\"false\"></xref>, which defines common functionality for \na monitor in a Unity environment.\n</p>\n<p>\nThe monitor controls its lifecycle, including starting, pausing, resuming, and stopping, through methods provided by the \n<xref href=\"GUPS.AntiCheat.Monitor.AMonitor\" data-throw-if-not-resolved=\"false\"></xref> class. It also supports the observer pattern, allowing observers to subscribe and receive notifications \nabout relevant events during the monitor&apos;s lifecycle.\n</p>\n<p>\nThe monitor retrieves the algorithm to use for fingerprint calculation from the global settings. If the algorithm is not specified, \nit defaults to &quot;SHA-256&quot;. It then attempts to calculate the fingerprint using the provided algorithm and notifies observers with \nthe calculated fingerprint or null in case of failure and logs a warning message.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AndroidPackageFingerprintMonitor : AMonitor'
        VB: >-
          Public Class AndroidPackageFingerprintMonitor

              Inherits AMonitor
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Monitor.AMonitor
    implements:
    - GUPS.AntiCheat.IMonitor
    - GUPS.AntiCheat.IWatchAble{IWatchedSubject}
    inheritedMembers:
    - GUPS.AntiCheat.Monitor.AMonitor.IsActive
    - GUPS.AntiCheat.Monitor.AMonitor.IsStarted
    - GUPS.AntiCheat.Monitor.AMonitor.IsPaused
    - GUPS.AntiCheat.Monitor.AMonitor.Start
    - GUPS.AntiCheat.Monitor.AMonitor.Pause
    - GUPS.AntiCheat.Monitor.AMonitor.OnPause
    - GUPS.AntiCheat.Monitor.AMonitor.Resume
    - GUPS.AntiCheat.Monitor.AMonitor.OnResume
    - GUPS.AntiCheat.Monitor.AMonitor.Stop
    - GUPS.AntiCheat.Monitor.AMonitor.OnStop
    - GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
    - GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
    - GUPS.AntiCheat.Monitor.AMonitor.Dispose
    - GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject})
    - GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.Name
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: AndroidPackageFingerprintMonitor.Name
        VB: AndroidPackageFingerprintMonitor.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.Name
        VB: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Name
        path: ''
        startLine: 11582
      summary: "\nThe name of the Monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.Name*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.OnStart
      commentId: M:GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.OnStart
      language: CSharp
      name:
        CSharp: OnStart()
        VB: OnStart()
      nameWithType:
        CSharp: AndroidPackageFingerprintMonitor.OnStart()
        VB: AndroidPackageFingerprintMonitor.OnStart()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.OnStart()
        VB: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.OnStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: OnStart
        path: ''
        startLine: 11592
      summary: "\nOn start read the fingerprint / signature and notify the observer.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnStart()
          VB: Protected Overrides Sub OnStart
      overload: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.OnStart*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.OnStart
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      GUPS.AntiCheat.Monitor.AMonitor: 
  - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor
    language: CSharp
    name:
      CSharp: AndroidPackageHashMonitor
      VB: AndroidPackageHashMonitor
    nameWithType:
      CSharp: AndroidPackageHashMonitor
      VB: AndroidPackageHashMonitor
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor
      VB: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: AndroidPackageHashMonitor
      path: ''
      startLine: 11709
    summary: "\nRepresents a monitor designed for Android devices to calculate the hash of the entire app (APK/AAB) itself and notifies observers about \nthe calculated hash. This hash can be compared with a remote source to detect if the app is in it original state or was modified or \ntampered with.\n"
    remarks: "\n<p>\nThis class extends the functionality of the abstract base class <xref href=\"GUPS.AntiCheat.Monitor.AMonitor\" data-throw-if-not-resolved=\"false\"></xref>, which defines common functionality for \na monitor in a Unity environment.\n</p>\n<p>\nThe monitor controls its lifecycle, including starting, pausing, resuming, and stopping, through methods provided by the \n<xref href=\"GUPS.AntiCheat.Monitor.AMonitor\" data-throw-if-not-resolved=\"false\"></xref> class. It also supports the observer pattern, allowing observers to subscribe and receive notifications \nabout relevant events during the monitor&apos;s lifecycle.\n</p>\n<p>\nThe monitor retrieves the algorithm to use for hash calculation from the global settings. If the algorithm is not specified, it defaults \nto &quot;SHA-256&quot;. It then attempts to calculate the hash using the provided algorithm and notifies observers with the calculated hash or \nnull in case of failure and logs a warning message.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AndroidPackageHashMonitor : AMonitor'
        VB: >-
          Public Class AndroidPackageHashMonitor

              Inherits AMonitor
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Monitor.AMonitor
    implements:
    - GUPS.AntiCheat.IMonitor
    - GUPS.AntiCheat.IWatchAble{IWatchedSubject}
    inheritedMembers:
    - GUPS.AntiCheat.Monitor.AMonitor.IsActive
    - GUPS.AntiCheat.Monitor.AMonitor.IsStarted
    - GUPS.AntiCheat.Monitor.AMonitor.IsPaused
    - GUPS.AntiCheat.Monitor.AMonitor.Start
    - GUPS.AntiCheat.Monitor.AMonitor.Pause
    - GUPS.AntiCheat.Monitor.AMonitor.OnPause
    - GUPS.AntiCheat.Monitor.AMonitor.Resume
    - GUPS.AntiCheat.Monitor.AMonitor.OnResume
    - GUPS.AntiCheat.Monitor.AMonitor.Stop
    - GUPS.AntiCheat.Monitor.AMonitor.OnStop
    - GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
    - GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
    - GUPS.AntiCheat.Monitor.AMonitor.Dispose
    - GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject})
    - GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.Name
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: AndroidPackageHashMonitor.Name
        VB: AndroidPackageHashMonitor.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.Name
        VB: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Name
        path: ''
        startLine: 11717
      summary: "\nThe name of the Monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.Name*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.OnStart
      commentId: M:GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.OnStart
      language: CSharp
      name:
        CSharp: OnStart()
        VB: OnStart()
      nameWithType:
        CSharp: AndroidPackageHashMonitor.OnStart()
        VB: AndroidPackageHashMonitor.OnStart()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.OnStart()
        VB: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.OnStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: OnStart
        path: ''
        startLine: 11727
      summary: "\nOn start calculate the hash of the whole app (apk / aab) and notify the observer.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnStart()
          VB: Protected Overrides Sub OnStart
      overload: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.OnStart*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.OnStart
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      GUPS.AntiCheat.Monitor.AMonitor: 
  - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor
    language: CSharp
    name:
      CSharp: AndroidPackageLibraryMonitor
      VB: AndroidPackageLibraryMonitor
    nameWithType:
      CSharp: AndroidPackageLibraryMonitor
      VB: AndroidPackageLibraryMonitor
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor
      VB: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: AndroidPackageLibraryMonitor
      path: ''
      startLine: 11838
    summary: "\nRepresents a monitor designed for Android devices to read the libraries contained within the app (APK/AAB) itself, such as \nthose found in &apos;[APK]\\lib\\armeabi-v7a\\&apos;, and notifies observers about the libraries present in the application. Typically,\na cheater or hacker may add additional libraries to the app to manipulate the game and gain an unfair advantage.\n"
    remarks: "\n<p>\nThis class extends the functionality of the abstract base class <xref href=\"GUPS.AntiCheat.Monitor.AMonitor\" data-throw-if-not-resolved=\"false\"></xref>, which defines common functionality for \na monitor in a Unity environment.\n</p>\n<p>\nThe monitor controls its lifecycle, including starting, pausing, resuming, and stopping, through methods provided by the \n<xref href=\"GUPS.AntiCheat.Monitor.AMonitor\" data-throw-if-not-resolved=\"false\"></xref> class. It also supports the observer pattern, allowing observers to subscribe and receive notifications \nabout relevant events during the monitor&apos;s lifecycle.\n</p>\n<p>\nThe monitor attempts to read the libraries stored in the application when it starts. If successful, it notifies observers with the \nlist of libraries. If unsuccessful, it notifies observers with an empty list and logs a warning message.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AndroidPackageLibraryMonitor : AMonitor'
        VB: >-
          Public Class AndroidPackageLibraryMonitor

              Inherits AMonitor
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Monitor.AMonitor
    implements:
    - GUPS.AntiCheat.IMonitor
    - GUPS.AntiCheat.IWatchAble{IWatchedSubject}
    inheritedMembers:
    - GUPS.AntiCheat.Monitor.AMonitor.IsActive
    - GUPS.AntiCheat.Monitor.AMonitor.IsStarted
    - GUPS.AntiCheat.Monitor.AMonitor.IsPaused
    - GUPS.AntiCheat.Monitor.AMonitor.Start
    - GUPS.AntiCheat.Monitor.AMonitor.Pause
    - GUPS.AntiCheat.Monitor.AMonitor.OnPause
    - GUPS.AntiCheat.Monitor.AMonitor.Resume
    - GUPS.AntiCheat.Monitor.AMonitor.OnResume
    - GUPS.AntiCheat.Monitor.AMonitor.Stop
    - GUPS.AntiCheat.Monitor.AMonitor.OnStop
    - GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
    - GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
    - GUPS.AntiCheat.Monitor.AMonitor.Dispose
    - GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject})
    - GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.Name
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: AndroidPackageLibraryMonitor.Name
        VB: AndroidPackageLibraryMonitor.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.Name
        VB: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Name
        path: ''
        startLine: 11846
      summary: "\nThe name of the Monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.Name*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.OnStart
      commentId: M:GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.OnStart
      language: CSharp
      name:
        CSharp: OnStart()
        VB: OnStart()
      nameWithType:
        CSharp: AndroidPackageLibraryMonitor.OnStart()
        VB: AndroidPackageLibraryMonitor.OnStart()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.OnStart()
        VB: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.OnStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: OnStart
        path: ''
        startLine: 11856
      summary: "\nOn start read the libraries stores in the app (apk / aab) and notify the observer.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnStart()
          VB: Protected Overrides Sub OnStart
      overload: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.OnStart*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.OnStart
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      GUPS.AntiCheat.Monitor.AMonitor: 
  - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor
    language: CSharp
    name:
      CSharp: AndroidPackageSourceMonitor
      VB: AndroidPackageSourceMonitor
    nameWithType:
      CSharp: AndroidPackageSourceMonitor
      VB: AndroidPackageSourceMonitor
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor
      VB: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: AndroidPackageSourceMonitor
      path: ''
      startLine: 11953
    summary: "\nRepresents a monitor designed for Android devices to determine the installation source (app store) of the app (APK/AAB) and notifies \nobservers about the app store from which the app was installed. If the installation source cannot be determined or is unknown, \n<xref href=\"GUPS.AntiCheat.Monitor.Android.EAppStore.Unknown\" data-throw-if-not-resolved=\"false\"></xref> is passed to the observers along with a notification of failure.\n"
    remarks: "\n<p>\nThis class extends the functionality of the abstract base class <xref href=\"GUPS.AntiCheat.Monitor.AMonitor\" data-throw-if-not-resolved=\"false\"></xref>, which defines common functionality for \na monitor in a Unity environment.\n</p>\n<p>\nThe monitor controls its lifecycle, including starting, pausing, resuming, and stopping, through methods provided by the \n<xref href=\"GUPS.AntiCheat.Monitor.AMonitor\" data-throw-if-not-resolved=\"false\"></xref> class. It also supports the observer pattern, allowing observers to subscribe and receive notifications \nabout relevant events during the monitor&apos;s lifecycle.\n</p>\n<p>\nThe monitor attempts to determine the installation source of the application when it starts. If successful, it notifies observers \nwith the identified app store. If unsuccessful, it notifies observers with <xref href=\"GUPS.AntiCheat.Monitor.Android.EAppStore.Unknown\" data-throw-if-not-resolved=\"false\"></xref> and logs a warning message.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AndroidPackageSourceMonitor : AMonitor'
        VB: >-
          Public Class AndroidPackageSourceMonitor

              Inherits AMonitor
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Monitor.AMonitor
    implements:
    - GUPS.AntiCheat.IMonitor
    - GUPS.AntiCheat.IWatchAble{IWatchedSubject}
    inheritedMembers:
    - GUPS.AntiCheat.Monitor.AMonitor.IsActive
    - GUPS.AntiCheat.Monitor.AMonitor.IsStarted
    - GUPS.AntiCheat.Monitor.AMonitor.IsPaused
    - GUPS.AntiCheat.Monitor.AMonitor.Start
    - GUPS.AntiCheat.Monitor.AMonitor.Pause
    - GUPS.AntiCheat.Monitor.AMonitor.OnPause
    - GUPS.AntiCheat.Monitor.AMonitor.Resume
    - GUPS.AntiCheat.Monitor.AMonitor.OnResume
    - GUPS.AntiCheat.Monitor.AMonitor.Stop
    - GUPS.AntiCheat.Monitor.AMonitor.OnStop
    - GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
    - GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
    - GUPS.AntiCheat.Monitor.AMonitor.Dispose
    - GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject})
    - GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.Name
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: AndroidPackageSourceMonitor.Name
        VB: AndroidPackageSourceMonitor.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.Name
        VB: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Name
        path: ''
        startLine: 11961
      summary: "\nThe name of the Monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.Name*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.OnStart
      commentId: M:GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.OnStart
      language: CSharp
      name:
        CSharp: OnStart()
        VB: OnStart()
      nameWithType:
        CSharp: AndroidPackageSourceMonitor.OnStart()
        VB: AndroidPackageSourceMonitor.OnStart()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.OnStart()
        VB: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.OnStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: OnStart
        path: ''
        startLine: 11971
      summary: "\nOn start read the installation source of the app (apk / aab) and notify the observer.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnStart()
          VB: Protected Overrides Sub OnStart
      overload: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.OnStart*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.OnStart
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      GUPS.AntiCheat.Monitor.Android.EAppStore.Unknown: 
      GUPS.AntiCheat.Monitor.AMonitor: 
  - id: GUPS.AntiCheat.Monitor.Android.AppStoreHelper
    commentId: T:GUPS.AntiCheat.Monitor.Android.AppStoreHelper
    language: CSharp
    name:
      CSharp: AppStoreHelper
      VB: AppStoreHelper
    nameWithType:
      CSharp: AppStoreHelper
      VB: AppStoreHelper
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.AppStoreHelper
      VB: GUPS.AntiCheat.Monitor.Android.AppStoreHelper
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: AppStoreHelper
      path: ''
      startLine: 12052
    summary: "\nHelper class for interacting with Android app stores.\n"
    example: []
    syntax:
      content:
        CSharp: public static class AppStoreHelper
        VB: Public Module AppStoreHelper
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: GUPS.AntiCheat.Monitor.Android.AppStoreHelper.GetStore(String)
      commentId: M:GUPS.AntiCheat.Monitor.Android.AppStoreHelper.GetStore(String)
      language: CSharp
      name:
        CSharp: GetStore(String)
        VB: GetStore(String)
      nameWithType:
        CSharp: AppStoreHelper.GetStore(String)
        VB: AppStoreHelper.GetStore(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AppStoreHelper.GetStore(String)
        VB: GUPS.AntiCheat.Monitor.Android.AppStoreHelper.GetStore(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: GetStore
        path: ''
        startLine: 12059
      summary: "\nGets the AppStore enum value for a specified package name.\n"
      example: []
      syntax:
        content:
          CSharp: public static EAppStore GetStore(String _Package)
          VB: Public Shared Function GetStore(_Package As String) As EAppStore
        parameters:
        - id: _Package
          type: GUPS.AntiCheat.String
          description: The package name associated with an AppStore.
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
          description: The corresponding AppStore enum value.
      overload: GUPS.AntiCheat.Monitor.Android.AppStoreHelper.GetStore*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: GUPS.AntiCheat.Monitor.Android.EAppStore
    commentId: T:GUPS.AntiCheat.Monitor.Android.EAppStore
    language: CSharp
    name:
      CSharp: EAppStore
      VB: EAppStore
    nameWithType:
      CSharp: EAppStore
      VB: EAppStore
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore
      VB: GUPS.AntiCheat.Monitor.Android.EAppStore
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: EAppStore
      path: ''
      startLine: 12123
    summary: "\nEnum representing various Android app stores.\n"
    example: []
    syntax:
      content:
        CSharp: 'public enum EAppStore : byte'
        VB: Public Enum EAppStore As Byte
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.Unknown
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.Unknown
      language: CSharp
      name:
        CSharp: Unknown
        VB: Unknown
      nameWithType:
        CSharp: EAppStore.Unknown
        VB: EAppStore.Unknown
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.Unknown
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.Unknown
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Unknown
        path: ''
        startLine: 12129
      summary: "\nUnknown. The default value.\n"
      example: []
      syntax:
        content:
          CSharp: Unknown = 0
          VB: Unknown = 0
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.AndroidPackageInstaller
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.AndroidPackageInstaller
      language: CSharp
      name:
        CSharp: AndroidPackageInstaller
        VB: AndroidPackageInstaller
      nameWithType:
        CSharp: EAppStore.AndroidPackageInstaller
        VB: EAppStore.AndroidPackageInstaller
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.AndroidPackageInstaller
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.AndroidPackageInstaller
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: AndroidPackageInstaller
        path: ''
        startLine: 12136
      summary: "\nPackage Installer. The installation of apps outside of stores is done by a system app that is integrated into every Android device. \nThis system app, known as the package installer, is responsible for installing applications that originate from apk files downloaded \nfrom various locations.\n"
      example: []
      syntax:
        content:
          CSharp: AndroidPackageInstaller = 1
          VB: AndroidPackageInstaller = 1
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.AmazonAppstore
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.AmazonAppstore
      language: CSharp
      name:
        CSharp: AmazonAppstore
        VB: AmazonAppstore
      nameWithType:
        CSharp: EAppStore.AmazonAppstore
        VB: EAppStore.AmazonAppstore
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.AmazonAppstore
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.AmazonAppstore
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: AmazonAppstore
        path: ''
        startLine: 12141
      summary: "\nAmazon Appstore. Amazon&apos;s digital application distribution platform.\n"
      example: []
      syntax:
        content:
          CSharp: AmazonAppstore = 2
          VB: AmazonAppstore = 2
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.Aptoide
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.Aptoide
      language: CSharp
      name:
        CSharp: Aptoide
        VB: Aptoide
      nameWithType:
        CSharp: EAppStore.Aptoide
        VB: EAppStore.Aptoide
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.Aptoide
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.Aptoide
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Aptoide
        path: ''
        startLine: 12146
      summary: "\nAptoide. An open-source independent Android app store.\n"
      example: []
      syntax:
        content:
          CSharp: Aptoide = 3
          VB: Aptoide = 3
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.CafeBazaar
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.CafeBazaar
      language: CSharp
      name:
        CSharp: CafeBazaar
        VB: CafeBazaar
      nameWithType:
        CSharp: EAppStore.CafeBazaar
        VB: EAppStore.CafeBazaar
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.CafeBazaar
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.CafeBazaar
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: CafeBazaar
        path: ''
        startLine: 12151
      summary: "\nCafe Bazaar. An Iranian Android marketplace.\n"
      example: []
      syntax:
        content:
          CSharp: CafeBazaar = 4
          VB: CafeBazaar = 4
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.FDroid
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.FDroid
      language: CSharp
      name:
        CSharp: FDroid
        VB: FDroid
      nameWithType:
        CSharp: EAppStore.FDroid
        VB: EAppStore.FDroid
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.FDroid
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.FDroid
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: FDroid
        path: ''
        startLine: 12156
      summary: "\nF-Droid. An open-source software repository for Android.\n"
      example: []
      syntax:
        content:
          CSharp: FDroid = 5
          VB: FDroid = 5
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.GooglePlayStore
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.GooglePlayStore
      language: CSharp
      name:
        CSharp: GooglePlayStore
        VB: GooglePlayStore
      nameWithType:
        CSharp: EAppStore.GooglePlayStore
        VB: EAppStore.GooglePlayStore
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.GooglePlayStore
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.GooglePlayStore
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: GooglePlayStore
        path: ''
        startLine: 12161
      summary: "\nGoogle Play Store. Google&apos;s official app store.\n"
      example: []
      syntax:
        content:
          CSharp: GooglePlayStore = 6
          VB: GooglePlayStore = 6
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.HuaweiAppGallery
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.HuaweiAppGallery
      language: CSharp
      name:
        CSharp: HuaweiAppGallery
        VB: HuaweiAppGallery
      nameWithType:
        CSharp: EAppStore.HuaweiAppGallery
        VB: EAppStore.HuaweiAppGallery
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.HuaweiAppGallery
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.HuaweiAppGallery
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: HuaweiAppGallery
        path: ''
        startLine: 12166
      summary: "\nHuawei AppGallery. Huawei&apos;s official app distribution platform.\n"
      example: []
      syntax:
        content:
          CSharp: HuaweiAppGallery = 7
          VB: HuaweiAppGallery = 7
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.Myket
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.Myket
      language: CSharp
      name:
        CSharp: Myket
        VB: Myket
      nameWithType:
        CSharp: EAppStore.Myket
        VB: EAppStore.Myket
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.Myket
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.Myket
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Myket
        path: ''
        startLine: 12171
      summary: "\nMyket. A popular Android app store.\n"
      example: []
      syntax:
        content:
          CSharp: Myket = 8
          VB: Myket = 8
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.OppoAppMarket
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.OppoAppMarket
      language: CSharp
      name:
        CSharp: OppoAppMarket
        VB: OppoAppMarket
      nameWithType:
        CSharp: EAppStore.OppoAppMarket
        VB: EAppStore.OppoAppMarket
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.OppoAppMarket
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.OppoAppMarket
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: OppoAppMarket
        path: ''
        startLine: 12176
      summary: "\nOppo App Market. Oppo&apos;s official app store.\n"
      example: []
      syntax:
        content:
          CSharp: OppoAppMarket = 9
          VB: OppoAppMarket = 9
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.SamsungGalaxyStore
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.SamsungGalaxyStore
      language: CSharp
      name:
        CSharp: SamsungGalaxyStore
        VB: SamsungGalaxyStore
      nameWithType:
        CSharp: EAppStore.SamsungGalaxyStore
        VB: EAppStore.SamsungGalaxyStore
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.SamsungGalaxyStore
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.SamsungGalaxyStore
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: SamsungGalaxyStore
        path: ''
        startLine: 12181
      summary: "\nSamsung Galaxy Store. Samsung&apos;s official app store.\n"
      example: []
      syntax:
        content:
          CSharp: SamsungGalaxyStore = 10
          VB: SamsungGalaxyStore = 10
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.TapTap
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.TapTap
      language: CSharp
      name:
        CSharp: TapTap
        VB: TapTap
      nameWithType:
        CSharp: EAppStore.TapTap
        VB: EAppStore.TapTap
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.TapTap
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.TapTap
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: TapTap
        path: ''
        startLine: 12186
      summary: "\nTapTap. A Chinese app store for mobile games.\n"
      example: []
      syntax:
        content:
          CSharp: TapTap = 11
          VB: TapTap = 11
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.VivoAppStore
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.VivoAppStore
      language: CSharp
      name:
        CSharp: VivoAppStore
        VB: VivoAppStore
      nameWithType:
        CSharp: EAppStore.VivoAppStore
        VB: EAppStore.VivoAppStore
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.VivoAppStore
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.VivoAppStore
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: VivoAppStore
        path: ''
        startLine: 12191
      summary: "\nVivo App Store. Vivo&apos;s official app distribution platform.\n"
      example: []
      syntax:
        content:
          CSharp: VivoAppStore = 12
          VB: VivoAppStore = 12
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.XiaomiMiGetApps
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.XiaomiMiGetApps
      language: CSharp
      name:
        CSharp: XiaomiMiGetApps
        VB: XiaomiMiGetApps
      nameWithType:
        CSharp: EAppStore.XiaomiMiGetApps
        VB: EAppStore.XiaomiMiGetApps
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.XiaomiMiGetApps
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.XiaomiMiGetApps
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: XiaomiMiGetApps
        path: ''
        startLine: 12196
      summary: "\nXiaomi Mi GetApps. Xiaomi&apos;s official app store.\n"
      example: []
      syntax:
        content:
          CSharp: XiaomiMiGetApps = 13
          VB: XiaomiMiGetApps = 13
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Android.EAppStore.XDALabs
      commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.XDALabs
      language: CSharp
      name:
        CSharp: XDALabs
        VB: XDALabs
      nameWithType:
        CSharp: EAppStore.XDALabs
        VB: EAppStore.XDALabs
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.EAppStore.XDALabs
        VB: GUPS.AntiCheat.Monitor.Android.EAppStore.XDALabs
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: XDALabs
        path: ''
        startLine: 12201
      summary: "\nXDA Labs. A platform for mobile development projects.\n"
      example: []
      syntax:
        content:
          CSharp: XDALabs = 14
          VB: XDALabs = 14
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus
    language: CSharp
    name:
      CSharp: AndroidFingerprintStatus
      VB: AndroidFingerprintStatus
    nameWithType:
      CSharp: AndroidFingerprintStatus
      VB: AndroidFingerprintStatus
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus
      VB: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: AndroidFingerprintStatus
      path: ''
      startLine: 12213
    syntax:
      content:
        CSharp: 'public struct AndroidFingerprintStatus : IAndroidStatus'
        VB: >-
          Public Structure AndroidFingerprintStatus

              Implements IAndroidStatus
    implements:
    - GUPS.AntiCheat.Monitor.Android.IAndroidStatus
    - GUPS.AntiCheat.IWatchedSubject
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.FailedToRetrieveData
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.FailedToRetrieveData
      language: CSharp
      name:
        CSharp: FailedToRetrieveData
        VB: FailedToRetrieveData
      nameWithType:
        CSharp: AndroidFingerprintStatus.FailedToRetrieveData
        VB: AndroidFingerprintStatus.FailedToRetrieveData
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.FailedToRetrieveData
        VB: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.FailedToRetrieveData
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: FailedToRetrieveData
        path: ''
        startLine: 12218
      summary: "\nGets if the certificates fingerprint could not be retrieved or an exception occurred. And no valid value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public bool FailedToRetrieveData { readonly get; }
          VB: Public ReadOnly Property FailedToRetrieveData As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.FailedToRetrieveData*
      implements:
      - GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Algorithm
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Algorithm
      language: CSharp
      name:
        CSharp: Algorithm
        VB: Algorithm
      nameWithType:
        CSharp: AndroidFingerprintStatus.Algorithm
        VB: AndroidFingerprintStatus.Algorithm
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Algorithm
        VB: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Algorithm
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Algorithm
        path: ''
        startLine: 12223
      summary: "\nThe algorithm used to determine the fingerprint / signature.\n"
      example: []
      syntax:
        content:
          CSharp: public String Algorithm { readonly get; }
          VB: Public ReadOnly Property Algorithm As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Algorithm*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Fingerprint
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Fingerprint
      language: CSharp
      name:
        CSharp: Fingerprint
        VB: Fingerprint
      nameWithType:
        CSharp: AndroidFingerprintStatus.Fingerprint
        VB: AndroidFingerprintStatus.Fingerprint
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Fingerprint
        VB: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Fingerprint
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Fingerprint
        path: ''
        startLine: 12228
      summary: "\nThe public fingerprint / signature of the app which it was signed with.\n"
      example: []
      syntax:
        content:
          CSharp: public String Fingerprint { readonly get; }
          VB: Public ReadOnly Property Fingerprint As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Fingerprint*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.#ctor(System.Boolean,String,String)
      commentId: M:GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.#ctor(System.Boolean,String,String)
      language: CSharp
      name:
        CSharp: AndroidFingerprintStatus(Boolean, String, String)
        VB: AndroidFingerprintStatus(Boolean, String, String)
      nameWithType:
        CSharp: AndroidFingerprintStatus.AndroidFingerprintStatus(Boolean, String, String)
        VB: AndroidFingerprintStatus.AndroidFingerprintStatus(Boolean, String, String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.AndroidFingerprintStatus(System.Boolean, String, String)
        VB: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.AndroidFingerprintStatus(System.Boolean, String, String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: .ctor
        path: ''
        startLine: 12236
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
      example: []
      syntax:
        content:
          CSharp: public AndroidFingerprintStatus(bool _FailedToRetrieveData, String _Algorithm, String _Fingerprint)
          VB: Public Sub New(_FailedToRetrieveData As Boolean, _Algorithm As String, _Fingerprint As String)
        parameters:
        - id: _FailedToRetrieveData
          type: System.Boolean
          description: True if the data point could not be retrieved or exception occurred; otherwise, false.
        - id: _Algorithm
          type: GUPS.AntiCheat.String
          description: The algorithm used to determine the fingerprint / signature.
        - id: _Fingerprint
          type: GUPS.AntiCheat.String
          description: The public fingerprint / signature of the app which it was signed with.
      overload: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus: 
  - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidHashStatus
    language: CSharp
    name:
      CSharp: AndroidHashStatus
      VB: AndroidHashStatus
    nameWithType:
      CSharp: AndroidHashStatus
      VB: AndroidHashStatus
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus
      VB: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: AndroidHashStatus
      path: ''
      startLine: 12253
    syntax:
      content:
        CSharp: 'public struct AndroidHashStatus : IAndroidStatus'
        VB: >-
          Public Structure AndroidHashStatus

              Implements IAndroidStatus
    implements:
    - GUPS.AntiCheat.Monitor.Android.IAndroidStatus
    - GUPS.AntiCheat.IWatchedSubject
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.FailedToRetrieveData
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.FailedToRetrieveData
      language: CSharp
      name:
        CSharp: FailedToRetrieveData
        VB: FailedToRetrieveData
      nameWithType:
        CSharp: AndroidHashStatus.FailedToRetrieveData
        VB: AndroidHashStatus.FailedToRetrieveData
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.FailedToRetrieveData
        VB: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.FailedToRetrieveData
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: FailedToRetrieveData
        path: ''
        startLine: 12258
      summary: "\nGets if the hash could not be retrieved or an exception occurred. And no valid value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public bool FailedToRetrieveData { readonly get; }
          VB: Public ReadOnly Property FailedToRetrieveData As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.FailedToRetrieveData*
      implements:
      - GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Algorithm
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Algorithm
      language: CSharp
      name:
        CSharp: Algorithm
        VB: Algorithm
      nameWithType:
        CSharp: AndroidHashStatus.Algorithm
        VB: AndroidHashStatus.Algorithm
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Algorithm
        VB: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Algorithm
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Algorithm
        path: ''
        startLine: 12263
      summary: "\nThe algorithm used to hash the app.\n"
      example: []
      syntax:
        content:
          CSharp: public String Algorithm { readonly get; }
          VB: Public ReadOnly Property Algorithm As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Algorithm*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Hash
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Hash
      language: CSharp
      name:
        CSharp: Hash
        VB: Hash
      nameWithType:
        CSharp: AndroidHashStatus.Hash
        VB: AndroidHashStatus.Hash
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Hash
        VB: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Hash
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Hash
        path: ''
        startLine: 12268
      summary: "\nThe hash of the whole app itself as hex string.\n"
      example: []
      syntax:
        content:
          CSharp: public String Hash { readonly get; }
          VB: Public ReadOnly Property Hash As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Hash*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.#ctor(System.Boolean,String,String)
      commentId: M:GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.#ctor(System.Boolean,String,String)
      language: CSharp
      name:
        CSharp: AndroidHashStatus(Boolean, String, String)
        VB: AndroidHashStatus(Boolean, String, String)
      nameWithType:
        CSharp: AndroidHashStatus.AndroidHashStatus(Boolean, String, String)
        VB: AndroidHashStatus.AndroidHashStatus(Boolean, String, String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.AndroidHashStatus(System.Boolean, String, String)
        VB: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.AndroidHashStatus(System.Boolean, String, String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: .ctor
        path: ''
        startLine: 12276
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Monitor.Android.AndroidHashStatus\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
      example: []
      syntax:
        content:
          CSharp: public AndroidHashStatus(bool _FailedToRetrieveData, String _Algorithm, String _Hash)
          VB: Public Sub New(_FailedToRetrieveData As Boolean, _Algorithm As String, _Hash As String)
        parameters:
        - id: _FailedToRetrieveData
          type: System.Boolean
          description: True if the data point could not be retrieved or exception occurred; otherwise, false.
        - id: _Algorithm
          type: GUPS.AntiCheat.String
        - id: _Hash
          type: GUPS.AntiCheat.String
          description: The hash of the whole app itself.
      overload: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Monitor.Android.AndroidHashStatus: 
  - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus
    language: CSharp
    name:
      CSharp: AndroidInstalledApplicationStatus
      VB: AndroidInstalledApplicationStatus
    nameWithType:
      CSharp: AndroidInstalledApplicationStatus
      VB: AndroidInstalledApplicationStatus
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus
      VB: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: AndroidInstalledApplicationStatus
      path: ''
      startLine: 12299
    summary: "\nThis status is used to communicate between the <xref href=\"GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor\" data-throw-if-not-resolved=\"false\"></xref> \nand the observers, by default this is the <xref href=\"GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector\" data-throw-if-not-resolved=\"false\"></xref>.\nIt updates the observers about the installed applications on the device.\n"
    example: []
    syntax:
      content:
        CSharp: 'public struct AndroidInstalledApplicationStatus : IAndroidStatus'
        VB: >-
          Public Structure AndroidInstalledApplicationStatus

              Implements IAndroidStatus
    implements:
    - GUPS.AntiCheat.Monitor.Android.IAndroidStatus
    - GUPS.AntiCheat.IWatchedSubject
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.FailedToRetrieveData
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.FailedToRetrieveData
      language: CSharp
      name:
        CSharp: FailedToRetrieveData
        VB: FailedToRetrieveData
      nameWithType:
        CSharp: AndroidInstalledApplicationStatus.FailedToRetrieveData
        VB: AndroidInstalledApplicationStatus.FailedToRetrieveData
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.FailedToRetrieveData
        VB: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.FailedToRetrieveData
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: FailedToRetrieveData
        path: ''
        startLine: 12304
      summary: "\nGets if the apps on the device could not be retrieved or an exception occurred. And no valid value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public bool FailedToRetrieveData { readonly get; }
          VB: Public ReadOnly Property FailedToRetrieveData As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.FailedToRetrieveData*
      implements:
      - GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.Applications
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.Applications
      language: CSharp
      name:
        CSharp: Applications
        VB: Applications
      nameWithType:
        CSharp: AndroidInstalledApplicationStatus.Applications
        VB: AndroidInstalledApplicationStatus.Applications
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.Applications
        VB: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.Applications
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Applications
        path: ''
        startLine: 12309
      summary: "\nThe list of found installed applications on the device.\n"
      example: []
      syntax:
        content:
          CSharp: public List<String> Applications { readonly get; }
          VB: Public ReadOnly Property Applications As List(Of String)
        parameters: []
        return:
          type: GUPS.AntiCheat.List{String}
      overload: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.Applications*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.#ctor(System.Boolean,List{String})
      commentId: M:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.#ctor(System.Boolean,List{String})
      language: CSharp
      name:
        CSharp: AndroidInstalledApplicationStatus(Boolean, List<String>)
        VB: AndroidInstalledApplicationStatus(Boolean, List(Of String))
      nameWithType:
        CSharp: AndroidInstalledApplicationStatus.AndroidInstalledApplicationStatus(Boolean, List<String>)
        VB: AndroidInstalledApplicationStatus.AndroidInstalledApplicationStatus(Boolean, List(Of String))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.AndroidInstalledApplicationStatus(System.Boolean, List<String>)
        VB: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.AndroidInstalledApplicationStatus(System.Boolean, List(Of String))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: .ctor
        path: ''
        startLine: 12316
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
      example: []
      syntax:
        content:
          CSharp: public AndroidInstalledApplicationStatus(bool _FailedToRetrieveData, List<String> _Applications)
          VB: Public Sub New(_FailedToRetrieveData As Boolean, _Applications As List(Of String))
        parameters:
        - id: _FailedToRetrieveData
          type: System.Boolean
          description: True if the data point could not be retrieved or exception occurred; otherwise, false.
        - id: _Applications
          type: GUPS.AntiCheat.List{String}
          description: The list of installed applications on the device.
      overload: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus: 
    references:
      GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor: 
      GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector: 
  - id: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus
    language: CSharp
    name:
      CSharp: AndroidLibraryStatus
      VB: AndroidLibraryStatus
    nameWithType:
      CSharp: AndroidLibraryStatus
      VB: AndroidLibraryStatus
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus
      VB: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: AndroidLibraryStatus
      path: ''
      startLine: 12333
    syntax:
      content:
        CSharp: 'public struct AndroidLibraryStatus : IAndroidStatus'
        VB: >-
          Public Structure AndroidLibraryStatus

              Implements IAndroidStatus
    implements:
    - GUPS.AntiCheat.Monitor.Android.IAndroidStatus
    - GUPS.AntiCheat.IWatchedSubject
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.FailedToRetrieveData
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.FailedToRetrieveData
      language: CSharp
      name:
        CSharp: FailedToRetrieveData
        VB: FailedToRetrieveData
      nameWithType:
        CSharp: AndroidLibraryStatus.FailedToRetrieveData
        VB: AndroidLibraryStatus.FailedToRetrieveData
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.FailedToRetrieveData
        VB: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.FailedToRetrieveData
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: FailedToRetrieveData
        path: ''
        startLine: 12338
      summary: "\nGets if the libraries could not be retrieved or an exception occurred. And no valid value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public bool FailedToRetrieveData { readonly get; }
          VB: Public ReadOnly Property FailedToRetrieveData As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.FailedToRetrieveData*
      implements:
      - GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.Libraries
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.Libraries
      language: CSharp
      name:
        CSharp: Libraries
        VB: Libraries
      nameWithType:
        CSharp: AndroidLibraryStatus.Libraries
        VB: AndroidLibraryStatus.Libraries
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.Libraries
        VB: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.Libraries
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: Libraries
        path: ''
        startLine: 12343
      summary: "\nThe list of libraries used by the app on the device.\n"
      example: []
      syntax:
        content:
          CSharp: public List<String> Libraries { readonly get; }
          VB: Public ReadOnly Property Libraries As List(Of String)
        parameters: []
        return:
          type: GUPS.AntiCheat.List{String}
      overload: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.Libraries*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.#ctor(System.Boolean,List{String})
      commentId: M:GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.#ctor(System.Boolean,List{String})
      language: CSharp
      name:
        CSharp: AndroidLibraryStatus(Boolean, List<String>)
        VB: AndroidLibraryStatus(Boolean, List(Of String))
      nameWithType:
        CSharp: AndroidLibraryStatus.AndroidLibraryStatus(Boolean, List<String>)
        VB: AndroidLibraryStatus.AndroidLibraryStatus(Boolean, List(Of String))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.AndroidLibraryStatus(System.Boolean, List<String>)
        VB: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.AndroidLibraryStatus(System.Boolean, List(Of String))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: .ctor
        path: ''
        startLine: 12350
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
      example: []
      syntax:
        content:
          CSharp: public AndroidLibraryStatus(bool _FailedToRetrieveData, List<String> _Libraries)
          VB: Public Sub New(_FailedToRetrieveData As Boolean, _Libraries As List(Of String))
        parameters:
        - id: _FailedToRetrieveData
          type: System.Boolean
          description: True if the data point could not be retrieved or exception occurred; otherwise, false.
        - id: _Libraries
          type: GUPS.AntiCheat.List{String}
          description: The list of libraries used by the app on the device.
      overload: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus: 
  - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus
    language: CSharp
    name:
      CSharp: AndroidSourceStatus
      VB: AndroidSourceStatus
    nameWithType:
      CSharp: AndroidSourceStatus
      VB: AndroidSourceStatus
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus
      VB: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: AndroidSourceStatus
      path: ''
      startLine: 12366
    syntax:
      content:
        CSharp: 'public struct AndroidSourceStatus : IAndroidStatus'
        VB: >-
          Public Structure AndroidSourceStatus

              Implements IAndroidStatus
    implements:
    - GUPS.AntiCheat.Monitor.Android.IAndroidStatus
    - GUPS.AntiCheat.IWatchedSubject
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.FailedToRetrieveData
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.FailedToRetrieveData
      language: CSharp
      name:
        CSharp: FailedToRetrieveData
        VB: FailedToRetrieveData
      nameWithType:
        CSharp: AndroidSourceStatus.FailedToRetrieveData
        VB: AndroidSourceStatus.FailedToRetrieveData
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.FailedToRetrieveData
        VB: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.FailedToRetrieveData
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: FailedToRetrieveData
        path: ''
        startLine: 12371
      summary: "\nGets if the installation source could not be retrieved or an exception occurred. And no valid value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public bool FailedToRetrieveData { readonly get; }
          VB: Public ReadOnly Property FailedToRetrieveData As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.FailedToRetrieveData*
      implements:
      - GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSource
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSource
      language: CSharp
      name:
        CSharp: AppStoreSource
        VB: AppStoreSource
      nameWithType:
        CSharp: AndroidSourceStatus.AppStoreSource
        VB: AndroidSourceStatus.AppStoreSource
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSource
        VB: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSource
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: AppStoreSource
        path: ''
        startLine: 12376
      summary: "\nGets the app store source, this app was downloaded and installed from.\n"
      example: []
      syntax:
        content:
          CSharp: public EAppStore AppStoreSource { readonly get; }
          VB: Public ReadOnly Property AppStoreSource As EAppStore
        parameters: []
        return:
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
      overload: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSource*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSourcePackage
      commentId: P:GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSourcePackage
      language: CSharp
      name:
        CSharp: AppStoreSourcePackage
        VB: AppStoreSourcePackage
      nameWithType:
        CSharp: AndroidSourceStatus.AppStoreSourcePackage
        VB: AndroidSourceStatus.AppStoreSourcePackage
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSourcePackage
        VB: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSourcePackage
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: AppStoreSourcePackage
        path: ''
        startLine: 12381
      summary: "\nGets the app store source package name, this app was downloaded and installed from.\n"
      example: []
      syntax:
        content:
          CSharp: public String AppStoreSourcePackage { readonly get; }
          VB: Public ReadOnly Property AppStoreSourcePackage As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSourcePackage*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.#ctor(System.Boolean,GUPS.AntiCheat.Monitor.Android.EAppStore,String)
      commentId: M:GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.#ctor(System.Boolean,GUPS.AntiCheat.Monitor.Android.EAppStore,String)
      language: CSharp
      name:
        CSharp: AndroidSourceStatus(Boolean, EAppStore, String)
        VB: AndroidSourceStatus(Boolean, EAppStore, String)
      nameWithType:
        CSharp: AndroidSourceStatus.AndroidSourceStatus(Boolean, EAppStore, String)
        VB: AndroidSourceStatus.AndroidSourceStatus(Boolean, EAppStore, String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AndroidSourceStatus(System.Boolean, GUPS.AntiCheat.Monitor.Android.EAppStore, String)
        VB: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AndroidSourceStatus(System.Boolean, GUPS.AntiCheat.Monitor.Android.EAppStore, String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: .ctor
        path: ''
        startLine: 12389
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
      example: []
      syntax:
        content:
          CSharp: public AndroidSourceStatus(bool _FailedToRetrieveData, EAppStore _Source, String _AppStoreSourcePackage)
          VB: Public Sub New(_FailedToRetrieveData As Boolean, _Source As EAppStore, _AppStoreSourcePackage As String)
        parameters:
        - id: _FailedToRetrieveData
          type: System.Boolean
          description: True if the data point could not be retrieved or exception occurred; otherwise, false.
        - id: _Source
          type: GUPS.AntiCheat.Monitor.Android.EAppStore
          description: The app store source, this app was downloaded and installed from.
        - id: _AppStoreSourcePackage
          type: GUPS.AntiCheat.String
          description: The app store source package name, this app was downloaded and installed from.
      overload: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus: 
  - id: GUPS.AntiCheat.Monitor.Android.IAndroidStatus
    commentId: T:GUPS.AntiCheat.Monitor.Android.IAndroidStatus
    language: CSharp
    name:
      CSharp: IAndroidStatus
      VB: IAndroidStatus
    nameWithType:
      CSharp: IAndroidStatus
      VB: IAndroidStatus
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Android.IAndroidStatus
      VB: GUPS.AntiCheat.Monitor.Android.IAndroidStatus
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Android
    source:
      id: IAndroidStatus
      path: ''
      startLine: 12406
    syntax:
      content:
        CSharp: public interface IAndroidStatus
        VB: >-
          Public Interface IAndroidStatus

              Inherits IWatchedSubject
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
      commentId: P:GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
      language: CSharp
      name:
        CSharp: FailedToRetrieveData
        VB: FailedToRetrieveData
      nameWithType:
        CSharp: IAndroidStatus.FailedToRetrieveData
        VB: IAndroidStatus.FailedToRetrieveData
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
        VB: GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Android
      source:
        id: FailedToRetrieveData
        path: ''
        startLine: 12411
      summary: "\nGets if the specific data point could not be retrieved or an exception occurred. And no valid value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: bool FailedToRetrieveData { get; }
          VB: ReadOnly Property FailedToRetrieveData As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
- id: GUPS.AntiCheat.Monitor.Time
  commentId: N:GUPS.AntiCheat.Monitor.Time
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Monitor.Time
    VB: GUPS.AntiCheat.Monitor.Time
  nameWithType:
    CSharp: GUPS.AntiCheat.Monitor.Time
    VB: GUPS.AntiCheat.Monitor.Time
  qualifiedName:
    CSharp: GUPS.AntiCheat.Monitor.Time
    VB: GUPS.AntiCheat.Monitor.Time
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor
    commentId: T:GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor
    language: CSharp
    name:
      CSharp: DeviceTimeMonitor
      VB: DeviceTimeMonitor
    nameWithType:
      CSharp: DeviceTimeMonitor
      VB: DeviceTimeMonitor
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor
      VB: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Time
    source:
      id: DeviceTimeMonitor
      path: ''
      startLine: 12432
    summary: "\nMonitors the device time and notifies observers about time deviations during the application lifecycle events.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor\" data-throw-if-not-resolved=\"false\"></xref> class validates the device time against the game time during key application events,\nsuch as regaining focus or resuming from pause. If any time deviations are detected, it notifies observers through the\nimplementation of the <xref href=\"GUPS.AntiCheat.Monitor.AMonitor\" data-throw-if-not-resolved=\"false\"></xref> class.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class DeviceTimeMonitor : AMonitor'
        VB: >-
          Public Class DeviceTimeMonitor

              Inherits AMonitor
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Monitor.AMonitor
    implements:
    - GUPS.AntiCheat.IMonitor
    - GUPS.AntiCheat.IWatchAble{IWatchedSubject}
    inheritedMembers:
    - GUPS.AntiCheat.Monitor.AMonitor.IsActive
    - GUPS.AntiCheat.Monitor.AMonitor.IsStarted
    - GUPS.AntiCheat.Monitor.AMonitor.IsPaused
    - GUPS.AntiCheat.Monitor.AMonitor.Start
    - GUPS.AntiCheat.Monitor.AMonitor.OnStart
    - GUPS.AntiCheat.Monitor.AMonitor.Pause
    - GUPS.AntiCheat.Monitor.AMonitor.OnPause
    - GUPS.AntiCheat.Monitor.AMonitor.Resume
    - GUPS.AntiCheat.Monitor.AMonitor.OnResume
    - GUPS.AntiCheat.Monitor.AMonitor.Stop
    - GUPS.AntiCheat.Monitor.AMonitor.OnStop
    - GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
    - GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
    - GUPS.AntiCheat.Monitor.AMonitor.Dispose
    - GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject})
    - GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.Name
      commentId: P:GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: DeviceTimeMonitor.Name
        VB: DeviceTimeMonitor.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.Name
        VB: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: Name
        path: ''
        startLine: 12440
      summary: "\nThe name of the Monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.Name*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationFocus(System.Boolean)
      commentId: M:GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationFocus(System.Boolean)
      language: CSharp
      name:
        CSharp: OnApplicationFocus(Boolean)
        VB: OnApplicationFocus(Boolean)
      nameWithType:
        CSharp: DeviceTimeMonitor.OnApplicationFocus(Boolean)
        VB: DeviceTimeMonitor.OnApplicationFocus(Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationFocus(System.Boolean)
        VB: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationFocus(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: OnApplicationFocus
        path: ''
        startLine: 12514
      summary: "\nWhen the application gains focus again after losing it, the device time will be validated. If there are any deviations, the observers will be notified.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnApplicationFocus(bool _HasFocus)
          VB: Protected Overridable Sub OnApplicationFocus(_HasFocus As Boolean)
        parameters:
        - id: _HasFocus
          type: System.Boolean
          description: True if the application gains focus, false if it loses focus.
      overload: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationFocus*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationPause(System.Boolean)
      commentId: M:GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationPause(System.Boolean)
      language: CSharp
      name:
        CSharp: OnApplicationPause(Boolean)
        VB: OnApplicationPause(Boolean)
      nameWithType:
        CSharp: DeviceTimeMonitor.OnApplicationPause(Boolean)
        VB: DeviceTimeMonitor.OnApplicationPause(Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationPause(System.Boolean)
        VB: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationPause(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: OnApplicationPause
        path: ''
        startLine: 12549
      summary: "\nWhen the application is unpaused after being paused, the device time will be validated. If there are any deviations, the observers will be notified.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnApplicationPause(bool _IsPaused)
          VB: Protected Overridable Sub OnApplicationPause(_IsPaused As Boolean)
        parameters:
        - id: _IsPaused
          type: System.Boolean
          description: True if the application is paused, false if it is unpaused.
      overload: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationPause*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    references:
      GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor: 
      GUPS.AntiCheat.Monitor.AMonitor: 
  - id: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
    commentId: T:GUPS.AntiCheat.Monitor.Time.ETimeDeviation
    language: CSharp
    name:
      CSharp: ETimeDeviation
      VB: ETimeDeviation
    nameWithType:
      CSharp: ETimeDeviation
      VB: ETimeDeviation
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
      VB: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Time
    source:
      id: ETimeDeviation
      path: ''
      startLine: 12596
    summary: "\nEnumeration representing different types of time deviations that can occur.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Monitor.Time.ETimeDeviation\" data-throw-if-not-resolved=\"false\"></xref> enum defines the possible types of time deviations that may occur during time comparisons for cheat detection. \nEach member represents a specific kind of deviation, including no deviation (<xref href=\"GUPS.AntiCheat.Monitor.Time.ETimeDeviation.None\" data-throw-if-not-resolved=\"false\"></xref>), time stopping (<xref href=\"GUPS.AntiCheat.Monitor.Time.ETimeDeviation.Stopped\" data-throw-if-not-resolved=\"false\"></xref>), \ntime slowing down (<xref href=\"GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SlowedDown\" data-throw-if-not-resolved=\"false\"></xref>), and time speeding up (<xref href=\"GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SpeedUp\" data-throw-if-not-resolved=\"false\"></xref>).\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public enum ETimeDeviation : byte'
        VB: Public Enum ETimeDeviation As Byte
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: GUPS.AntiCheat.Monitor.Time.ETimeDeviation.None
      commentId: F:GUPS.AntiCheat.Monitor.Time.ETimeDeviation.None
      language: CSharp
      name:
        CSharp: None
        VB: None
      nameWithType:
        CSharp: ETimeDeviation.None
        VB: ETimeDeviation.None
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.ETimeDeviation.None
        VB: GUPS.AntiCheat.Monitor.Time.ETimeDeviation.None
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: None
        path: ''
        startLine: 12601
      summary: "\nNo time deviation.\n"
      example: []
      syntax:
        content:
          CSharp: None = 0
          VB: None = 0
        return:
          type: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Time.ETimeDeviation.Stopped
      commentId: F:GUPS.AntiCheat.Monitor.Time.ETimeDeviation.Stopped
      language: CSharp
      name:
        CSharp: Stopped
        VB: Stopped
      nameWithType:
        CSharp: ETimeDeviation.Stopped
        VB: ETimeDeviation.Stopped
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.ETimeDeviation.Stopped
        VB: GUPS.AntiCheat.Monitor.Time.ETimeDeviation.Stopped
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: Stopped
        path: ''
        startLine: 12606
      summary: "\nIndicates that time has stopped.\n"
      example: []
      syntax:
        content:
          CSharp: Stopped = 1
          VB: Stopped = 1
        return:
          type: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SlowedDown
      commentId: F:GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SlowedDown
      language: CSharp
      name:
        CSharp: SlowedDown
        VB: SlowedDown
      nameWithType:
        CSharp: ETimeDeviation.SlowedDown
        VB: ETimeDeviation.SlowedDown
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SlowedDown
        VB: GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SlowedDown
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: SlowedDown
        path: ''
        startLine: 12611
      summary: "\nIndicates that time is slowing down.\n"
      example: []
      syntax:
        content:
          CSharp: SlowedDown = 2
          VB: SlowedDown = 2
        return:
          type: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SpeedUp
      commentId: F:GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SpeedUp
      language: CSharp
      name:
        CSharp: SpeedUp
        VB: SpeedUp
      nameWithType:
        CSharp: ETimeDeviation.SpeedUp
        VB: ETimeDeviation.SpeedUp
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SpeedUp
        VB: GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SpeedUp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: SpeedUp
        path: ''
        startLine: 12616
      summary: "\nIndicates that time is speeding up.\n"
      example: []
      syntax:
        content:
          CSharp: SpeedUp = 3
          VB: SpeedUp = 3
        return:
          type: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    references:
      GUPS.AntiCheat.Monitor.Time.ETimeDeviation: 
      GUPS.AntiCheat.Monitor.Time.ETimeDeviation.None: 
      GUPS.AntiCheat.Monitor.Time.ETimeDeviation.Stopped: 
      GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SlowedDown: 
      GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SpeedUp: 
  - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor
    commentId: T:GUPS.AntiCheat.Monitor.Time.GameTimeMonitor
    language: CSharp
    name:
      CSharp: GameTimeMonitor
      VB: GameTimeMonitor
    nameWithType:
      CSharp: GameTimeMonitor
      VB: GameTimeMonitor
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor
      VB: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Time
    source:
      id: GameTimeMonitor
      path: ''
      startLine: 12637
    summary: "\nMonitors the actual game time (UnityEngine.Time), calculating and notifying observers about possible game time deviations, possibly caused by cheating.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Monitor.Time.GameTimeMonitor\" data-throw-if-not-resolved=\"false\"></xref> class monitors the game time, calculating the deviation between &apos;Game Time&apos; and &apos;Real Time&apos;. It records the history \nof delta time values and calculates the mean values to determine whether there is a significant deviation. If a deviation is detected, it notifies \nobservers about the specific type of detected possible deviation.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GameTimeMonitor : AMonitor'
        VB: >-
          Public Class GameTimeMonitor

              Inherits AMonitor
    inheritance:
    - System.Object
    - GUPS.AntiCheat.Monitor.AMonitor
    implements:
    - GUPS.AntiCheat.IMonitor
    - GUPS.AntiCheat.IWatchAble{IWatchedSubject}
    inheritedMembers:
    - GUPS.AntiCheat.Monitor.AMonitor.IsActive
    - GUPS.AntiCheat.Monitor.AMonitor.IsStarted
    - GUPS.AntiCheat.Monitor.AMonitor.IsPaused
    - GUPS.AntiCheat.Monitor.AMonitor.Start
    - GUPS.AntiCheat.Monitor.AMonitor.Pause
    - GUPS.AntiCheat.Monitor.AMonitor.OnPause
    - GUPS.AntiCheat.Monitor.AMonitor.Resume
    - GUPS.AntiCheat.Monitor.AMonitor.Stop
    - GUPS.AntiCheat.Monitor.AMonitor.OnStop
    - GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
    - GUPS.AntiCheat.Monitor.AMonitor.Dispose
    - GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject})
    - GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.Name
      commentId: P:GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: GameTimeMonitor.Name
        VB: GameTimeMonitor.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.Name
        VB: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: Name
        path: ''
        startLine: 12645
      summary: "\nThe name of the Monitor.\n"
      example: []
      syntax:
        content:
          CSharp: public override String Name { get; }
          VB: Public Overrides ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.Name*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.Name
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnStart
      commentId: M:GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnStart
      language: CSharp
      name:
        CSharp: OnStart()
        VB: OnStart()
      nameWithType:
        CSharp: GameTimeMonitor.OnStart()
        VB: GameTimeMonitor.OnStart()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnStart()
        VB: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnStart()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: OnStart
        path: ''
        startLine: 12804
      summary: "\nCalled when the monitor is started, resetting time values.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnStart()
          VB: Protected Overrides Sub OnStart
      overload: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnStart*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.OnStart
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnResume
      commentId: M:GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnResume
      language: CSharp
      name:
        CSharp: OnResume()
        VB: OnResume()
      nameWithType:
        CSharp: GameTimeMonitor.OnResume()
        VB: GameTimeMonitor.OnResume()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnResume()
        VB: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnResume()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: OnResume
        path: ''
        startLine: 12813
      summary: "\nCalled when the monitor is resumed, resetting time values.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnResume()
          VB: Protected Overrides Sub OnResume
      overload: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnResume*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.OnResume
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnUpdate
      commentId: M:GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnUpdate
      language: CSharp
      name:
        CSharp: OnUpdate()
        VB: OnUpdate()
      nameWithType:
        CSharp: GameTimeMonitor.OnUpdate()
        VB: GameTimeMonitor.OnUpdate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnUpdate()
        VB: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: OnUpdate
        path: ''
        startLine: 12822
      summary: "\nCalled on each frame update, calculating and notifying observers about possible time deviations.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void OnUpdate()
          VB: Protected Overrides Sub OnUpdate
      overload: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnUpdate*
      overridden: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      GUPS.AntiCheat.Monitor.Time.GameTimeMonitor: 
  - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus
    commentId: T:GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus
    language: CSharp
    name:
      CSharp: DeviceTimeStatus
      VB: DeviceTimeStatus
    nameWithType:
      CSharp: DeviceTimeStatus
      VB: DeviceTimeStatus
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus
      VB: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Time
    source:
      id: DeviceTimeStatus
      path: ''
      startLine: 12891
    summary: "\nRepresents the status of a device&apos;s time, providing information about its deviation from expected time.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus\" data-throw-if-not-resolved=\"false\"></xref> struct is used to encapsulate the current time deviation status of a device, serving as a subject that can be watched or monitored.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public struct DeviceTimeStatus
        VB: Public Structure DeviceTimeStatus
    implements:
    - GUPS.AntiCheat.IWatchedSubject
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.Deviation
      commentId: P:GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.Deviation
      language: CSharp
      name:
        CSharp: Deviation
        VB: Deviation
      nameWithType:
        CSharp: DeviceTimeStatus.Deviation
        VB: DeviceTimeStatus.Deviation
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.Deviation
        VB: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.Deviation
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: Deviation
        path: ''
        startLine: 12896
      summary: "\nGets the deviation of the device&apos;s time from the expected time, utilizing the <xref href=\"GUPS.AntiCheat.Monitor.Time.ETimeDeviation\" data-throw-if-not-resolved=\"false\"></xref> enumeration.\n"
      example: []
      syntax:
        content:
          CSharp: public ETimeDeviation Deviation { readonly get; }
          VB: Public ReadOnly Property Deviation As ETimeDeviation
        parameters: []
        return:
          type: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
      overload: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.Deviation*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
      references:
        GUPS.AntiCheat.Monitor.Time.ETimeDeviation: 
    - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.#ctor(GUPS.AntiCheat.Monitor.Time.ETimeDeviation)
      commentId: M:GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.#ctor(GUPS.AntiCheat.Monitor.Time.ETimeDeviation)
      language: CSharp
      name:
        CSharp: DeviceTimeStatus(ETimeDeviation)
        VB: DeviceTimeStatus(ETimeDeviation)
      nameWithType:
        CSharp: DeviceTimeStatus.DeviceTimeStatus(ETimeDeviation)
        VB: DeviceTimeStatus.DeviceTimeStatus(ETimeDeviation)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.DeviceTimeStatus(GUPS.AntiCheat.Monitor.Time.ETimeDeviation)
        VB: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.DeviceTimeStatus(GUPS.AntiCheat.Monitor.Time.ETimeDeviation)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: .ctor
        path: ''
        startLine: 12902
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus\" data-throw-if-not-resolved=\"false\"></xref> struct with the specified parameters.\n"
      example: []
      syntax:
        content:
          CSharp: public DeviceTimeStatus(ETimeDeviation _Deviation)
          VB: Public Sub New(_Deviation As ETimeDeviation)
        parameters:
        - id: _Deviation
          type: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
          description: The deviation of the device&apos;s time from the expected time.
      overload: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus: 
    references:
      GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus: 
  - id: GUPS.AntiCheat.Monitor.Time.GameTimeStatus
    commentId: T:GUPS.AntiCheat.Monitor.Time.GameTimeStatus
    language: CSharp
    name:
      CSharp: GameTimeStatus
      VB: GameTimeStatus
    nameWithType:
      CSharp: GameTimeStatus
      VB: GameTimeStatus
    qualifiedName:
      CSharp: GUPS.AntiCheat.Monitor.Time.GameTimeStatus
      VB: GUPS.AntiCheat.Monitor.Time.GameTimeStatus
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Monitor.Time
    source:
      id: GameTimeStatus
      path: ''
      startLine: 12922
    summary: "\nRepresents a structure for monitoring and conveying the status of game time deviation, implementing the <see cref=\"!:IWatchedSubject\"></see> interface.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Monitor.Time.GameTimeStatus\" data-throw-if-not-resolved=\"false\"></xref> struct encapsulates information about the deviation of game time, allowing observers to stay informed about any time-related manipulations.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public struct GameTimeStatus
        VB: Public Structure GameTimeStatus
    implements:
    - GUPS.AntiCheat.IWatchedSubject
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.Deviation
      commentId: P:GUPS.AntiCheat.Monitor.Time.GameTimeStatus.Deviation
      language: CSharp
      name:
        CSharp: Deviation
        VB: Deviation
      nameWithType:
        CSharp: GameTimeStatus.Deviation
        VB: GameTimeStatus.Deviation
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.Deviation
        VB: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.Deviation
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: Deviation
        path: ''
        startLine: 12927
      summary: "\nGets the deviation of game time, indicating any time-related manipulations.\n"
      example: []
      syntax:
        content:
          CSharp: public ETimeDeviation Deviation { readonly get; }
          VB: Public ReadOnly Property Deviation As ETimeDeviation
        parameters: []
        return:
          type: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
      overload: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.Deviation*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.#ctor(GUPS.AntiCheat.Monitor.Time.ETimeDeviation)
      commentId: M:GUPS.AntiCheat.Monitor.Time.GameTimeStatus.#ctor(GUPS.AntiCheat.Monitor.Time.ETimeDeviation)
      language: CSharp
      name:
        CSharp: GameTimeStatus(ETimeDeviation)
        VB: GameTimeStatus(ETimeDeviation)
      nameWithType:
        CSharp: GameTimeStatus.GameTimeStatus(ETimeDeviation)
        VB: GameTimeStatus.GameTimeStatus(ETimeDeviation)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.GameTimeStatus(GUPS.AntiCheat.Monitor.Time.ETimeDeviation)
        VB: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.GameTimeStatus(GUPS.AntiCheat.Monitor.Time.ETimeDeviation)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Monitor.Time
      source:
        id: .ctor
        path: ''
        startLine: 12933
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Monitor.Time.GameTimeStatus\" data-throw-if-not-resolved=\"false\"></xref> struct with the specified time deviation.\n"
      example: []
      syntax:
        content:
          CSharp: public GameTimeStatus(ETimeDeviation _Deviation)
          VB: Public Sub New(_Deviation As ETimeDeviation)
        parameters:
        - id: _Deviation
          type: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
          description: The time deviation to be associated with the game time status.
      overload: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Monitor.Time.GameTimeStatus: 
    references:
      GUPS.AntiCheat.Monitor.Time.GameTimeStatus: 
- id: GUPS.AntiCheat.Protected
  commentId: N:GUPS.AntiCheat.Protected
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Protected
    VB: GUPS.AntiCheat.Protected
  nameWithType:
    CSharp: GUPS.AntiCheat.Protected
    VB: GUPS.AntiCheat.Protected
  qualifiedName:
    CSharp: GUPS.AntiCheat.Protected
    VB: GUPS.AntiCheat.Protected
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Protected.ProtectedBool
    commentId: T:GUPS.AntiCheat.Protected.ProtectedBool
    language: CSharp
    name:
      CSharp: ProtectedBool
      VB: ProtectedBool
    nameWithType:
      CSharp: ProtectedBool
      VB: ProtectedBool
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedBool
      VB: GUPS.AntiCheat.Protected.ProtectedBool
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedBool
      path: ''
      startLine: 15260
    summary: "\nRepresents a protected boolean, designed to enhance integrity and security by obfuscating its value and incorporating anti-cheat measures.\nIn most cases, this protected boolean can be used as a drop-in replacement for the default boolean type.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedBool
        VB: Public Structure ProtectedBool
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedBool.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedBool.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedBool.HasIntegrity
        VB: ProtectedBool.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedBool.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 15272
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedBool.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedBool.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedBool.OnBeforeSerialize()
        VB: ProtectedBool.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedBool.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 15294
      summary: "\nUnity serialization hook. Ensures the correct values are serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedBool.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedBool.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedBool.OnAfterDeserialize()
        VB: ProtectedBool.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedBool.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 15302
      summary: "\nUnity deserialization hook. Ensures the correct values are deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedBool.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedBool.#ctor(System.Boolean)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.#ctor(System.Boolean)
      language: CSharp
      name:
        CSharp: ProtectedBool(Boolean)
        VB: ProtectedBool(Boolean)
      nameWithType:
        CSharp: ProtectedBool.ProtectedBool(Boolean)
        VB: ProtectedBool.ProtectedBool(Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.ProtectedBool(System.Boolean)
        VB: GUPS.AntiCheat.Protected.ProtectedBool.ProtectedBool(System.Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 15311
      summary: "\nCreates a new protected boolean with the specified initial value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedBool(bool _Value = false)
          VB: Public Sub New(_Value As Boolean = False)
        parameters:
        - id: _Value
          type: System.Boolean
          description: The initial value of the protected boolean.
      overload: GUPS.AntiCheat.Protected.ProtectedBool.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedBool.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedBool.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedBool.Value
        VB: ProtectedBool.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.Value
        VB: GUPS.AntiCheat.Protected.ProtectedBool.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 15327
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Value { get; set; }
          VB: Public Property Value As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedBool.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedBool.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedBool.Obfuscate()
        VB: ProtectedBool.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedBool.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 15378
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedBool.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedBool.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedBool.CheckIntegrity()
        VB: ProtectedBool.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedBool.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 15394
      summary: "\nChecks the integrity of the protected boolean, detecting if an attacher changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected boolean has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedBool.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedBool.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedBool.Dispose()
        VB: ProtectedBool.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedBool.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 15412
      summary: "\nDisposes of the secure and secret values.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedBool.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedBool.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedBool.GetHashCode()
        VB: ProtectedBool.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedBool.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 15422
      summary: "\nGets the hash code of the protected boolean&apos;s true value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedBool.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedBool.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedBool.ToString()
        VB: ProtectedBool.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedBool.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 15431
      summary: "\nConverts the protected boolean to its string representation.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: The string representation of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedBool.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedBool.op_Implicit(System.Boolean)~GUPS.AntiCheat.Protected.ProtectedBool
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.op_Implicit(System.Boolean)~GUPS.AntiCheat.Protected.ProtectedBool
      language: CSharp
      name:
        CSharp: Implicit(Boolean to ProtectedBool)
        VB: Widening(Boolean to ProtectedBool)
      nameWithType:
        CSharp: ProtectedBool.Implicit(Boolean to ProtectedBool)
        VB: ProtectedBool.Widening(Boolean to ProtectedBool)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.Implicit(System.Boolean to GUPS.AntiCheat.Protected.ProtectedBool)
        VB: GUPS.AntiCheat.Protected.ProtectedBool.Widening(System.Boolean to GUPS.AntiCheat.Protected.ProtectedBool)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 15470
      summary: "\nImplicitly converts a boolean value to a protected boolean.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedBool(bool _Value)
          VB: Public Shared Widening Operator CType(_Value As Boolean) As ProtectedBool
        parameters:
        - id: _Value
          type: System.Boolean
          description: The boolean value to convert.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedBool
          description: The corresponding protected boolean.
      overload: GUPS.AntiCheat.Protected.ProtectedBool.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedBool.op_Implicit(GUPS.AntiCheat.Protected.ProtectedBool)~System.Boolean
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.op_Implicit(GUPS.AntiCheat.Protected.ProtectedBool)~System.Boolean
      language: CSharp
      name:
        CSharp: Implicit(ProtectedBool to Boolean)
        VB: Widening(ProtectedBool to Boolean)
      nameWithType:
        CSharp: ProtectedBool.Implicit(ProtectedBool to Boolean)
        VB: ProtectedBool.Widening(ProtectedBool to Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.Implicit(GUPS.AntiCheat.Protected.ProtectedBool to System.Boolean)
        VB: GUPS.AntiCheat.Protected.ProtectedBool.Widening(GUPS.AntiCheat.Protected.ProtectedBool to System.Boolean)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 15480
      summary: "\nImplicitly converts a protected boolean to its boolean value.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator bool (ProtectedBool _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedBool) As Boolean
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedBool
          description: The protected boolean to convert.
        return:
          type: System.Boolean
          description: The boolean value of the protected boolean.
      overload: GUPS.AntiCheat.Protected.ProtectedBool.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedBool.op_Equality(GUPS.AntiCheat.Protected.ProtectedBool,GUPS.AntiCheat.Protected.ProtectedBool)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.op_Equality(GUPS.AntiCheat.Protected.ProtectedBool,GUPS.AntiCheat.Protected.ProtectedBool)
      language: CSharp
      name:
        CSharp: Equality(ProtectedBool, ProtectedBool)
        VB: Equality(ProtectedBool, ProtectedBool)
      nameWithType:
        CSharp: ProtectedBool.Equality(ProtectedBool, ProtectedBool)
        VB: ProtectedBool.Equality(ProtectedBool, ProtectedBool)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.Equality(GUPS.AntiCheat.Protected.ProtectedBool, GUPS.AntiCheat.Protected.ProtectedBool)
        VB: GUPS.AntiCheat.Protected.ProtectedBool.Equality(GUPS.AntiCheat.Protected.ProtectedBool, GUPS.AntiCheat.Protected.ProtectedBool)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 15495
      summary: "\nChecks if two protected booleans are equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedBool v1, ProtectedBool v2)
          VB: Public Shared Operator =(v1 As ProtectedBool, v2 As ProtectedBool) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedBool
          description: The first protected boolean.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedBool
          description: The second protected boolean.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedBool.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedBool.op_Inequality(GUPS.AntiCheat.Protected.ProtectedBool,GUPS.AntiCheat.Protected.ProtectedBool)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.op_Inequality(GUPS.AntiCheat.Protected.ProtectedBool,GUPS.AntiCheat.Protected.ProtectedBool)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedBool, ProtectedBool)
        VB: Inequality(ProtectedBool, ProtectedBool)
      nameWithType:
        CSharp: ProtectedBool.Inequality(ProtectedBool, ProtectedBool)
        VB: ProtectedBool.Inequality(ProtectedBool, ProtectedBool)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.Inequality(GUPS.AntiCheat.Protected.ProtectedBool, GUPS.AntiCheat.Protected.ProtectedBool)
        VB: GUPS.AntiCheat.Protected.ProtectedBool.Inequality(GUPS.AntiCheat.Protected.ProtectedBool, GUPS.AntiCheat.Protected.ProtectedBool)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 15506
      summary: "\nChecks if two protected booleans are not equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedBool v1, ProtectedBool v2)
          VB: Public Shared Operator <>(v1 As ProtectedBool, v2 As ProtectedBool) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedBool
          description: The first protected boolean.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedBool
          description: The second protected boolean.
        return:
          type: System.Boolean
          description: True if the true values are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedBool.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedBool.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedBool.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedBool.Equals(Object)
        VB: ProtectedBool.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedBool.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedBool.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 15516
      summary: "\nChecks if the protected boolean is equal to another object based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected boolean.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedBool.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: GUPS.AntiCheat.Protected.ProtectedDateTime
    commentId: T:GUPS.AntiCheat.Protected.ProtectedDateTime
    language: CSharp
    name:
      CSharp: ProtectedDateTime
      VB: ProtectedDateTime
    nameWithType:
      CSharp: ProtectedDateTime
      VB: ProtectedDateTime
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime
      VB: GUPS.AntiCheat.Protected.ProtectedDateTime
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedDateTime
      path: ''
      startLine: 15547
    summary: "\nRepresents a protected DateTime, designed to enhance integrity and security by obfuscating its value and incorporating anti-cheat measures.\nIn most cases, this protected DateTime can be used as a drop-in replacement for the default DateTime type.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedDateTime
        VB: Public Structure ProtectedDateTime
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedDateTime.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedDateTime.HasIntegrity
        VB: ProtectedDateTime.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 15559
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedDateTime.OnBeforeSerialize()
        VB: ProtectedDateTime.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 15576
      summary: "\nUnity serialization hook. Ensures the correct values are serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedDateTime.OnAfterDeserialize()
        VB: ProtectedDateTime.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 15584
      summary: "\nUnity deserialization hook. Ensures the correct values are deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.#ctor(DateTime)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.#ctor(DateTime)
      language: CSharp
      name:
        CSharp: ProtectedDateTime(DateTime)
        VB: ProtectedDateTime(DateTime)
      nameWithType:
        CSharp: ProtectedDateTime.ProtectedDateTime(DateTime)
        VB: ProtectedDateTime.ProtectedDateTime(DateTime)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.ProtectedDateTime(DateTime)
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.ProtectedDateTime(DateTime)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 15593
      summary: "\nCreates a new protected DateTime with the specified initial value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedDateTime(DateTime _Value)
          VB: Public Sub New(_Value As DateTime)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.DateTime
          description: The initial value of the protected DateTime.
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedDateTime.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedDateTime.Value
        VB: ProtectedDateTime.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.Value
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 15608
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public DateTime Value { get; set; }
          VB: Public Property Value As DateTime
        parameters: []
        return:
          type: GUPS.AntiCheat.DateTime
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedDateTime.Obfuscate()
        VB: ProtectedDateTime.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 15657
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedDateTime.CheckIntegrity()
        VB: ProtectedDateTime.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 15667
      summary: "\nChecks the integrity of the protected DateTime, detecting if an attacher changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected DateTime has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedDateTime.Dispose()
        VB: ProtectedDateTime.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 15685
      summary: "\nDisposes of the secure and secret values.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedDateTime.ToString()
        VB: ProtectedDateTime.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 15694
      summary: "\nConverts the protected DateTime to its string representation.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: The string representation of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedDateTime.GetHashCode()
        VB: ProtectedDateTime.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 15703
      summary: "\nGets the hash code of the protected DateTime&apos;s true value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Implicit(DateTime)~GUPS.AntiCheat.Protected.ProtectedDateTime
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.op_Implicit(DateTime)~GUPS.AntiCheat.Protected.ProtectedDateTime
      language: CSharp
      name:
        CSharp: Implicit(DateTime to ProtectedDateTime)
        VB: Widening(DateTime to ProtectedDateTime)
      nameWithType:
        CSharp: ProtectedDateTime.Implicit(DateTime to ProtectedDateTime)
        VB: ProtectedDateTime.Widening(DateTime to ProtectedDateTime)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.Implicit(DateTime to GUPS.AntiCheat.Protected.ProtectedDateTime)
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.Widening(DateTime to GUPS.AntiCheat.Protected.ProtectedDateTime)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 15715
      summary: "\nImplicitly converts a DateTime value to a protected DateTime.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDateTime(DateTime _Value)
          VB: Public Shared Widening Operator CType(_Value As DateTime) As ProtectedDateTime
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.DateTime
          description: The DateTime value to convert.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDateTime
          description: The corresponding protected DateTime.
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDateTime)~DateTime
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDateTime)~DateTime
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDateTime to DateTime)
        VB: Widening(ProtectedDateTime to DateTime)
      nameWithType:
        CSharp: ProtectedDateTime.Implicit(ProtectedDateTime to DateTime)
        VB: ProtectedDateTime.Widening(ProtectedDateTime to DateTime)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.Implicit(GUPS.AntiCheat.Protected.ProtectedDateTime to DateTime)
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.Widening(GUPS.AntiCheat.Protected.ProtectedDateTime to DateTime)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 15725
      summary: "\nImplicitly converts a protected DateTime to its DateTime value.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator DateTime(ProtectedDateTime _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDateTime) As DateTime
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDateTime
          description: The protected DateTime to convert.
        return:
          type: GUPS.AntiCheat.DateTime
          description: The DateTime value of the protected DateTime.
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Equality(GUPS.AntiCheat.Protected.ProtectedDateTime,GUPS.AntiCheat.Protected.ProtectedDateTime)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.op_Equality(GUPS.AntiCheat.Protected.ProtectedDateTime,GUPS.AntiCheat.Protected.ProtectedDateTime)
      language: CSharp
      name:
        CSharp: Equality(ProtectedDateTime, ProtectedDateTime)
        VB: Equality(ProtectedDateTime, ProtectedDateTime)
      nameWithType:
        CSharp: ProtectedDateTime.Equality(ProtectedDateTime, ProtectedDateTime)
        VB: ProtectedDateTime.Equality(ProtectedDateTime, ProtectedDateTime)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.Equality(GUPS.AntiCheat.Protected.ProtectedDateTime, GUPS.AntiCheat.Protected.ProtectedDateTime)
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.Equality(GUPS.AntiCheat.Protected.ProtectedDateTime, GUPS.AntiCheat.Protected.ProtectedDateTime)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 15740
      summary: "\nChecks if two protected DateTimes are equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedDateTime v1, ProtectedDateTime v2)
          VB: Public Shared Operator =(v1 As ProtectedDateTime, v2 As ProtectedDateTime) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDateTime
          description: The first protected DateTime.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDateTime
          description: The second protected DateTime.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Inequality(GUPS.AntiCheat.Protected.ProtectedDateTime,GUPS.AntiCheat.Protected.ProtectedDateTime)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.op_Inequality(GUPS.AntiCheat.Protected.ProtectedDateTime,GUPS.AntiCheat.Protected.ProtectedDateTime)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedDateTime, ProtectedDateTime)
        VB: Inequality(ProtectedDateTime, ProtectedDateTime)
      nameWithType:
        CSharp: ProtectedDateTime.Inequality(ProtectedDateTime, ProtectedDateTime)
        VB: ProtectedDateTime.Inequality(ProtectedDateTime, ProtectedDateTime)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.Inequality(GUPS.AntiCheat.Protected.ProtectedDateTime, GUPS.AntiCheat.Protected.ProtectedDateTime)
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.Inequality(GUPS.AntiCheat.Protected.ProtectedDateTime, GUPS.AntiCheat.Protected.ProtectedDateTime)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 15751
      summary: "\nChecks if two protected DateTimes are not equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedDateTime v1, ProtectedDateTime v2)
          VB: Public Shared Operator <>(v1 As ProtectedDateTime, v2 As ProtectedDateTime) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDateTime
          description: The first protected DateTime.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDateTime
          description: The second protected DateTime.
        return:
          type: System.Boolean
          description: True if the true values are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedDateTime.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDateTime.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedDateTime.Equals(Object)
        VB: ProtectedDateTime.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDateTime.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedDateTime.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 15761
      summary: "\nChecks if the protected DateTime is equal to another object based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected DateTime.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDateTime.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: GUPS.AntiCheat.Protected.ProtectedDecimal
    commentId: T:GUPS.AntiCheat.Protected.ProtectedDecimal
    language: CSharp
    name:
      CSharp: ProtectedDecimal
      VB: ProtectedDecimal
    nameWithType:
      CSharp: ProtectedDecimal
      VB: ProtectedDecimal
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal
      VB: GUPS.AntiCheat.Protected.ProtectedDecimal
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedDecimal
      path: ''
      startLine: 15792
    summary: "\nRepresents a protected decimal designed to enhance data integrity and security by obfuscating its value and incorporating anti-cheat measures.\nIn most cases, this protected decimal can be used as a drop-in replacement for the default decimal type.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedDecimal
        VB: Public Structure ProtectedDecimal
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedDecimal.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedDecimal.HasIntegrity
        VB: ProtectedDecimal.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 15804
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedDecimal.OnBeforeSerialize()
        VB: ProtectedDecimal.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 15821
      summary: "\nUnity serialization hook. Ensures the correct values will be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedDecimal.OnAfterDeserialize()
        VB: ProtectedDecimal.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 15829
      summary: "\nUnity deserialization hook. Ensures the correct values will be deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.#ctor(System.Decimal)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.#ctor(System.Decimal)
      language: CSharp
      name:
        CSharp: ProtectedDecimal(Decimal)
        VB: ProtectedDecimal(Decimal)
      nameWithType:
        CSharp: ProtectedDecimal.ProtectedDecimal(Decimal)
        VB: ProtectedDecimal.ProtectedDecimal(Decimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.ProtectedDecimal(System.Decimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.ProtectedDecimal(System.Decimal)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 15838
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> struct with the specified initial value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedDecimal(decimal _Value = 0M)
          VB: Public Sub New(_Value As Decimal = 0D)
        parameters:
        - id: _Value
          type: System.Decimal
          description: The initial value of the protected decimal.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedDecimal.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedDecimal.Value
        VB: ProtectedDecimal.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Value
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 15852
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public decimal Value { get; set; }
          VB: Public Property Value As Decimal
        parameters: []
        return:
          type: System.Decimal
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedDecimal.Obfuscate()
        VB: ProtectedDecimal.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 15902
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedDecimal.CheckIntegrity()
        VB: ProtectedDecimal.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 15915
      summary: "\nChecks the integrity of the protected value, detecting if an attacker changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedDecimal.Dispose()
        VB: ProtectedDecimal.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 15933
      summary: "\nDisposes of the secured values array.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedDecimal.ToString()
        VB: ProtectedDecimal.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 15942
      summary: "\nReturns a string representation of the protected decimal&apos;s true value.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: The string representation of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedDecimal.GetHashCode()
        VB: ProtectedDecimal.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 15951
      summary: "\nGets the hash code of the protected decimal&apos;s true value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(System.Decimal)~GUPS.AntiCheat.Protected.ProtectedDecimal
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(System.Decimal)~GUPS.AntiCheat.Protected.ProtectedDecimal
      language: CSharp
      name:
        CSharp: Implicit(Decimal to ProtectedDecimal)
        VB: Widening(Decimal to ProtectedDecimal)
      nameWithType:
        CSharp: ProtectedDecimal.Implicit(Decimal to ProtectedDecimal)
        VB: ProtectedDecimal.Widening(Decimal to ProtectedDecimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit(System.Decimal to GUPS.AntiCheat.Protected.ProtectedDecimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening(System.Decimal to GUPS.AntiCheat.Protected.ProtectedDecimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 15963
      summary: "\nImplicitly converts a decimal to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDecimal(decimal _Value)
          VB: Public Shared Widening Operator CType(_Value As Decimal) As ProtectedDecimal
        parameters:
        - id: _Value
          type: System.Decimal
          description: The decimal value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> with the specified decimal value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal)~System.Decimal
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal)~System.Decimal
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDecimal to Decimal)
        VB: Widening(ProtectedDecimal to Decimal)
      nameWithType:
        CSharp: ProtectedDecimal.Implicit(ProtectedDecimal to Decimal)
        VB: ProtectedDecimal.Widening(ProtectedDecimal to Decimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal to System.Decimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening(GUPS.AntiCheat.Protected.ProtectedDecimal to System.Decimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 15973
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> to a decimal.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator decimal (ProtectedDecimal _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDecimal) As Decimal
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> value to be converted.
        return:
          type: System.Decimal
          description: The decimal value of the specified <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref>.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal)~GUPS.AntiCheat.Protected.ProtectedDouble
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal)~GUPS.AntiCheat.Protected.ProtectedDouble
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDecimal to ProtectedDouble)
        VB: Widening(ProtectedDecimal to ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDecimal.Implicit(ProtectedDecimal to ProtectedDouble)
        VB: ProtectedDecimal.Widening(ProtectedDecimal to ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal to GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening(GUPS.AntiCheat.Protected.ProtectedDecimal to GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 15983
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDouble(ProtectedDecimal _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDecimal) As ProtectedDouble
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDouble)~GUPS.AntiCheat.Protected.ProtectedDecimal
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDouble)~GUPS.AntiCheat.Protected.ProtectedDecimal
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDouble to ProtectedDecimal)
        VB: Widening(ProtectedDouble to ProtectedDecimal)
      nameWithType:
        CSharp: ProtectedDecimal.Implicit(ProtectedDouble to ProtectedDecimal)
        VB: ProtectedDecimal.Widening(ProtectedDouble to ProtectedDecimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit(GUPS.AntiCheat.Protected.ProtectedDouble to GUPS.AntiCheat.Protected.ProtectedDecimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening(GUPS.AntiCheat.Protected.ProtectedDouble to GUPS.AntiCheat.Protected.ProtectedDecimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 15993
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDecimal(ProtectedDouble _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDouble) As ProtectedDecimal
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal)~GUPS.AntiCheat.Protected.ProtectedInt16
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal)~GUPS.AntiCheat.Protected.ProtectedInt16
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDecimal to ProtectedInt16)
        VB: Widening(ProtectedDecimal to ProtectedInt16)
      nameWithType:
        CSharp: ProtectedDecimal.Implicit(ProtectedDecimal to ProtectedInt16)
        VB: ProtectedDecimal.Widening(ProtectedDecimal to ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal to GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening(GUPS.AntiCheat.Protected.ProtectedDecimal to GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16003
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedInt16\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedInt16(ProtectedDecimal _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDecimal) As ProtectedInt16
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedInt16" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
        GUPS.AntiCheat.Protected.ProtectedInt16: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt16)~GUPS.AntiCheat.Protected.ProtectedDecimal
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt16)~GUPS.AntiCheat.Protected.ProtectedDecimal
      language: CSharp
      name:
        CSharp: Implicit(ProtectedInt16 to ProtectedDecimal)
        VB: Widening(ProtectedInt16 to ProtectedDecimal)
      nameWithType:
        CSharp: ProtectedDecimal.Implicit(ProtectedInt16 to ProtectedDecimal)
        VB: ProtectedDecimal.Widening(ProtectedInt16 to ProtectedDecimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit(GUPS.AntiCheat.Protected.ProtectedInt16 to GUPS.AntiCheat.Protected.ProtectedDecimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening(GUPS.AntiCheat.Protected.ProtectedInt16 to GUPS.AntiCheat.Protected.ProtectedDecimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16013
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedInt16\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDecimal(ProtectedInt16 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedInt16) As ProtectedDecimal
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedInt16" data-throw-if-not-resolved="false"></xref> value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedInt16: 
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal)~GUPS.AntiCheat.Protected.ProtectedInt32
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal)~GUPS.AntiCheat.Protected.ProtectedInt32
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDecimal to ProtectedInt32)
        VB: Widening(ProtectedDecimal to ProtectedInt32)
      nameWithType:
        CSharp: ProtectedDecimal.Implicit(ProtectedDecimal to ProtectedInt32)
        VB: ProtectedDecimal.Widening(ProtectedDecimal to ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal to GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening(GUPS.AntiCheat.Protected.ProtectedDecimal to GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16023
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedInt32\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedInt32(ProtectedDecimal _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDecimal) As ProtectedInt32
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedInt32" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
        GUPS.AntiCheat.Protected.ProtectedInt32: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt32)~GUPS.AntiCheat.Protected.ProtectedDecimal
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt32)~GUPS.AntiCheat.Protected.ProtectedDecimal
      language: CSharp
      name:
        CSharp: Implicit(ProtectedInt32 to ProtectedDecimal)
        VB: Widening(ProtectedInt32 to ProtectedDecimal)
      nameWithType:
        CSharp: ProtectedDecimal.Implicit(ProtectedInt32 to ProtectedDecimal)
        VB: ProtectedDecimal.Widening(ProtectedInt32 to ProtectedDecimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit(GUPS.AntiCheat.Protected.ProtectedInt32 to GUPS.AntiCheat.Protected.ProtectedDecimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening(GUPS.AntiCheat.Protected.ProtectedInt32 to GUPS.AntiCheat.Protected.ProtectedDecimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16033
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedInt32\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDecimal(ProtectedInt32 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedInt32) As ProtectedDecimal
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedInt32" data-throw-if-not-resolved="false"></xref> value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedInt32: 
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal)~GUPS.AntiCheat.Protected.ProtectedInt64
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal)~GUPS.AntiCheat.Protected.ProtectedInt64
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDecimal to ProtectedInt64)
        VB: Widening(ProtectedDecimal to ProtectedInt64)
      nameWithType:
        CSharp: ProtectedDecimal.Implicit(ProtectedDecimal to ProtectedInt64)
        VB: ProtectedDecimal.Widening(ProtectedDecimal to ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal to GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening(GUPS.AntiCheat.Protected.ProtectedDecimal to GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16043
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedInt64\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedInt64(ProtectedDecimal _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDecimal) As ProtectedInt64
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedInt64" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
        GUPS.AntiCheat.Protected.ProtectedInt64: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt64)~GUPS.AntiCheat.Protected.ProtectedDecimal
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt64)~GUPS.AntiCheat.Protected.ProtectedDecimal
      language: CSharp
      name:
        CSharp: Implicit(ProtectedInt64 to ProtectedDecimal)
        VB: Widening(ProtectedInt64 to ProtectedDecimal)
      nameWithType:
        CSharp: ProtectedDecimal.Implicit(ProtectedInt64 to ProtectedDecimal)
        VB: ProtectedDecimal.Widening(ProtectedInt64 to ProtectedDecimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit(GUPS.AntiCheat.Protected.ProtectedInt64 to GUPS.AntiCheat.Protected.ProtectedDecimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening(GUPS.AntiCheat.Protected.ProtectedInt64 to GUPS.AntiCheat.Protected.ProtectedDecimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16053
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedInt64\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDecimal(ProtectedInt64 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedInt64) As ProtectedDecimal
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedInt64" data-throw-if-not-resolved="false"></xref> value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedInt64: 
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal)~GUPS.AntiCheat.Protected.ProtectedFloat
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal)~GUPS.AntiCheat.Protected.ProtectedFloat
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDecimal to ProtectedFloat)
        VB: Widening(ProtectedDecimal to ProtectedFloat)
      nameWithType:
        CSharp: ProtectedDecimal.Implicit(ProtectedDecimal to ProtectedFloat)
        VB: ProtectedDecimal.Widening(ProtectedDecimal to ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit(GUPS.AntiCheat.Protected.ProtectedDecimal to GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening(GUPS.AntiCheat.Protected.ProtectedDecimal to GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16063
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedFloat\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedFloat(ProtectedDecimal _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDecimal) As ProtectedFloat
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedFloat" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
        GUPS.AntiCheat.Protected.ProtectedFloat: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedFloat)~GUPS.AntiCheat.Protected.ProtectedDecimal
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit(GUPS.AntiCheat.Protected.ProtectedFloat)~GUPS.AntiCheat.Protected.ProtectedDecimal
      language: CSharp
      name:
        CSharp: Implicit(ProtectedFloat to ProtectedDecimal)
        VB: Widening(ProtectedFloat to ProtectedDecimal)
      nameWithType:
        CSharp: ProtectedDecimal.Implicit(ProtectedFloat to ProtectedDecimal)
        VB: ProtectedDecimal.Widening(ProtectedFloat to ProtectedDecimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit(GUPS.AntiCheat.Protected.ProtectedFloat to GUPS.AntiCheat.Protected.ProtectedDecimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening(GUPS.AntiCheat.Protected.ProtectedFloat to GUPS.AntiCheat.Protected.ProtectedDecimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16073
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedFloat\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDecimal(ProtectedFloat _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedFloat) As ProtectedDecimal
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedFloat" data-throw-if-not-resolved="false"></xref> value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedFloat: 
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Equality(GUPS.AntiCheat.Protected.ProtectedDecimal,GUPS.AntiCheat.Protected.ProtectedDecimal)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Equality(GUPS.AntiCheat.Protected.ProtectedDecimal,GUPS.AntiCheat.Protected.ProtectedDecimal)
      language: CSharp
      name:
        CSharp: Equality(ProtectedDecimal, ProtectedDecimal)
        VB: Equality(ProtectedDecimal, ProtectedDecimal)
      nameWithType:
        CSharp: ProtectedDecimal.Equality(ProtectedDecimal, ProtectedDecimal)
        VB: ProtectedDecimal.Equality(ProtectedDecimal, ProtectedDecimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Equality(GUPS.AntiCheat.Protected.ProtectedDecimal, GUPS.AntiCheat.Protected.ProtectedDecimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Equality(GUPS.AntiCheat.Protected.ProtectedDecimal, GUPS.AntiCheat.Protected.ProtectedDecimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 16088
      summary: "\nChecks if two <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> instances are equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedDecimal v1, ProtectedDecimal v2)
          VB: Public Shared Operator =(v1 As ProtectedDecimal, v2 As ProtectedDecimal) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: System.Boolean
          description: True if the values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Inequality(GUPS.AntiCheat.Protected.ProtectedDecimal,GUPS.AntiCheat.Protected.ProtectedDecimal)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Inequality(GUPS.AntiCheat.Protected.ProtectedDecimal,GUPS.AntiCheat.Protected.ProtectedDecimal)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedDecimal, ProtectedDecimal)
        VB: Inequality(ProtectedDecimal, ProtectedDecimal)
      nameWithType:
        CSharp: ProtectedDecimal.Inequality(ProtectedDecimal, ProtectedDecimal)
        VB: ProtectedDecimal.Inequality(ProtectedDecimal, ProtectedDecimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Inequality(GUPS.AntiCheat.Protected.ProtectedDecimal, GUPS.AntiCheat.Protected.ProtectedDecimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Inequality(GUPS.AntiCheat.Protected.ProtectedDecimal, GUPS.AntiCheat.Protected.ProtectedDecimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 16099
      summary: "\nChecks if two <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> instances are not equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedDecimal v1, ProtectedDecimal v2)
          VB: Public Shared Operator <>(v1 As ProtectedDecimal, v2 As ProtectedDecimal) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: System.Boolean
          description: True if the values are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedDecimal.Equals(Object)
        VB: ProtectedDecimal.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 16109
      summary: "\nChecks if the current <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> is equal to the specified object.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the current instance.
        return:
          type: System.Boolean
          description: True if the object is a <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> and has the same value; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThan(GUPS.AntiCheat.Protected.ProtectedDecimal,GUPS.AntiCheat.Protected.ProtectedDecimal)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThan(GUPS.AntiCheat.Protected.ProtectedDecimal,GUPS.AntiCheat.Protected.ProtectedDecimal)
      language: CSharp
      name:
        CSharp: LessThan(ProtectedDecimal, ProtectedDecimal)
        VB: LessThan(ProtectedDecimal, ProtectedDecimal)
      nameWithType:
        CSharp: ProtectedDecimal.LessThan(ProtectedDecimal, ProtectedDecimal)
        VB: ProtectedDecimal.LessThan(ProtectedDecimal, ProtectedDecimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.LessThan(GUPS.AntiCheat.Protected.ProtectedDecimal, GUPS.AntiCheat.Protected.ProtectedDecimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.LessThan(GUPS.AntiCheat.Protected.ProtectedDecimal, GUPS.AntiCheat.Protected.ProtectedDecimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThan
        path: ''
        startLine: 16124
      summary: "\nChecks if the value of the current <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> is less than the value of another.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <(ProtectedDecimal v1, ProtectedDecimal v2)
          VB: Public Shared Operator <(v1 As ProtectedDecimal, v2 As ProtectedDecimal) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: System.Boolean
          description: True if the value of the first instance is less than the value of the second instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDecimal,GUPS.AntiCheat.Protected.ProtectedDecimal)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDecimal,GUPS.AntiCheat.Protected.ProtectedDecimal)
      language: CSharp
      name:
        CSharp: LessThanOrEqual(ProtectedDecimal, ProtectedDecimal)
        VB: LessThanOrEqual(ProtectedDecimal, ProtectedDecimal)
      nameWithType:
        CSharp: ProtectedDecimal.LessThanOrEqual(ProtectedDecimal, ProtectedDecimal)
        VB: ProtectedDecimal.LessThanOrEqual(ProtectedDecimal, ProtectedDecimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDecimal, GUPS.AntiCheat.Protected.ProtectedDecimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDecimal, GUPS.AntiCheat.Protected.ProtectedDecimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThanOrEqual
        path: ''
        startLine: 16135
      summary: "\nChecks if the value of the current <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> is less than or equal to the value of another.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <=(ProtectedDecimal v1, ProtectedDecimal v2)
          VB: Public Shared Operator <=(v1 As ProtectedDecimal, v2 As ProtectedDecimal) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: System.Boolean
          description: True if the value of the first instance is less than or equal to the value of the second instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedDecimal,GUPS.AntiCheat.Protected.ProtectedDecimal)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedDecimal,GUPS.AntiCheat.Protected.ProtectedDecimal)
      language: CSharp
      name:
        CSharp: GreaterThan(ProtectedDecimal, ProtectedDecimal)
        VB: GreaterThan(ProtectedDecimal, ProtectedDecimal)
      nameWithType:
        CSharp: ProtectedDecimal.GreaterThan(ProtectedDecimal, ProtectedDecimal)
        VB: ProtectedDecimal.GreaterThan(ProtectedDecimal, ProtectedDecimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.GreaterThan(GUPS.AntiCheat.Protected.ProtectedDecimal, GUPS.AntiCheat.Protected.ProtectedDecimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.GreaterThan(GUPS.AntiCheat.Protected.ProtectedDecimal, GUPS.AntiCheat.Protected.ProtectedDecimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThan
        path: ''
        startLine: 16146
      summary: "\nChecks if the value of the current <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> is greater than the value of another.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator>(ProtectedDecimal v1, ProtectedDecimal v2)
          VB: Public Shared Operator>(v1 As ProtectedDecimal, v2 As ProtectedDecimal) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: System.Boolean
          description: True if the value of the first instance is greater than the value of the second instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
    - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDecimal,GUPS.AntiCheat.Protected.ProtectedDecimal)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDecimal,GUPS.AntiCheat.Protected.ProtectedDecimal)
      language: CSharp
      name:
        CSharp: GreaterThanOrEqual(ProtectedDecimal, ProtectedDecimal)
        VB: GreaterThanOrEqual(ProtectedDecimal, ProtectedDecimal)
      nameWithType:
        CSharp: ProtectedDecimal.GreaterThanOrEqual(ProtectedDecimal, ProtectedDecimal)
        VB: ProtectedDecimal.GreaterThanOrEqual(ProtectedDecimal, ProtectedDecimal)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDecimal.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDecimal, GUPS.AntiCheat.Protected.ProtectedDecimal)
        VB: GUPS.AntiCheat.Protected.ProtectedDecimal.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDecimal, GUPS.AntiCheat.Protected.ProtectedDecimal)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThanOrEqual
        path: ''
        startLine: 16157
      summary: "\nChecks if the value of the current <xref href=\"GUPS.AntiCheat.Protected.ProtectedDecimal\" data-throw-if-not-resolved=\"false\"></xref> is greater than or equal to the value of another.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator >=(ProtectedDecimal v1, ProtectedDecimal v2)
          VB: Public Shared Operator >=(v1 As ProtectedDecimal, v2 As ProtectedDecimal) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDecimal
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDecimal" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: System.Boolean
          description: True if the value of the first instance is greater than or equal to the value of the second instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDecimal: 
  - id: GUPS.AntiCheat.Protected.ProtectedDouble
    commentId: T:GUPS.AntiCheat.Protected.ProtectedDouble
    language: CSharp
    name:
      CSharp: ProtectedDouble
      VB: ProtectedDouble
    nameWithType:
      CSharp: ProtectedDouble
      VB: ProtectedDouble
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedDouble
      VB: GUPS.AntiCheat.Protected.ProtectedDouble
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedDouble
      path: ''
      startLine: 16184
    summary: "\nRepresents a protected double value that is encrypted and includes mechanisms to maintain integrity.\nIn most scenarios, this type can be used as a drop-in replacement for the default double type.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedDouble
        VB: Public Structure ProtectedDouble
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedDouble.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedDouble.HasIntegrity
        VB: ProtectedDouble.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 16196
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedDouble.OnBeforeSerialize()
        VB: ProtectedDouble.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 16223
      summary: "\nUnity serialization hook. Ensures the correct values are serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedDouble.OnAfterDeserialize()
        VB: ProtectedDouble.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 16231
      summary: "\nUnity deserialization hook. Ensures the correct values are deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.#ctor(System.Double)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.#ctor(System.Double)
      language: CSharp
      name:
        CSharp: ProtectedDouble(Double)
        VB: ProtectedDouble(Double)
      nameWithType:
        CSharp: ProtectedDouble.ProtectedDouble(Double)
        VB: ProtectedDouble.ProtectedDouble(Double)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.ProtectedDouble(System.Double)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.ProtectedDouble(System.Double)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 16240
      summary: "\nCreates a new protected double with the specified value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedDouble(double value = 0)
          VB: Public Sub New(value As Double = 0)
        parameters:
        - id: value
          type: System.Double
          description: The initial value of the protected double.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedDouble.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedDouble.Value
        VB: ProtectedDouble.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Value
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 16265
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public double Value { get; set; }
          VB: Public Property Value As Double
        parameters: []
        return:
          type: System.Double
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedDouble.Obfuscate()
        VB: ProtectedDouble.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 16320
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedDouble.CheckIntegrity()
        VB: ProtectedDouble.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 16336
      summary: "\nChecks the integrity of the protected value, detecting if an attacker changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedDouble.Dispose()
        VB: ProtectedDouble.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 16354
      summary: "\nReleases the resources used by the <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedDouble.ToString()
        VB: ProtectedDouble.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 16365
      summary: "\nReturns a string that represents the current <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: A string representation of the protected double value.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedDouble.GetHashCode()
        VB: ProtectedDouble.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 16374
      summary: "\nServes as a hash function for a particular type.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: A hash code for the current <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref>.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(System.Double)~GUPS.AntiCheat.Protected.ProtectedDouble
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(System.Double)~GUPS.AntiCheat.Protected.ProtectedDouble
      language: CSharp
      name:
        CSharp: Implicit(Double to ProtectedDouble)
        VB: Widening(Double to ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.Implicit(Double to ProtectedDouble)
        VB: ProtectedDouble.Widening(Double to ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Implicit(System.Double to GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Widening(System.Double to GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16386
      summary: "\nImplicitly converts a double to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDouble(double _Value)
          VB: Public Shared Widening Operator CType(_Value As Double) As ProtectedDouble
        parameters:
        - id: _Value
          type: System.Double
          description: The double value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDouble)~System.Double
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDouble)~System.Double
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDouble to Double)
        VB: Widening(ProtectedDouble to Double)
      nameWithType:
        CSharp: ProtectedDouble.Implicit(ProtectedDouble to Double)
        VB: ProtectedDouble.Widening(ProtectedDouble to Double)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Implicit(GUPS.AntiCheat.Protected.ProtectedDouble to System.Double)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Widening(GUPS.AntiCheat.Protected.ProtectedDouble to System.Double)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16396
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> to a double.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator double (ProtectedDouble _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDouble) As Double
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> to be converted.
        return:
          type: System.Double
          description: The unencrypted double value.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDouble)~GUPS.AntiCheat.Protected.ProtectedInt16
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDouble)~GUPS.AntiCheat.Protected.ProtectedInt16
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDouble to ProtectedInt16)
        VB: Widening(ProtectedDouble to ProtectedInt16)
      nameWithType:
        CSharp: ProtectedDouble.Implicit(ProtectedDouble to ProtectedInt16)
        VB: ProtectedDouble.Widening(ProtectedDouble to ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Implicit(GUPS.AntiCheat.Protected.ProtectedDouble to GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Widening(GUPS.AntiCheat.Protected.ProtectedDouble to GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16406
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedInt16\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedInt16(ProtectedDouble _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDouble) As ProtectedInt16
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedInt16" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
        GUPS.AntiCheat.Protected.ProtectedInt16: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt16)~GUPS.AntiCheat.Protected.ProtectedDouble
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt16)~GUPS.AntiCheat.Protected.ProtectedDouble
      language: CSharp
      name:
        CSharp: Implicit(ProtectedInt16 to ProtectedDouble)
        VB: Widening(ProtectedInt16 to ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.Implicit(ProtectedInt16 to ProtectedDouble)
        VB: ProtectedDouble.Widening(ProtectedInt16 to ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Implicit(GUPS.AntiCheat.Protected.ProtectedInt16 to GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Widening(GUPS.AntiCheat.Protected.ProtectedInt16 to GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16416
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedInt16\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDouble(ProtectedInt16 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedInt16) As ProtectedDouble
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedInt16" data-throw-if-not-resolved="false"></xref> to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedInt16: 
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDouble)~GUPS.AntiCheat.Protected.ProtectedInt32
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDouble)~GUPS.AntiCheat.Protected.ProtectedInt32
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDouble to ProtectedInt32)
        VB: Widening(ProtectedDouble to ProtectedInt32)
      nameWithType:
        CSharp: ProtectedDouble.Implicit(ProtectedDouble to ProtectedInt32)
        VB: ProtectedDouble.Widening(ProtectedDouble to ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Implicit(GUPS.AntiCheat.Protected.ProtectedDouble to GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Widening(GUPS.AntiCheat.Protected.ProtectedDouble to GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16426
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedInt32\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedInt32(ProtectedDouble _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDouble) As ProtectedInt32
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedInt32" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
        GUPS.AntiCheat.Protected.ProtectedInt32: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt32)~GUPS.AntiCheat.Protected.ProtectedDouble
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt32)~GUPS.AntiCheat.Protected.ProtectedDouble
      language: CSharp
      name:
        CSharp: Implicit(ProtectedInt32 to ProtectedDouble)
        VB: Widening(ProtectedInt32 to ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.Implicit(ProtectedInt32 to ProtectedDouble)
        VB: ProtectedDouble.Widening(ProtectedInt32 to ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Implicit(GUPS.AntiCheat.Protected.ProtectedInt32 to GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Widening(GUPS.AntiCheat.Protected.ProtectedInt32 to GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16436
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedInt32\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDouble(ProtectedInt32 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedInt32) As ProtectedDouble
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedInt32" data-throw-if-not-resolved="false"></xref> to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedInt32: 
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDouble)~GUPS.AntiCheat.Protected.ProtectedInt64
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDouble)~GUPS.AntiCheat.Protected.ProtectedInt64
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDouble to ProtectedInt64)
        VB: Widening(ProtectedDouble to ProtectedInt64)
      nameWithType:
        CSharp: ProtectedDouble.Implicit(ProtectedDouble to ProtectedInt64)
        VB: ProtectedDouble.Widening(ProtectedDouble to ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Implicit(GUPS.AntiCheat.Protected.ProtectedDouble to GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Widening(GUPS.AntiCheat.Protected.ProtectedDouble to GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16446
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedInt64\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedInt64(ProtectedDouble _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDouble) As ProtectedInt64
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedInt64" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
        GUPS.AntiCheat.Protected.ProtectedInt64: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt64)~GUPS.AntiCheat.Protected.ProtectedDouble
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt64)~GUPS.AntiCheat.Protected.ProtectedDouble
      language: CSharp
      name:
        CSharp: Implicit(ProtectedInt64 to ProtectedDouble)
        VB: Widening(ProtectedInt64 to ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.Implicit(ProtectedInt64 to ProtectedDouble)
        VB: ProtectedDouble.Widening(ProtectedInt64 to ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Implicit(GUPS.AntiCheat.Protected.ProtectedInt64 to GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Widening(GUPS.AntiCheat.Protected.ProtectedInt64 to GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16456
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedInt64\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDouble(ProtectedInt64 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedInt64) As ProtectedDouble
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedInt64" data-throw-if-not-resolved="false"></xref> to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedInt64: 
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDouble)~GUPS.AntiCheat.Protected.ProtectedFloat
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedDouble)~GUPS.AntiCheat.Protected.ProtectedFloat
      language: CSharp
      name:
        CSharp: Implicit(ProtectedDouble to ProtectedFloat)
        VB: Widening(ProtectedDouble to ProtectedFloat)
      nameWithType:
        CSharp: ProtectedDouble.Implicit(ProtectedDouble to ProtectedFloat)
        VB: ProtectedDouble.Widening(ProtectedDouble to ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Implicit(GUPS.AntiCheat.Protected.ProtectedDouble to GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Widening(GUPS.AntiCheat.Protected.ProtectedDouble to GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16466
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedFloat\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedFloat(ProtectedDouble _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedDouble) As ProtectedFloat
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedFloat" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
        GUPS.AntiCheat.Protected.ProtectedFloat: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedFloat)~GUPS.AntiCheat.Protected.ProtectedDouble
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit(GUPS.AntiCheat.Protected.ProtectedFloat)~GUPS.AntiCheat.Protected.ProtectedDouble
      language: CSharp
      name:
        CSharp: Implicit(ProtectedFloat to ProtectedDouble)
        VB: Widening(ProtectedFloat to ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.Implicit(ProtectedFloat to ProtectedDouble)
        VB: ProtectedDouble.Widening(ProtectedFloat to ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Implicit(GUPS.AntiCheat.Protected.ProtectedFloat to GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Widening(GUPS.AntiCheat.Protected.ProtectedFloat to GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16476
      summary: "\nImplicitly converts a <xref href=\"GUPS.AntiCheat.Protected.ProtectedFloat\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedDouble(ProtectedFloat _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedFloat) As ProtectedDouble
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The <xref href="GUPS.AntiCheat.Protected.ProtectedFloat" data-throw-if-not-resolved="false"></xref> to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: A new instance of <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedFloat: 
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Addition(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Addition(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      language: CSharp
      name:
        CSharp: Addition(ProtectedDouble, ProtectedDouble)
        VB: Addition(ProtectedDouble, ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.Addition(ProtectedDouble, ProtectedDouble)
        VB: ProtectedDouble.Addition(ProtectedDouble, ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Addition(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Addition(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Addition
        path: ''
        startLine: 16491
      summary: "\nAdds two <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> instances.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedDouble operator +(ProtectedDouble v1, ProtectedDouble v2)
          VB: Public Shared Operator +(v1 As ProtectedDouble, v2 As ProtectedDouble) As ProtectedDouble
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: A new <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance representing the sum of the two values.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      language: CSharp
      name:
        CSharp: Subtraction(ProtectedDouble, ProtectedDouble)
        VB: Subtraction(ProtectedDouble, ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.Subtraction(ProtectedDouble, ProtectedDouble)
        VB: ProtectedDouble.Subtraction(ProtectedDouble, ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Subtraction(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Subtraction(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Subtraction
        path: ''
        startLine: 16502
      summary: "\nSubtracts one <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> instance from another.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedDouble operator -(ProtectedDouble v1, ProtectedDouble v2)
          VB: Public Shared Operator -(v1 As ProtectedDouble, v2 As ProtectedDouble) As ProtectedDouble
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: A new <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance representing the difference of the two values.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Subtraction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Multiply(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Multiply(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      language: CSharp
      name:
        CSharp: Multiply(ProtectedDouble, ProtectedDouble)
        VB: Multiply(ProtectedDouble, ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.Multiply(ProtectedDouble, ProtectedDouble)
        VB: ProtectedDouble.Multiply(ProtectedDouble, ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Multiply(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Multiply(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Multiply
        path: ''
        startLine: 16513
      summary: "\nMultiplies two <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> instances.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedDouble operator *(ProtectedDouble v1, ProtectedDouble v2)
          VB: Public Shared Operator *(v1 As ProtectedDouble, v2 As ProtectedDouble) As ProtectedDouble
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: A new <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance representing the product of the two values.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Multiply*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Division(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Division(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      language: CSharp
      name:
        CSharp: Division(ProtectedDouble, ProtectedDouble)
        VB: Division(ProtectedDouble, ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.Division(ProtectedDouble, ProtectedDouble)
        VB: ProtectedDouble.Division(ProtectedDouble, ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Division(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Division(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Division
        path: ''
        startLine: 16524
      summary: "\nDivides one <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> instance by another.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedDouble operator /(ProtectedDouble v1, ProtectedDouble v2)
          VB: Public Shared Operator /(v1 As ProtectedDouble, v2 As ProtectedDouble) As ProtectedDouble
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The dividend <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The divisor <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: A new <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance representing the quotient of the division.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Division*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Equality(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Equality(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      language: CSharp
      name:
        CSharp: Equality(ProtectedDouble, ProtectedDouble)
        VB: Equality(ProtectedDouble, ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.Equality(ProtectedDouble, ProtectedDouble)
        VB: ProtectedDouble.Equality(ProtectedDouble, ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Equality(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Equality(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 16539
      summary: "\nChecks if two <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> instances are equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedDouble v1, ProtectedDouble v2)
          VB: Public Shared Operator =(v1 As ProtectedDouble, v2 As ProtectedDouble) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: System.Boolean
          description: True if the values of the two instances are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Inequality(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_Inequality(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedDouble, ProtectedDouble)
        VB: Inequality(ProtectedDouble, ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.Inequality(ProtectedDouble, ProtectedDouble)
        VB: ProtectedDouble.Inequality(ProtectedDouble, ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Inequality(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Inequality(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 16550
      summary: "\nChecks if two <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> instances are not equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedDouble v1, ProtectedDouble v2)
          VB: Public Shared Operator <>(v1 As ProtectedDouble, v2 As ProtectedDouble) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: System.Boolean
          description: True if the values of the two instances are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedDouble.Equals(Object)
        VB: ProtectedDouble.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 16560
      summary: "\nDetermines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the current instance.
        return:
          type: System.Boolean
          description: True if the specified object is equal to the current instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
      references:
        System.Object: 
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThan(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThan(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      language: CSharp
      name:
        CSharp: LessThan(ProtectedDouble, ProtectedDouble)
        VB: LessThan(ProtectedDouble, ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.LessThan(ProtectedDouble, ProtectedDouble)
        VB: ProtectedDouble.LessThan(ProtectedDouble, ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.LessThan(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.LessThan(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThan
        path: ''
        startLine: 16575
      summary: "\nCompares two <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> instances for less than.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <(ProtectedDouble v1, ProtectedDouble v2)
          VB: Public Shared Operator <(v1 As ProtectedDouble, v2 As ProtectedDouble) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: System.Boolean
          description: True if the value of the first instance is less than the value of the second instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      language: CSharp
      name:
        CSharp: LessThanOrEqual(ProtectedDouble, ProtectedDouble)
        VB: LessThanOrEqual(ProtectedDouble, ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.LessThanOrEqual(ProtectedDouble, ProtectedDouble)
        VB: ProtectedDouble.LessThanOrEqual(ProtectedDouble, ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThanOrEqual
        path: ''
        startLine: 16586
      summary: "\nCompares two <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> instances for less than or equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <=(ProtectedDouble v1, ProtectedDouble v2)
          VB: Public Shared Operator <=(v1 As ProtectedDouble, v2 As ProtectedDouble) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: System.Boolean
          description: True if the value of the first instance is less than or equal to the value of the second instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      language: CSharp
      name:
        CSharp: GreaterThan(ProtectedDouble, ProtectedDouble)
        VB: GreaterThan(ProtectedDouble, ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.GreaterThan(ProtectedDouble, ProtectedDouble)
        VB: ProtectedDouble.GreaterThan(ProtectedDouble, ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.GreaterThan(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.GreaterThan(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThan
        path: ''
        startLine: 16597
      summary: "\nCompares two <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> instances for greater than.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator>(ProtectedDouble v1, ProtectedDouble v2)
          VB: Public Shared Operator>(v1 As ProtectedDouble, v2 As ProtectedDouble) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: System.Boolean
          description: True if the value of the first instance is greater than the value of the second instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
    - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDouble,GUPS.AntiCheat.Protected.ProtectedDouble)
      language: CSharp
      name:
        CSharp: GreaterThanOrEqual(ProtectedDouble, ProtectedDouble)
        VB: GreaterThanOrEqual(ProtectedDouble, ProtectedDouble)
      nameWithType:
        CSharp: ProtectedDouble.GreaterThanOrEqual(ProtectedDouble, ProtectedDouble)
        VB: ProtectedDouble.GreaterThanOrEqual(ProtectedDouble, ProtectedDouble)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedDouble.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
        VB: GUPS.AntiCheat.Protected.ProtectedDouble.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedDouble, GUPS.AntiCheat.Protected.ProtectedDouble)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThanOrEqual
        path: ''
        startLine: 16608
      summary: "\nCompares two <xref href=\"GUPS.AntiCheat.Protected.ProtectedDouble\" data-throw-if-not-resolved=\"false\"></xref> instances for greater than or equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator >=(ProtectedDouble v1, ProtectedDouble v2)
          VB: Public Shared Operator >=(v1 As ProtectedDouble, v2 As ProtectedDouble) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The first <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedDouble
          description: The second <xref href="GUPS.AntiCheat.Protected.ProtectedDouble" data-throw-if-not-resolved="false"></xref> instance.
        return:
          type: System.Boolean
          description: True if the value of the first instance is greater than or equal to the value of the second instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.ProtectedDouble: 
  - id: GUPS.AntiCheat.Protected.ProtectedFloat
    commentId: T:GUPS.AntiCheat.Protected.ProtectedFloat
    language: CSharp
    name:
      CSharp: ProtectedFloat
      VB: ProtectedFloat
    nameWithType:
      CSharp: ProtectedFloat
      VB: ProtectedFloat
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedFloat
      VB: GUPS.AntiCheat.Protected.ProtectedFloat
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedFloat
      path: ''
      startLine: 16634
    summary: "\nRepresents a protected float. In almost all cases, you can replace your default type with the protected one for added security.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedFloat
        VB: Public Structure ProtectedFloat
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedFloat.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedFloat.HasIntegrity
        VB: ProtectedFloat.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 16646
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedFloat.OnBeforeSerialize()
        VB: ProtectedFloat.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 16673
      summary: "\nUnity serialization hook. So the right values will be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedFloat.OnAfterDeserialize()
        VB: ProtectedFloat.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 16681
      summary: "\nUnity deserialization hook. So the right values will be deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.#ctor(System.Single)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.#ctor(System.Single)
      language: CSharp
      name:
        CSharp: ProtectedFloat(Single)
        VB: ProtectedFloat(Single)
      nameWithType:
        CSharp: ProtectedFloat.ProtectedFloat(Single)
        VB: ProtectedFloat.ProtectedFloat(Single)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.ProtectedFloat(System.Single)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.ProtectedFloat(System.Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 16690
      summary: "\nCreate a new protected float with _Value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedFloat(float value = 0F)
          VB: Public Sub New(value As Single = 0F)
        parameters:
        - id: value
          type: System.Single
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedFloat.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedFloat.Value
        VB: ProtectedFloat.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Value
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 16715
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public float Value { get; set; }
          VB: Public Property Value As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedFloat.Obfuscate()
        VB: ProtectedFloat.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 16770
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedFloat.CheckIntegrity()
        VB: ProtectedFloat.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 16786
      summary: "\nChecks the integrity of the protected value, detecting if an attacker changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedFloat.Dispose()
        VB: ProtectedFloat.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 16804
      summary: "\nDisposes of the resources associated with the protected float.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedFloat.ToString()
        VB: ProtectedFloat.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 16815
      summary: "\nReturns a string representation of the protected float.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: A string representation of the protected float.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedFloat.GetHashCode()
        VB: ProtectedFloat.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 16824
      summary: "\nServes as a hash function for a particular type.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: A hash code for the current <xref href="GUPS.AntiCheat.Protected.ProtectedFloat" data-throw-if-not-resolved="false"></xref>.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
      references:
        GUPS.AntiCheat.Protected.ProtectedFloat: 
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(System.Single)~GUPS.AntiCheat.Protected.ProtectedFloat
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(System.Single)~GUPS.AntiCheat.Protected.ProtectedFloat
      language: CSharp
      name:
        CSharp: Implicit(Single to ProtectedFloat)
        VB: Widening(Single to ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.Implicit(Single to ProtectedFloat)
        VB: ProtectedFloat.Widening(Single to ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Implicit(System.Single to GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Widening(System.Single to GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16863
      summary: "\nImplicitly converts a float to a ProtectedFloat.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedFloat(float _Value)
          VB: Public Shared Widening Operator CType(_Value As Single) As ProtectedFloat
        parameters:
        - id: _Value
          type: System.Single
          description: The float value to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: A new instance of ProtectedFloat with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedFloat)~System.Single
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedFloat)~System.Single
      language: CSharp
      name:
        CSharp: Implicit(ProtectedFloat to Single)
        VB: Widening(ProtectedFloat to Single)
      nameWithType:
        CSharp: ProtectedFloat.Implicit(ProtectedFloat to Single)
        VB: ProtectedFloat.Widening(ProtectedFloat to Single)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Implicit(GUPS.AntiCheat.Protected.ProtectedFloat to System.Single)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Widening(GUPS.AntiCheat.Protected.ProtectedFloat to System.Single)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16873
      summary: "\nImplicitly converts a ProtectedFloat to a float.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator float (ProtectedFloat _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedFloat) As Single
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The ProtectedFloat to be converted.
        return:
          type: System.Single
          description: The unencrypted float value.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedFloat)~GUPS.AntiCheat.Protected.ProtectedInt16
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedFloat)~GUPS.AntiCheat.Protected.ProtectedInt16
      language: CSharp
      name:
        CSharp: Implicit(ProtectedFloat to ProtectedInt16)
        VB: Widening(ProtectedFloat to ProtectedInt16)
      nameWithType:
        CSharp: ProtectedFloat.Implicit(ProtectedFloat to ProtectedInt16)
        VB: ProtectedFloat.Widening(ProtectedFloat to ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Implicit(GUPS.AntiCheat.Protected.ProtectedFloat to GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Widening(GUPS.AntiCheat.Protected.ProtectedFloat to GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16883
      summary: "\nImplicitly converts a ProtectedFloat to a ProtectedInt16.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedInt16(ProtectedFloat _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedFloat) As ProtectedInt16
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The ProtectedFloat to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: A new instance of ProtectedInt16 with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt16)~GUPS.AntiCheat.Protected.ProtectedFloat
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt16)~GUPS.AntiCheat.Protected.ProtectedFloat
      language: CSharp
      name:
        CSharp: Implicit(ProtectedInt16 to ProtectedFloat)
        VB: Widening(ProtectedInt16 to ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.Implicit(ProtectedInt16 to ProtectedFloat)
        VB: ProtectedFloat.Widening(ProtectedInt16 to ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Implicit(GUPS.AntiCheat.Protected.ProtectedInt16 to GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Widening(GUPS.AntiCheat.Protected.ProtectedInt16 to GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16893
      summary: "\nImplicitly converts a ProtectedInt16 to a ProtectedFloat.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedFloat(ProtectedInt16 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedInt16) As ProtectedFloat
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The ProtectedInt16 to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: A new instance of ProtectedFloat with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedFloat)~GUPS.AntiCheat.Protected.ProtectedInt32
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedFloat)~GUPS.AntiCheat.Protected.ProtectedInt32
      language: CSharp
      name:
        CSharp: Implicit(ProtectedFloat to ProtectedInt32)
        VB: Widening(ProtectedFloat to ProtectedInt32)
      nameWithType:
        CSharp: ProtectedFloat.Implicit(ProtectedFloat to ProtectedInt32)
        VB: ProtectedFloat.Widening(ProtectedFloat to ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Implicit(GUPS.AntiCheat.Protected.ProtectedFloat to GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Widening(GUPS.AntiCheat.Protected.ProtectedFloat to GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16903
      summary: "\nImplicitly converts a ProtectedFloat to a ProtectedInt32.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedInt32(ProtectedFloat _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedFloat) As ProtectedInt32
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The ProtectedFloat to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: A new instance of ProtectedInt32 with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt32)~GUPS.AntiCheat.Protected.ProtectedFloat
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt32)~GUPS.AntiCheat.Protected.ProtectedFloat
      language: CSharp
      name:
        CSharp: Implicit(ProtectedInt32 to ProtectedFloat)
        VB: Widening(ProtectedInt32 to ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.Implicit(ProtectedInt32 to ProtectedFloat)
        VB: ProtectedFloat.Widening(ProtectedInt32 to ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Implicit(GUPS.AntiCheat.Protected.ProtectedInt32 to GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Widening(GUPS.AntiCheat.Protected.ProtectedInt32 to GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16913
      summary: "\nImplicitly converts a ProtectedInt32 to a ProtectedFloat.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedFloat(ProtectedInt32 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedInt32) As ProtectedFloat
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The ProtectedInt32 to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: A new instance of ProtectedFloat with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedFloat)~GUPS.AntiCheat.Protected.ProtectedInt64
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedFloat)~GUPS.AntiCheat.Protected.ProtectedInt64
      language: CSharp
      name:
        CSharp: Implicit(ProtectedFloat to ProtectedInt64)
        VB: Widening(ProtectedFloat to ProtectedInt64)
      nameWithType:
        CSharp: ProtectedFloat.Implicit(ProtectedFloat to ProtectedInt64)
        VB: ProtectedFloat.Widening(ProtectedFloat to ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Implicit(GUPS.AntiCheat.Protected.ProtectedFloat to GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Widening(GUPS.AntiCheat.Protected.ProtectedFloat to GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16923
      summary: "\nImplicitly converts a ProtectedFloat to a ProtectedInt64.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedInt64(ProtectedFloat _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedFloat) As ProtectedInt64
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The ProtectedFloat to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: A new instance of ProtectedInt64 with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt64)~GUPS.AntiCheat.Protected.ProtectedFloat
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt64)~GUPS.AntiCheat.Protected.ProtectedFloat
      language: CSharp
      name:
        CSharp: Implicit(ProtectedInt64 to ProtectedFloat)
        VB: Widening(ProtectedInt64 to ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.Implicit(ProtectedInt64 to ProtectedFloat)
        VB: ProtectedFloat.Widening(ProtectedInt64 to ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Implicit(GUPS.AntiCheat.Protected.ProtectedInt64 to GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Widening(GUPS.AntiCheat.Protected.ProtectedInt64 to GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 16933
      summary: "\nImplicitly converts a ProtectedInt64 to a ProtectedFloat.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedFloat(ProtectedInt64 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedInt64) As ProtectedFloat
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The ProtectedInt64 to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: A new instance of ProtectedFloat with the converted value.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Addition(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Addition(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      language: CSharp
      name:
        CSharp: Addition(ProtectedFloat, ProtectedFloat)
        VB: Addition(ProtectedFloat, ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.Addition(ProtectedFloat, ProtectedFloat)
        VB: ProtectedFloat.Addition(ProtectedFloat, ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Addition(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Addition(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Addition
        path: ''
        startLine: 16948
      summary: "\nAdds two ProtectedFloat instances.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedFloat operator +(ProtectedFloat v1, ProtectedFloat v2)
          VB: Public Shared Operator +(v1 As ProtectedFloat, v2 As ProtectedFloat) As ProtectedFloat
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The first ProtectedFloat instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The second ProtectedFloat instance.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: A new instance of ProtectedFloat representing the sum of the two instances.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      language: CSharp
      name:
        CSharp: Subtraction(ProtectedFloat, ProtectedFloat)
        VB: Subtraction(ProtectedFloat, ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.Subtraction(ProtectedFloat, ProtectedFloat)
        VB: ProtectedFloat.Subtraction(ProtectedFloat, ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Subtraction(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Subtraction(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Subtraction
        path: ''
        startLine: 16959
      summary: "\nSubtracts one ProtectedFloat instance from another.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedFloat operator -(ProtectedFloat v1, ProtectedFloat v2)
          VB: Public Shared Operator -(v1 As ProtectedFloat, v2 As ProtectedFloat) As ProtectedFloat
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The first ProtectedFloat instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The second ProtectedFloat instance.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: A new instance of ProtectedFloat representing the result of the subtraction.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Subtraction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Multiply(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Multiply(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      language: CSharp
      name:
        CSharp: Multiply(ProtectedFloat, ProtectedFloat)
        VB: Multiply(ProtectedFloat, ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.Multiply(ProtectedFloat, ProtectedFloat)
        VB: ProtectedFloat.Multiply(ProtectedFloat, ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Multiply(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Multiply(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Multiply
        path: ''
        startLine: 16970
      summary: "\nMultiplies two ProtectedFloat instances.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedFloat operator *(ProtectedFloat v1, ProtectedFloat v2)
          VB: Public Shared Operator *(v1 As ProtectedFloat, v2 As ProtectedFloat) As ProtectedFloat
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The first ProtectedFloat instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The second ProtectedFloat instance.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: A new instance of ProtectedFloat representing the product of the two instances.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Multiply*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Division(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Division(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      language: CSharp
      name:
        CSharp: Division(ProtectedFloat, ProtectedFloat)
        VB: Division(ProtectedFloat, ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.Division(ProtectedFloat, ProtectedFloat)
        VB: ProtectedFloat.Division(ProtectedFloat, ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Division(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Division(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Division
        path: ''
        startLine: 16981
      summary: "\nDivides one ProtectedFloat instance by another.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedFloat operator /(ProtectedFloat v1, ProtectedFloat v2)
          VB: Public Shared Operator /(v1 As ProtectedFloat, v2 As ProtectedFloat) As ProtectedFloat
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The numerator ProtectedFloat instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The denominator ProtectedFloat instance.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: A new instance of ProtectedFloat representing the result of the division.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Division*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Equality(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Equality(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      language: CSharp
      name:
        CSharp: Equality(ProtectedFloat, ProtectedFloat)
        VB: Equality(ProtectedFloat, ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.Equality(ProtectedFloat, ProtectedFloat)
        VB: ProtectedFloat.Equality(ProtectedFloat, ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Equality(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Equality(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 16996
      summary: "\nDetermines whether two ProtectedFloat instances are equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedFloat v1, ProtectedFloat v2)
          VB: Public Shared Operator =(v1 As ProtectedFloat, v2 As ProtectedFloat) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The first ProtectedFloat instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The second ProtectedFloat instance.
        return:
          type: System.Boolean
          description: True if the values of the two instances are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Inequality(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_Inequality(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedFloat, ProtectedFloat)
        VB: Inequality(ProtectedFloat, ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.Inequality(ProtectedFloat, ProtectedFloat)
        VB: ProtectedFloat.Inequality(ProtectedFloat, ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Inequality(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Inequality(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 17007
      summary: "\nDetermines whether two ProtectedFloat instances are not equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedFloat v1, ProtectedFloat v2)
          VB: Public Shared Operator <>(v1 As ProtectedFloat, v2 As ProtectedFloat) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The first ProtectedFloat instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The second ProtectedFloat instance.
        return:
          type: System.Boolean
          description: True if the values of the two instances are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedFloat.Equals(Object)
        VB: ProtectedFloat.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 17017
      summary: "\nDetermines whether the specified object is equal to the current ProtectedFloat instance.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the current instance.
        return:
          type: System.Boolean
          description: True if the specified object is equal to the current instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThan(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThan(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      language: CSharp
      name:
        CSharp: LessThan(ProtectedFloat, ProtectedFloat)
        VB: LessThan(ProtectedFloat, ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.LessThan(ProtectedFloat, ProtectedFloat)
        VB: ProtectedFloat.LessThan(ProtectedFloat, ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.LessThan(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.LessThan(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThan
        path: ''
        startLine: 17032
      summary: "\nCompares two ProtectedFloat instances for less than.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <(ProtectedFloat v1, ProtectedFloat v2)
          VB: Public Shared Operator <(v1 As ProtectedFloat, v2 As ProtectedFloat) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The first ProtectedFloat instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The second ProtectedFloat instance.
        return:
          type: System.Boolean
          description: True if the value of the first instance is less than the value of the second instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      language: CSharp
      name:
        CSharp: LessThanOrEqual(ProtectedFloat, ProtectedFloat)
        VB: LessThanOrEqual(ProtectedFloat, ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.LessThanOrEqual(ProtectedFloat, ProtectedFloat)
        VB: ProtectedFloat.LessThanOrEqual(ProtectedFloat, ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThanOrEqual
        path: ''
        startLine: 17043
      summary: "\nCompares two ProtectedFloat instances for less than or equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <=(ProtectedFloat v1, ProtectedFloat v2)
          VB: Public Shared Operator <=(v1 As ProtectedFloat, v2 As ProtectedFloat) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The first ProtectedFloat instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The second ProtectedFloat instance.
        return:
          type: System.Boolean
          description: True if the value of the first instance is less than or equal to the value of the second instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      language: CSharp
      name:
        CSharp: GreaterThan(ProtectedFloat, ProtectedFloat)
        VB: GreaterThan(ProtectedFloat, ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.GreaterThan(ProtectedFloat, ProtectedFloat)
        VB: ProtectedFloat.GreaterThan(ProtectedFloat, ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.GreaterThan(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.GreaterThan(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThan
        path: ''
        startLine: 17054
      summary: "\nCompares two ProtectedFloat instances for greater than.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator>(ProtectedFloat v1, ProtectedFloat v2)
          VB: Public Shared Operator>(v1 As ProtectedFloat, v2 As ProtectedFloat) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The first ProtectedFloat instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The second ProtectedFloat instance.
        return:
          type: System.Boolean
          description: True if the value of the first instance is greater than the value of the second instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedFloat,GUPS.AntiCheat.Protected.ProtectedFloat)
      language: CSharp
      name:
        CSharp: GreaterThanOrEqual(ProtectedFloat, ProtectedFloat)
        VB: GreaterThanOrEqual(ProtectedFloat, ProtectedFloat)
      nameWithType:
        CSharp: ProtectedFloat.GreaterThanOrEqual(ProtectedFloat, ProtectedFloat)
        VB: ProtectedFloat.GreaterThanOrEqual(ProtectedFloat, ProtectedFloat)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedFloat.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
        VB: GUPS.AntiCheat.Protected.ProtectedFloat.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedFloat, GUPS.AntiCheat.Protected.ProtectedFloat)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThanOrEqual
        path: ''
        startLine: 17065
      summary: "\nCompares two ProtectedFloat instances for greater than or equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator >=(ProtectedFloat v1, ProtectedFloat v2)
          VB: Public Shared Operator >=(v1 As ProtectedFloat, v2 As ProtectedFloat) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The first ProtectedFloat instance.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedFloat
          description: The second ProtectedFloat instance.
        return:
          type: System.Boolean
          description: True if the value of the first instance is greater than or equal to the value of the second instance; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: GUPS.AntiCheat.Protected.ProtectedInt16
    commentId: T:GUPS.AntiCheat.Protected.ProtectedInt16
    language: CSharp
    name:
      CSharp: ProtectedInt16
      VB: ProtectedInt16
    nameWithType:
      CSharp: ProtectedInt16
      VB: ProtectedInt16
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedInt16
      VB: GUPS.AntiCheat.Protected.ProtectedInt16
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedInt16
      path: ''
      startLine: 17092
    summary: "\nRepresents a protected Int16, designed to enhance integrity and security by obfuscating its value and incorporating anti-cheat measures.\nIn most cases, this protected Int16 can be used as a drop-in replacement for the default Int16 type.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedInt16
        VB: Public Structure ProtectedInt16
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedInt16.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedInt16.HasIntegrity
        VB: ProtectedInt16.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 17104
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedInt16.OnBeforeSerialize()
        VB: ProtectedInt16.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 17126
      summary: "\nUnity serialization hook. Ensures the correct values will be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedInt16.OnAfterDeserialize()
        VB: ProtectedInt16.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 17134
      summary: "\nUnity deserialization hook. Ensures the correct values will be deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.#ctor(Int16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.#ctor(Int16)
      language: CSharp
      name:
        CSharp: ProtectedInt16(Int16)
        VB: ProtectedInt16(Int16)
      nameWithType:
        CSharp: ProtectedInt16.ProtectedInt16(Int16)
        VB: ProtectedInt16.ProtectedInt16(Int16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.ProtectedInt16(Int16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.ProtectedInt16(Int16)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 17143
      summary: "\nCreates a new protected Int16 with the specified initial value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedInt16(Int16 _Value = null)
          VB: Public Sub New(_Value As Int16 = Nothing)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Int16
          description: The initial value of the protected Int16.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedInt16.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedInt16.Value
        VB: ProtectedInt16.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.Value
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 17159
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public Int16 Value { get; set; }
          VB: Public Property Value As Int16
        parameters: []
        return:
          type: GUPS.AntiCheat.Int16
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedInt16.Obfuscate()
        VB: ProtectedInt16.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 17208
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedInt16.CheckIntegrity()
        VB: ProtectedInt16.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 17224
      summary: "\nChecks the integrity of the protected value, detecting if an attacher changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedInt16.Dispose()
        VB: ProtectedInt16.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 17242
      summary: "\nDisposes of the secured and secret values.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedInt16.ToString()
        VB: ProtectedInt16.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 17252
      summary: "\nConverts the protected Int16 to its string representation.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: The string representation of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedInt16.GetHashCode()
        VB: ProtectedInt16.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 17261
      summary: "\nGets the hash code of the protected Int16&apos;s true value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Implicit(Int16)~GUPS.AntiCheat.Protected.ProtectedInt16
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.op_Implicit(Int16)~GUPS.AntiCheat.Protected.ProtectedInt16
      language: CSharp
      name:
        CSharp: Implicit(Int16 to ProtectedInt16)
        VB: Widening(Int16 to ProtectedInt16)
      nameWithType:
        CSharp: ProtectedInt16.Implicit(Int16 to ProtectedInt16)
        VB: ProtectedInt16.Widening(Int16 to ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.Implicit(Int16 to GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.Widening(Int16 to GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 17273
      summary: "\nImplicitly converts an Int16 value to a protected Int16.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedInt16(Int16 _Value)
          VB: Public Shared Widening Operator CType(_Value As Int16) As ProtectedInt16
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Int16
          description: The Int16 value to convert.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The corresponding protected Int16.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt16)~Int16
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt16)~Int16
      language: CSharp
      name:
        CSharp: Implicit(ProtectedInt16 to Int16)
        VB: Widening(ProtectedInt16 to Int16)
      nameWithType:
        CSharp: ProtectedInt16.Implicit(ProtectedInt16 to Int16)
        VB: ProtectedInt16.Widening(ProtectedInt16 to Int16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.Implicit(GUPS.AntiCheat.Protected.ProtectedInt16 to Int16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.Widening(GUPS.AntiCheat.Protected.ProtectedInt16 to Int16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 17283
      summary: "\nImplicitly converts a protected Int16 to its Int16 value.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator Int16(ProtectedInt16 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedInt16) As Int16
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The protected Int16 to convert.
        return:
          type: GUPS.AntiCheat.Int16
          description: The Int16 value of the protected Int16.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Addition(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.op_Addition(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      language: CSharp
      name:
        CSharp: Addition(ProtectedInt16, ProtectedInt16)
        VB: Addition(ProtectedInt16, ProtectedInt16)
      nameWithType:
        CSharp: ProtectedInt16.Addition(ProtectedInt16, ProtectedInt16)
        VB: ProtectedInt16.Addition(ProtectedInt16, ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.Addition(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.Addition(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Addition
        path: ''
        startLine: 17298
      summary: "\nAdds two protected Int16 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedInt16 operator +(ProtectedInt16 v1, ProtectedInt16 v2)
          VB: Public Shared Operator +(v1 As ProtectedInt16, v2 As ProtectedInt16) As ProtectedInt16
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The first protected Int16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The second protected Int16.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The result of the addition.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      language: CSharp
      name:
        CSharp: Subtraction(ProtectedInt16, ProtectedInt16)
        VB: Subtraction(ProtectedInt16, ProtectedInt16)
      nameWithType:
        CSharp: ProtectedInt16.Subtraction(ProtectedInt16, ProtectedInt16)
        VB: ProtectedInt16.Subtraction(ProtectedInt16, ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.Subtraction(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.Subtraction(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Subtraction
        path: ''
        startLine: 17309
      summary: "\nSubtracts the second protected Int16 from the first.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedInt16 operator -(ProtectedInt16 v1, ProtectedInt16 v2)
          VB: Public Shared Operator -(v1 As ProtectedInt16, v2 As ProtectedInt16) As ProtectedInt16
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The first protected Int16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The second protected Int16.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The result of the subtraction.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.op_Subtraction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Multiply(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.op_Multiply(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      language: CSharp
      name:
        CSharp: Multiply(ProtectedInt16, ProtectedInt16)
        VB: Multiply(ProtectedInt16, ProtectedInt16)
      nameWithType:
        CSharp: ProtectedInt16.Multiply(ProtectedInt16, ProtectedInt16)
        VB: ProtectedInt16.Multiply(ProtectedInt16, ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.Multiply(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.Multiply(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Multiply
        path: ''
        startLine: 17320
      summary: "\nMultiplies two protected Int16 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedInt16 operator *(ProtectedInt16 v1, ProtectedInt16 v2)
          VB: Public Shared Operator *(v1 As ProtectedInt16, v2 As ProtectedInt16) As ProtectedInt16
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The first protected Int16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The second protected Int16.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The result of the multiplication.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.op_Multiply*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Division(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.op_Division(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      language: CSharp
      name:
        CSharp: Division(ProtectedInt16, ProtectedInt16)
        VB: Division(ProtectedInt16, ProtectedInt16)
      nameWithType:
        CSharp: ProtectedInt16.Division(ProtectedInt16, ProtectedInt16)
        VB: ProtectedInt16.Division(ProtectedInt16, ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.Division(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.Division(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Division
        path: ''
        startLine: 17331
      summary: "\nDivides the first protected Int16 by the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedInt16 operator /(ProtectedInt16 v1, ProtectedInt16 v2)
          VB: Public Shared Operator /(v1 As ProtectedInt16, v2 As ProtectedInt16) As ProtectedInt16
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The first protected Int16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The second protected Int16.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The result of the division.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.op_Division*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Equality(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.op_Equality(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      language: CSharp
      name:
        CSharp: Equality(ProtectedInt16, ProtectedInt16)
        VB: Equality(ProtectedInt16, ProtectedInt16)
      nameWithType:
        CSharp: ProtectedInt16.Equality(ProtectedInt16, ProtectedInt16)
        VB: ProtectedInt16.Equality(ProtectedInt16, ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.Equality(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.Equality(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 17346
      summary: "\nChecks if two protected Int16 values are equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedInt16 v1, ProtectedInt16 v2)
          VB: Public Shared Operator =(v1 As ProtectedInt16, v2 As ProtectedInt16) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The first protected Int16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The second protected Int16.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Inequality(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.op_Inequality(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedInt16, ProtectedInt16)
        VB: Inequality(ProtectedInt16, ProtectedInt16)
      nameWithType:
        CSharp: ProtectedInt16.Inequality(ProtectedInt16, ProtectedInt16)
        VB: ProtectedInt16.Inequality(ProtectedInt16, ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.Inequality(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.Inequality(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 17357
      summary: "\nChecks if two protected Int16 values are not equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedInt16 v1, ProtectedInt16 v2)
          VB: Public Shared Operator <>(v1 As ProtectedInt16, v2 As ProtectedInt16) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The first protected Int16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The second protected Int16.
        return:
          type: System.Boolean
          description: True if the true values are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedInt16.Equals(Object)
        VB: ProtectedInt16.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 17367
      summary: "\nChecks if the protected Int16 is equal to another object based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected Int16.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThan(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThan(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      language: CSharp
      name:
        CSharp: LessThan(ProtectedInt16, ProtectedInt16)
        VB: LessThan(ProtectedInt16, ProtectedInt16)
      nameWithType:
        CSharp: ProtectedInt16.LessThan(ProtectedInt16, ProtectedInt16)
        VB: ProtectedInt16.LessThan(ProtectedInt16, ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.LessThan(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.LessThan(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThan
        path: ''
        startLine: 17382
      summary: "\nCompares two protected Int16 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <(ProtectedInt16 v1, ProtectedInt16 v2)
          VB: Public Shared Operator <(v1 As ProtectedInt16, v2 As ProtectedInt16) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The first protected Int16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The second protected Int16.
        return:
          type: System.Boolean
          description: True if the first value is less than the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      language: CSharp
      name:
        CSharp: LessThanOrEqual(ProtectedInt16, ProtectedInt16)
        VB: LessThanOrEqual(ProtectedInt16, ProtectedInt16)
      nameWithType:
        CSharp: ProtectedInt16.LessThanOrEqual(ProtectedInt16, ProtectedInt16)
        VB: ProtectedInt16.LessThanOrEqual(ProtectedInt16, ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThanOrEqual
        path: ''
        startLine: 17393
      summary: "\nChecks if the first protected Int16 is less than or equal to the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <=(ProtectedInt16 v1, ProtectedInt16 v2)
          VB: Public Shared Operator <=(v1 As ProtectedInt16, v2 As ProtectedInt16) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The first protected Int16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The second protected Int16.
        return:
          type: System.Boolean
          description: True if the first value is less than or equal to the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      language: CSharp
      name:
        CSharp: GreaterThan(ProtectedInt16, ProtectedInt16)
        VB: GreaterThan(ProtectedInt16, ProtectedInt16)
      nameWithType:
        CSharp: ProtectedInt16.GreaterThan(ProtectedInt16, ProtectedInt16)
        VB: ProtectedInt16.GreaterThan(ProtectedInt16, ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.GreaterThan(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.GreaterThan(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThan
        path: ''
        startLine: 17404
      summary: "\nChecks if the first protected Int16 is greater than the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator>(ProtectedInt16 v1, ProtectedInt16 v2)
          VB: Public Shared Operator>(v1 As ProtectedInt16, v2 As ProtectedInt16) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The first protected Int16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The second protected Int16.
        return:
          type: System.Boolean
          description: True if the first value is greater than the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt16,GUPS.AntiCheat.Protected.ProtectedInt16)
      language: CSharp
      name:
        CSharp: GreaterThanOrEqual(ProtectedInt16, ProtectedInt16)
        VB: GreaterThanOrEqual(ProtectedInt16, ProtectedInt16)
      nameWithType:
        CSharp: ProtectedInt16.GreaterThanOrEqual(ProtectedInt16, ProtectedInt16)
        VB: ProtectedInt16.GreaterThanOrEqual(ProtectedInt16, ProtectedInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt16.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedInt16.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt16, GUPS.AntiCheat.Protected.ProtectedInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThanOrEqual
        path: ''
        startLine: 17415
      summary: "\nChecks if the first protected Int16 is greater than or equal to the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator >=(ProtectedInt16 v1, ProtectedInt16 v2)
          VB: Public Shared Operator >=(v1 As ProtectedInt16, v2 As ProtectedInt16) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The first protected Int16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt16
          description: The second protected Int16.
        return:
          type: System.Boolean
          description: True if the first value is greater than or equal to the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: GUPS.AntiCheat.Protected.ProtectedInt32
    commentId: T:GUPS.AntiCheat.Protected.ProtectedInt32
    language: CSharp
    name:
      CSharp: ProtectedInt32
      VB: ProtectedInt32
    nameWithType:
      CSharp: ProtectedInt32
      VB: ProtectedInt32
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedInt32
      VB: GUPS.AntiCheat.Protected.ProtectedInt32
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedInt32
      path: ''
      startLine: 17442
    summary: "\nRepresents a protected Int32, designed to enhance integrity and security by obfuscating its value and incorporating anti-cheat measures.\nIn most cases, this protected Int32 can be used as a drop-in replacement for the default Int32 type.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedInt32
        VB: Public Structure ProtectedInt32
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedInt32.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedInt32.HasIntegrity
        VB: ProtectedInt32.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 17454
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedInt32.OnBeforeSerialize()
        VB: ProtectedInt32.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 17476
      summary: "\nUnity serialization hook. Ensures the correct values will be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedInt32.OnAfterDeserialize()
        VB: ProtectedInt32.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 17484
      summary: "\nUnity deserialization hook. Ensures the correct values will be deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.#ctor(Int32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.#ctor(Int32)
      language: CSharp
      name:
        CSharp: ProtectedInt32(Int32)
        VB: ProtectedInt32(Int32)
      nameWithType:
        CSharp: ProtectedInt32.ProtectedInt32(Int32)
        VB: ProtectedInt32.ProtectedInt32(Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.ProtectedInt32(Int32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.ProtectedInt32(Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 17493
      summary: "\nCreates a new protected Int32 with the specified initial value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedInt32(Int32 _Value = null)
          VB: Public Sub New(_Value As Int32 = Nothing)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Int32
          description: The initial value of the protected Int32.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedInt32.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedInt32.Value
        VB: ProtectedInt32.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.Value
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 17509
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public Int32 Value { get; set; }
          VB: Public Property Value As Int32
        parameters: []
        return:
          type: GUPS.AntiCheat.Int32
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedInt32.Obfuscate()
        VB: ProtectedInt32.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 17558
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedInt32.CheckIntegrity()
        VB: ProtectedInt32.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 17574
      summary: "\nChecks the integrity of the protected value, detecting if an attacher changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedInt32.Dispose()
        VB: ProtectedInt32.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 17592
      summary: "\nDisposes of the secured and secret values.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedInt32.ToString()
        VB: ProtectedInt32.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 17602
      summary: "\nConverts the protected Int32 to its string representation.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: The string representation of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedInt32.GetHashCode()
        VB: ProtectedInt32.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 17611
      summary: "\nGets the hash code of the protected Int32&apos;s true value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Implicit(Int32)~GUPS.AntiCheat.Protected.ProtectedInt32
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.op_Implicit(Int32)~GUPS.AntiCheat.Protected.ProtectedInt32
      language: CSharp
      name:
        CSharp: Implicit(Int32 to ProtectedInt32)
        VB: Widening(Int32 to ProtectedInt32)
      nameWithType:
        CSharp: ProtectedInt32.Implicit(Int32 to ProtectedInt32)
        VB: ProtectedInt32.Widening(Int32 to ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.Implicit(Int32 to GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.Widening(Int32 to GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 17650
      summary: "\nImplicitly converts an Int32 value to a protected Int32.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedInt32(Int32 _Value)
          VB: Public Shared Widening Operator CType(_Value As Int32) As ProtectedInt32
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Int32
          description: The Int32 value to convert.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The corresponding protected Int32.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt32)~Int32
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt32)~Int32
      language: CSharp
      name:
        CSharp: Implicit(ProtectedInt32 to Int32)
        VB: Widening(ProtectedInt32 to Int32)
      nameWithType:
        CSharp: ProtectedInt32.Implicit(ProtectedInt32 to Int32)
        VB: ProtectedInt32.Widening(ProtectedInt32 to Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.Implicit(GUPS.AntiCheat.Protected.ProtectedInt32 to Int32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.Widening(GUPS.AntiCheat.Protected.ProtectedInt32 to Int32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 17660
      summary: "\nImplicitly converts a protected Int32 to its Int32 value.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator Int32(ProtectedInt32 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedInt32) As Int32
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The protected Int32 to convert.
        return:
          type: GUPS.AntiCheat.Int32
          description: The Int32 value of the protected Int32.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Addition(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.op_Addition(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      language: CSharp
      name:
        CSharp: Addition(ProtectedInt32, ProtectedInt32)
        VB: Addition(ProtectedInt32, ProtectedInt32)
      nameWithType:
        CSharp: ProtectedInt32.Addition(ProtectedInt32, ProtectedInt32)
        VB: ProtectedInt32.Addition(ProtectedInt32, ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.Addition(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.Addition(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Addition
        path: ''
        startLine: 17675
      summary: "\nAdds two protected Int32 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedInt32 operator +(ProtectedInt32 v1, ProtectedInt32 v2)
          VB: Public Shared Operator +(v1 As ProtectedInt32, v2 As ProtectedInt32) As ProtectedInt32
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The first protected Int32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The second protected Int32.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The result of the addition.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      language: CSharp
      name:
        CSharp: Subtraction(ProtectedInt32, ProtectedInt32)
        VB: Subtraction(ProtectedInt32, ProtectedInt32)
      nameWithType:
        CSharp: ProtectedInt32.Subtraction(ProtectedInt32, ProtectedInt32)
        VB: ProtectedInt32.Subtraction(ProtectedInt32, ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.Subtraction(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.Subtraction(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Subtraction
        path: ''
        startLine: 17686
      summary: "\nSubtracts the second protected Int32 from the first.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedInt32 operator -(ProtectedInt32 v1, ProtectedInt32 v2)
          VB: Public Shared Operator -(v1 As ProtectedInt32, v2 As ProtectedInt32) As ProtectedInt32
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The first protected Int32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The second protected Int32.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The result of the subtraction.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.op_Subtraction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Multiply(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.op_Multiply(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      language: CSharp
      name:
        CSharp: Multiply(ProtectedInt32, ProtectedInt32)
        VB: Multiply(ProtectedInt32, ProtectedInt32)
      nameWithType:
        CSharp: ProtectedInt32.Multiply(ProtectedInt32, ProtectedInt32)
        VB: ProtectedInt32.Multiply(ProtectedInt32, ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.Multiply(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.Multiply(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Multiply
        path: ''
        startLine: 17697
      summary: "\nMultiplies two protected Int32 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedInt32 operator *(ProtectedInt32 v1, ProtectedInt32 v2)
          VB: Public Shared Operator *(v1 As ProtectedInt32, v2 As ProtectedInt32) As ProtectedInt32
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The first protected Int32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The second protected Int32.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The result of the multiplication.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.op_Multiply*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Division(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.op_Division(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      language: CSharp
      name:
        CSharp: Division(ProtectedInt32, ProtectedInt32)
        VB: Division(ProtectedInt32, ProtectedInt32)
      nameWithType:
        CSharp: ProtectedInt32.Division(ProtectedInt32, ProtectedInt32)
        VB: ProtectedInt32.Division(ProtectedInt32, ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.Division(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.Division(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Division
        path: ''
        startLine: 17708
      summary: "\nDivides the first protected Int32 by the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedInt32 operator /(ProtectedInt32 v1, ProtectedInt32 v2)
          VB: Public Shared Operator /(v1 As ProtectedInt32, v2 As ProtectedInt32) As ProtectedInt32
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The first protected Int32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The second protected Int32.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The result of the division.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.op_Division*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Equality(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.op_Equality(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      language: CSharp
      name:
        CSharp: Equality(ProtectedInt32, ProtectedInt32)
        VB: Equality(ProtectedInt32, ProtectedInt32)
      nameWithType:
        CSharp: ProtectedInt32.Equality(ProtectedInt32, ProtectedInt32)
        VB: ProtectedInt32.Equality(ProtectedInt32, ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.Equality(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.Equality(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 17723
      summary: "\nChecks if two protected Int32 values are equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedInt32 v1, ProtectedInt32 v2)
          VB: Public Shared Operator =(v1 As ProtectedInt32, v2 As ProtectedInt32) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The first protected Int32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The second protected Int32.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Inequality(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.op_Inequality(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedInt32, ProtectedInt32)
        VB: Inequality(ProtectedInt32, ProtectedInt32)
      nameWithType:
        CSharp: ProtectedInt32.Inequality(ProtectedInt32, ProtectedInt32)
        VB: ProtectedInt32.Inequality(ProtectedInt32, ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.Inequality(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.Inequality(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 17734
      summary: "\nChecks if two protected Int32 values are not equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedInt32 v1, ProtectedInt32 v2)
          VB: Public Shared Operator <>(v1 As ProtectedInt32, v2 As ProtectedInt32) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The first protected Int32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The second protected Int32.
        return:
          type: System.Boolean
          description: True if the true values are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedInt32.Equals(Object)
        VB: ProtectedInt32.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 17744
      summary: "\nChecks if the protected Int32 is equal to another object based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected Int32.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThan(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThan(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      language: CSharp
      name:
        CSharp: LessThan(ProtectedInt32, ProtectedInt32)
        VB: LessThan(ProtectedInt32, ProtectedInt32)
      nameWithType:
        CSharp: ProtectedInt32.LessThan(ProtectedInt32, ProtectedInt32)
        VB: ProtectedInt32.LessThan(ProtectedInt32, ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.LessThan(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.LessThan(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThan
        path: ''
        startLine: 17759
      summary: "\nCompares two protected Int32 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <(ProtectedInt32 v1, ProtectedInt32 v2)
          VB: Public Shared Operator <(v1 As ProtectedInt32, v2 As ProtectedInt32) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The first protected Int32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The second protected Int32.
        return:
          type: System.Boolean
          description: True if the first value is less than the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      language: CSharp
      name:
        CSharp: LessThanOrEqual(ProtectedInt32, ProtectedInt32)
        VB: LessThanOrEqual(ProtectedInt32, ProtectedInt32)
      nameWithType:
        CSharp: ProtectedInt32.LessThanOrEqual(ProtectedInt32, ProtectedInt32)
        VB: ProtectedInt32.LessThanOrEqual(ProtectedInt32, ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThanOrEqual
        path: ''
        startLine: 17770
      summary: "\nChecks if the first protected Int32 is less than or equal to the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <=(ProtectedInt32 v1, ProtectedInt32 v2)
          VB: Public Shared Operator <=(v1 As ProtectedInt32, v2 As ProtectedInt32) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The first protected Int32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The second protected Int32.
        return:
          type: System.Boolean
          description: True if the first value is less than or equal to the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      language: CSharp
      name:
        CSharp: GreaterThan(ProtectedInt32, ProtectedInt32)
        VB: GreaterThan(ProtectedInt32, ProtectedInt32)
      nameWithType:
        CSharp: ProtectedInt32.GreaterThan(ProtectedInt32, ProtectedInt32)
        VB: ProtectedInt32.GreaterThan(ProtectedInt32, ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.GreaterThan(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.GreaterThan(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThan
        path: ''
        startLine: 17781
      summary: "\nChecks if the first protected Int32 is greater than the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator>(ProtectedInt32 v1, ProtectedInt32 v2)
          VB: Public Shared Operator>(v1 As ProtectedInt32, v2 As ProtectedInt32) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The first protected Int32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The second protected Int32.
        return:
          type: System.Boolean
          description: True if the first value is greater than the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt32,GUPS.AntiCheat.Protected.ProtectedInt32)
      language: CSharp
      name:
        CSharp: GreaterThanOrEqual(ProtectedInt32, ProtectedInt32)
        VB: GreaterThanOrEqual(ProtectedInt32, ProtectedInt32)
      nameWithType:
        CSharp: ProtectedInt32.GreaterThanOrEqual(ProtectedInt32, ProtectedInt32)
        VB: ProtectedInt32.GreaterThanOrEqual(ProtectedInt32, ProtectedInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt32.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedInt32.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt32, GUPS.AntiCheat.Protected.ProtectedInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThanOrEqual
        path: ''
        startLine: 17792
      summary: "\nChecks if the first protected Int32 is greater than or equal to the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator >=(ProtectedInt32 v1, ProtectedInt32 v2)
          VB: Public Shared Operator >=(v1 As ProtectedInt32, v2 As ProtectedInt32) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The first protected Int32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt32
          description: The second protected Int32.
        return:
          type: System.Boolean
          description: True if the first value is greater than or equal to the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: GUPS.AntiCheat.Protected.ProtectedInt64
    commentId: T:GUPS.AntiCheat.Protected.ProtectedInt64
    language: CSharp
    name:
      CSharp: ProtectedInt64
      VB: ProtectedInt64
    nameWithType:
      CSharp: ProtectedInt64
      VB: ProtectedInt64
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedInt64
      VB: GUPS.AntiCheat.Protected.ProtectedInt64
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedInt64
      path: ''
      startLine: 17819
    summary: "\nRepresents a protected Int64, designed to enhance integrity and security by obfuscating its value and incorporating anti-cheat measures.\nIn most cases, this protected Int64 can be used as a drop-in replacement for the default Int64 type.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedInt64
        VB: Public Structure ProtectedInt64
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedInt64.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedInt64.HasIntegrity
        VB: ProtectedInt64.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 17831
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedInt64.OnBeforeSerialize()
        VB: ProtectedInt64.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 17853
      summary: "\nUnity serialization hook. Ensures the correct values will be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedInt64.OnAfterDeserialize()
        VB: ProtectedInt64.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 17861
      summary: "\nUnity deserialization hook. Ensures the correct values will be deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.#ctor(Int64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.#ctor(Int64)
      language: CSharp
      name:
        CSharp: ProtectedInt64(Int64)
        VB: ProtectedInt64(Int64)
      nameWithType:
        CSharp: ProtectedInt64.ProtectedInt64(Int64)
        VB: ProtectedInt64.ProtectedInt64(Int64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.ProtectedInt64(Int64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.ProtectedInt64(Int64)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 17870
      summary: "\nCreates a new protected Int64 with the specified initial value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedInt64(Int64 _Value = null)
          VB: Public Sub New(_Value As Int64 = Nothing)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Int64
          description: The initial value of the protected Int64.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedInt64.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedInt64.Value
        VB: ProtectedInt64.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.Value
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 17886
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public Int64 Value { get; set; }
          VB: Public Property Value As Int64
        parameters: []
        return:
          type: GUPS.AntiCheat.Int64
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedInt64.Obfuscate()
        VB: ProtectedInt64.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 17935
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedInt64.CheckIntegrity()
        VB: ProtectedInt64.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 17951
      summary: "\nChecks the integrity of the protected value, detecting if an attacher changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedInt64.Dispose()
        VB: ProtectedInt64.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 17969
      summary: "\nDisposes of the secured and secret values.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedInt64.ToString()
        VB: ProtectedInt64.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 17979
      summary: "\nConverts the protected Int64 to its string representation.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: The string representation of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedInt64.GetHashCode()
        VB: ProtectedInt64.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 17988
      summary: "\nGets the hash code of the protected Int64&apos;s true value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Implicit(Int64)~GUPS.AntiCheat.Protected.ProtectedInt64
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.op_Implicit(Int64)~GUPS.AntiCheat.Protected.ProtectedInt64
      language: CSharp
      name:
        CSharp: Implicit(Int64 to ProtectedInt64)
        VB: Widening(Int64 to ProtectedInt64)
      nameWithType:
        CSharp: ProtectedInt64.Implicit(Int64 to ProtectedInt64)
        VB: ProtectedInt64.Widening(Int64 to ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.Implicit(Int64 to GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.Widening(Int64 to GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 18000
      summary: "\nImplicitly converts an Int64 value to a protected Int64.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedInt64(Int64 _Value)
          VB: Public Shared Widening Operator CType(_Value As Int64) As ProtectedInt64
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Int64
          description: The Int64 value to convert.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The corresponding protected Int64.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt64)~Int64
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.op_Implicit(GUPS.AntiCheat.Protected.ProtectedInt64)~Int64
      language: CSharp
      name:
        CSharp: Implicit(ProtectedInt64 to Int64)
        VB: Widening(ProtectedInt64 to Int64)
      nameWithType:
        CSharp: ProtectedInt64.Implicit(ProtectedInt64 to Int64)
        VB: ProtectedInt64.Widening(ProtectedInt64 to Int64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.Implicit(GUPS.AntiCheat.Protected.ProtectedInt64 to Int64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.Widening(GUPS.AntiCheat.Protected.ProtectedInt64 to Int64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 18010
      summary: "\nImplicitly converts a protected Int64 to its Int64 value.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator Int64(ProtectedInt64 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedInt64) As Int64
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The protected Int64 to convert.
        return:
          type: GUPS.AntiCheat.Int64
          description: The Int64 value of the protected Int64.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Addition(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.op_Addition(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      language: CSharp
      name:
        CSharp: Addition(ProtectedInt64, ProtectedInt64)
        VB: Addition(ProtectedInt64, ProtectedInt64)
      nameWithType:
        CSharp: ProtectedInt64.Addition(ProtectedInt64, ProtectedInt64)
        VB: ProtectedInt64.Addition(ProtectedInt64, ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.Addition(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.Addition(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Addition
        path: ''
        startLine: 18025
      summary: "\nAdds two protected Int64 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedInt64 operator +(ProtectedInt64 v1, ProtectedInt64 v2)
          VB: Public Shared Operator +(v1 As ProtectedInt64, v2 As ProtectedInt64) As ProtectedInt64
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The first protected Int64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The second protected Int64.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The result of the addition.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      language: CSharp
      name:
        CSharp: Subtraction(ProtectedInt64, ProtectedInt64)
        VB: Subtraction(ProtectedInt64, ProtectedInt64)
      nameWithType:
        CSharp: ProtectedInt64.Subtraction(ProtectedInt64, ProtectedInt64)
        VB: ProtectedInt64.Subtraction(ProtectedInt64, ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.Subtraction(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.Subtraction(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Subtraction
        path: ''
        startLine: 18036
      summary: "\nSubtracts the second protected Int64 from the first.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedInt64 operator -(ProtectedInt64 v1, ProtectedInt64 v2)
          VB: Public Shared Operator -(v1 As ProtectedInt64, v2 As ProtectedInt64) As ProtectedInt64
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The first protected Int64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The second protected Int64.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The result of the subtraction.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.op_Subtraction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Multiply(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.op_Multiply(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      language: CSharp
      name:
        CSharp: Multiply(ProtectedInt64, ProtectedInt64)
        VB: Multiply(ProtectedInt64, ProtectedInt64)
      nameWithType:
        CSharp: ProtectedInt64.Multiply(ProtectedInt64, ProtectedInt64)
        VB: ProtectedInt64.Multiply(ProtectedInt64, ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.Multiply(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.Multiply(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Multiply
        path: ''
        startLine: 18047
      summary: "\nMultiplies two protected Int64 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedInt64 operator *(ProtectedInt64 v1, ProtectedInt64 v2)
          VB: Public Shared Operator *(v1 As ProtectedInt64, v2 As ProtectedInt64) As ProtectedInt64
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The first protected Int64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The second protected Int64.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The result of the multiplication.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.op_Multiply*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Division(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.op_Division(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      language: CSharp
      name:
        CSharp: Division(ProtectedInt64, ProtectedInt64)
        VB: Division(ProtectedInt64, ProtectedInt64)
      nameWithType:
        CSharp: ProtectedInt64.Division(ProtectedInt64, ProtectedInt64)
        VB: ProtectedInt64.Division(ProtectedInt64, ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.Division(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.Division(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Division
        path: ''
        startLine: 18058
      summary: "\nDivides the first protected Int64 by the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedInt64 operator /(ProtectedInt64 v1, ProtectedInt64 v2)
          VB: Public Shared Operator /(v1 As ProtectedInt64, v2 As ProtectedInt64) As ProtectedInt64
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The first protected Int64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The second protected Int64.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The result of the division.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.op_Division*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Equality(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.op_Equality(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      language: CSharp
      name:
        CSharp: Equality(ProtectedInt64, ProtectedInt64)
        VB: Equality(ProtectedInt64, ProtectedInt64)
      nameWithType:
        CSharp: ProtectedInt64.Equality(ProtectedInt64, ProtectedInt64)
        VB: ProtectedInt64.Equality(ProtectedInt64, ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.Equality(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.Equality(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 18073
      summary: "\nChecks if two protected Int64 values are equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedInt64 v1, ProtectedInt64 v2)
          VB: Public Shared Operator =(v1 As ProtectedInt64, v2 As ProtectedInt64) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The first protected Int64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The second protected Int64.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Inequality(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.op_Inequality(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedInt64, ProtectedInt64)
        VB: Inequality(ProtectedInt64, ProtectedInt64)
      nameWithType:
        CSharp: ProtectedInt64.Inequality(ProtectedInt64, ProtectedInt64)
        VB: ProtectedInt64.Inequality(ProtectedInt64, ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.Inequality(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.Inequality(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 18084
      summary: "\nChecks if two protected Int64 values are not equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedInt64 v1, ProtectedInt64 v2)
          VB: Public Shared Operator <>(v1 As ProtectedInt64, v2 As ProtectedInt64) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The first protected Int64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The second protected Int64.
        return:
          type: System.Boolean
          description: True if the true values are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedInt64.Equals(Object)
        VB: ProtectedInt64.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 18094
      summary: "\nChecks if the protected Int64 is equal to another object based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected Int64.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThan(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThan(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      language: CSharp
      name:
        CSharp: LessThan(ProtectedInt64, ProtectedInt64)
        VB: LessThan(ProtectedInt64, ProtectedInt64)
      nameWithType:
        CSharp: ProtectedInt64.LessThan(ProtectedInt64, ProtectedInt64)
        VB: ProtectedInt64.LessThan(ProtectedInt64, ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.LessThan(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.LessThan(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThan
        path: ''
        startLine: 18109
      summary: "\nCompares two protected Int64 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <(ProtectedInt64 v1, ProtectedInt64 v2)
          VB: Public Shared Operator <(v1 As ProtectedInt64, v2 As ProtectedInt64) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The first protected Int64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The second protected Int64.
        return:
          type: System.Boolean
          description: True if the first value is less than the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      language: CSharp
      name:
        CSharp: LessThanOrEqual(ProtectedInt64, ProtectedInt64)
        VB: LessThanOrEqual(ProtectedInt64, ProtectedInt64)
      nameWithType:
        CSharp: ProtectedInt64.LessThanOrEqual(ProtectedInt64, ProtectedInt64)
        VB: ProtectedInt64.LessThanOrEqual(ProtectedInt64, ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThanOrEqual
        path: ''
        startLine: 18120
      summary: "\nChecks if the first protected Int64 is less than or equal to the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <=(ProtectedInt64 v1, ProtectedInt64 v2)
          VB: Public Shared Operator <=(v1 As ProtectedInt64, v2 As ProtectedInt64) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The first protected Int64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The second protected Int64.
        return:
          type: System.Boolean
          description: True if the first value is less than or equal to the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      language: CSharp
      name:
        CSharp: GreaterThan(ProtectedInt64, ProtectedInt64)
        VB: GreaterThan(ProtectedInt64, ProtectedInt64)
      nameWithType:
        CSharp: ProtectedInt64.GreaterThan(ProtectedInt64, ProtectedInt64)
        VB: ProtectedInt64.GreaterThan(ProtectedInt64, ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.GreaterThan(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.GreaterThan(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThan
        path: ''
        startLine: 18131
      summary: "\nChecks if the first protected Int64 is greater than the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator>(ProtectedInt64 v1, ProtectedInt64 v2)
          VB: Public Shared Operator>(v1 As ProtectedInt64, v2 As ProtectedInt64) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The first protected Int64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The second protected Int64.
        return:
          type: System.Boolean
          description: True if the first value is greater than the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt64,GUPS.AntiCheat.Protected.ProtectedInt64)
      language: CSharp
      name:
        CSharp: GreaterThanOrEqual(ProtectedInt64, ProtectedInt64)
        VB: GreaterThanOrEqual(ProtectedInt64, ProtectedInt64)
      nameWithType:
        CSharp: ProtectedInt64.GreaterThanOrEqual(ProtectedInt64, ProtectedInt64)
        VB: ProtectedInt64.GreaterThanOrEqual(ProtectedInt64, ProtectedInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedInt64.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedInt64.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedInt64, GUPS.AntiCheat.Protected.ProtectedInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThanOrEqual
        path: ''
        startLine: 18142
      summary: "\nChecks if the first protected Int64 is greater than or equal to the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator >=(ProtectedInt64 v1, ProtectedInt64 v2)
          VB: Public Shared Operator >=(v1 As ProtectedInt64, v2 As ProtectedInt64) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The first protected Int64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedInt64
          description: The second protected Int64.
        return:
          type: System.Boolean
          description: True if the first value is greater than or equal to the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: GUPS.AntiCheat.Protected.ProtectedQuaternion
    commentId: T:GUPS.AntiCheat.Protected.ProtectedQuaternion
    language: CSharp
    name:
      CSharp: ProtectedQuaternion
      VB: ProtectedQuaternion
    nameWithType:
      CSharp: ProtectedQuaternion
      VB: ProtectedQuaternion
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion
      VB: GUPS.AntiCheat.Protected.ProtectedQuaternion
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedQuaternion
      path: ''
      startLine: 18169
    summary: "\nRepresents a protected Quaternion, enhancing security for sensitive vector data. \nIn most scenarios, it is recommended to replace the default Quaternion type with this protected variant.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedQuaternion
        VB: Public Structure ProtectedQuaternion
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedQuaternion.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedQuaternion.HasIntegrity
        VB: ProtectedQuaternion.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 18181
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedQuaternion.OnBeforeSerialize()
        VB: ProtectedQuaternion.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 18223
      summary: "\nUnity serialization hook. Ensures the correct values are serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedQuaternion.OnAfterDeserialize()
        VB: ProtectedQuaternion.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 18231
      summary: "\nUnity deserialization hook. Ensures the correct values are deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.#ctor(Quaternion)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.#ctor(Quaternion)
      language: CSharp
      name:
        CSharp: ProtectedQuaternion(Quaternion)
        VB: ProtectedQuaternion(Quaternion)
      nameWithType:
        CSharp: ProtectedQuaternion.ProtectedQuaternion(Quaternion)
        VB: ProtectedQuaternion.ProtectedQuaternion(Quaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.ProtectedQuaternion(Quaternion)
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.ProtectedQuaternion(Quaternion)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 18240
      summary: "\nCreates a new protected Quaternion with the specified value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedQuaternion(Quaternion _Value)
          VB: Public Sub New(_Value As Quaternion)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Quaternion
          description: The initial value of the protected Quaternion.
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedQuaternion.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedQuaternion.Value
        VB: ProtectedQuaternion.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.Value
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 18275
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public Quaternion Value { get; set; }
          VB: Public Property Value As Quaternion
        parameters: []
        return:
          type: GUPS.AntiCheat.Quaternion
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedQuaternion.Obfuscate()
        VB: ProtectedQuaternion.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 18353
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedQuaternion.CheckIntegrity()
        VB: ProtectedQuaternion.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 18369
      summary: "\nChecks the integrity of the protected value, detecting if an attacker changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedQuaternion.Dispose()
        VB: ProtectedQuaternion.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 18387
      summary: "\nReleases the resources used by the protected Quaternion.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedQuaternion.ToString()
        VB: ProtectedQuaternion.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 18401
      summary: "\nReturns a string representation of the protected Quaternion.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: A string representation of the protected Quaternion.
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedQuaternion.GetHashCode()
        VB: ProtectedQuaternion.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 18410
      summary: "\nGets the hash code for the protected value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code for the protected value.
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Implicit(Quaternion)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Implicit(Quaternion)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      language: CSharp
      name:
        CSharp: Implicit(Quaternion to ProtectedQuaternion)
        VB: Widening(Quaternion to ProtectedQuaternion)
      nameWithType:
        CSharp: ProtectedQuaternion.Implicit(Quaternion to ProtectedQuaternion)
        VB: ProtectedQuaternion.Widening(Quaternion to ProtectedQuaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.Implicit(Quaternion to GUPS.AntiCheat.Protected.ProtectedQuaternion)
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.Widening(Quaternion to GUPS.AntiCheat.Protected.ProtectedQuaternion)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 18422
      summary: "\nImplicitly converts a regular Quaternion to a protected Quaternion.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedQuaternion(Quaternion _Value)
          VB: Public Shared Widening Operator CType(_Value As Quaternion) As ProtectedQuaternion
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Quaternion
          description: The regular Quaternion to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: A new instance of the protected Quaternion.
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~Quaternion
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~Quaternion
      language: CSharp
      name:
        CSharp: Implicit(ProtectedQuaternion to Quaternion)
        VB: Widening(ProtectedQuaternion to Quaternion)
      nameWithType:
        CSharp: ProtectedQuaternion.Implicit(ProtectedQuaternion to Quaternion)
        VB: ProtectedQuaternion.Widening(ProtectedQuaternion to Quaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion to Quaternion)
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.Widening(GUPS.AntiCheat.Protected.ProtectedQuaternion to Quaternion)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 18432
      summary: "\nImplicitly converts a protected Quaternion to a regular Quaternion.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator Quaternion(ProtectedQuaternion _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedQuaternion) As Quaternion
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The protected Quaternion to be converted.
        return:
          type: GUPS.AntiCheat.Quaternion
          description: The true unencrypted value of the protected Quaternion.
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Equality(GUPS.AntiCheat.Protected.ProtectedQuaternion,GUPS.AntiCheat.Protected.ProtectedQuaternion)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Equality(GUPS.AntiCheat.Protected.ProtectedQuaternion,GUPS.AntiCheat.Protected.ProtectedQuaternion)
      language: CSharp
      name:
        CSharp: Equality(ProtectedQuaternion, ProtectedQuaternion)
        VB: Equality(ProtectedQuaternion, ProtectedQuaternion)
      nameWithType:
        CSharp: ProtectedQuaternion.Equality(ProtectedQuaternion, ProtectedQuaternion)
        VB: ProtectedQuaternion.Equality(ProtectedQuaternion, ProtectedQuaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.Equality(GUPS.AntiCheat.Protected.ProtectedQuaternion, GUPS.AntiCheat.Protected.ProtectedQuaternion)
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.Equality(GUPS.AntiCheat.Protected.ProtectedQuaternion, GUPS.AntiCheat.Protected.ProtectedQuaternion)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 18447
      summary: "\nChecks if two protected Quaternion instances are equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedQuaternion v1, ProtectedQuaternion v2)
          VB: Public Shared Operator =(v1 As ProtectedQuaternion, v2 As ProtectedQuaternion) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The first protected Quaternion.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The second protected Quaternion.
        return:
          type: System.Boolean
          description: True if the values of the protected Quaternion instances are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Inequality(GUPS.AntiCheat.Protected.ProtectedQuaternion,GUPS.AntiCheat.Protected.ProtectedQuaternion)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Inequality(GUPS.AntiCheat.Protected.ProtectedQuaternion,GUPS.AntiCheat.Protected.ProtectedQuaternion)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedQuaternion, ProtectedQuaternion)
        VB: Inequality(ProtectedQuaternion, ProtectedQuaternion)
      nameWithType:
        CSharp: ProtectedQuaternion.Inequality(ProtectedQuaternion, ProtectedQuaternion)
        VB: ProtectedQuaternion.Inequality(ProtectedQuaternion, ProtectedQuaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.Inequality(GUPS.AntiCheat.Protected.ProtectedQuaternion, GUPS.AntiCheat.Protected.ProtectedQuaternion)
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.Inequality(GUPS.AntiCheat.Protected.ProtectedQuaternion, GUPS.AntiCheat.Protected.ProtectedQuaternion)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 18458
      summary: "\nChecks if two protected Quaternion instances are not equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedQuaternion v1, ProtectedQuaternion v2)
          VB: Public Shared Operator <>(v1 As ProtectedQuaternion, v2 As ProtectedQuaternion) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The first protected Quaternion.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The second protected Quaternion.
        return:
          type: System.Boolean
          description: True if the values of the protected Quaternion instances are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedQuaternion.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedQuaternion.Equals(Object)
        VB: ProtectedQuaternion.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedQuaternion.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedQuaternion.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 18468
      summary: "\nChecks if the protected Quaternion is equal to the specified object.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected Quaternion.
        return:
          type: System.Boolean
          description: True if the values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedQuaternion.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: GUPS.AntiCheat.Protected.ProtectedString
    commentId: T:GUPS.AntiCheat.Protected.ProtectedString
    language: CSharp
    name:
      CSharp: ProtectedString
      VB: ProtectedString
    nameWithType:
      CSharp: ProtectedString
      VB: ProtectedString
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedString
      VB: GUPS.AntiCheat.Protected.ProtectedString
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedString
      path: ''
      startLine: 18499
    summary: "\nRepresents a protected string that provides an additional layer of security for sensitive values.\nIn most cases, it is recommended to replace the default string type with the protected one, considering the overhead introduced by complex encryption and encoding.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedString
        VB: Public Structure ProtectedString
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedString.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedString.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedString.HasIntegrity
        VB: ProtectedString.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedString.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 18594
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedString.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedString.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedString.OnBeforeSerialize()
        VB: ProtectedString.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedString.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 18616
      summary: "\nUnity serialization hook. Ensures the correct values are serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedString.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedString.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedString.OnAfterDeserialize()
        VB: ProtectedString.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedString.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 18624
      summary: "\nUnity deserialization hook. Ensures the correct values are deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedString.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedString.#ctor(System.String)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.#ctor(System.String)
      language: CSharp
      name:
        CSharp: ProtectedString(String)
        VB: ProtectedString(String)
      nameWithType:
        CSharp: ProtectedString.ProtectedString(String)
        VB: ProtectedString.ProtectedString(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.ProtectedString(System.String)
        VB: GUPS.AntiCheat.Protected.ProtectedString.ProtectedString(System.String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 18633
      summary: "\nCreates a new protected string with the specified value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedString(string _Value = null)
          VB: Public Sub New(_Value As String = Nothing)
        parameters:
        - id: _Value
          type: System.String
          description: The initial value of the protected string.
      overload: GUPS.AntiCheat.Protected.ProtectedString.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedString.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedString.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedString.Value
        VB: ProtectedString.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.Value
        VB: GUPS.AntiCheat.Protected.ProtectedString.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 18650
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public string Value { get; set; }
          VB: Public Property Value As String
        parameters: []
        return:
          type: System.String
      overload: GUPS.AntiCheat.Protected.ProtectedString.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedString.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedString.Obfuscate()
        VB: ProtectedString.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedString.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 18700
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedString.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedString.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedString.CheckIntegrity()
        VB: ProtectedString.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedString.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 18716
      summary: "\nChecks the integrity of the protected value, detecting if an attacker changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedString.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedString.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedString.Dispose()
        VB: ProtectedString.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedString.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 18734
      summary: "\nReleases the resources used by the protected string.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedString.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedString.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedString.ToString()
        VB: ProtectedString.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedString.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 18744
      summary: "\nReturns a string representation of the protected string.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: A string representation of the protected string.
      overload: GUPS.AntiCheat.Protected.ProtectedString.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedString.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedString.GetHashCode()
        VB: ProtectedString.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedString.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 18753
      summary: "\nGets the hash code for the protected value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code for the protected value.
      overload: GUPS.AntiCheat.Protected.ProtectedString.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedString.op_Implicit(System.String)~GUPS.AntiCheat.Protected.ProtectedString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.op_Implicit(System.String)~GUPS.AntiCheat.Protected.ProtectedString
      language: CSharp
      name:
        CSharp: Implicit(String to ProtectedString)
        VB: Widening(String to ProtectedString)
      nameWithType:
        CSharp: ProtectedString.Implicit(String to ProtectedString)
        VB: ProtectedString.Widening(String to ProtectedString)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.Implicit(System.String to GUPS.AntiCheat.Protected.ProtectedString)
        VB: GUPS.AntiCheat.Protected.ProtectedString.Widening(System.String to GUPS.AntiCheat.Protected.ProtectedString)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 18797
      summary: "\nImplicitly converts a regular string to a protected string.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedString(string _Value)
          VB: Public Shared Widening Operator CType(_Value As String) As ProtectedString
        parameters:
        - id: _Value
          type: System.String
          description: The regular string to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedString
          description: A new instance of the protected string.
      overload: GUPS.AntiCheat.Protected.ProtectedString.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedString.op_Implicit(GUPS.AntiCheat.Protected.ProtectedString)~System.String
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.op_Implicit(GUPS.AntiCheat.Protected.ProtectedString)~System.String
      language: CSharp
      name:
        CSharp: Implicit(ProtectedString to String)
        VB: Widening(ProtectedString to String)
      nameWithType:
        CSharp: ProtectedString.Implicit(ProtectedString to String)
        VB: ProtectedString.Widening(ProtectedString to String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.Implicit(GUPS.AntiCheat.Protected.ProtectedString to System.String)
        VB: GUPS.AntiCheat.Protected.ProtectedString.Widening(GUPS.AntiCheat.Protected.ProtectedString to System.String)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 18807
      summary: "\nImplicitly converts a protected string to a regular string.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator string (ProtectedString _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedString) As String
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedString
          description: The protected string to be converted.
        return:
          type: System.String
          description: The true unencrypted value of the protected string.
      overload: GUPS.AntiCheat.Protected.ProtectedString.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedString.op_Addition(GUPS.AntiCheat.Protected.ProtectedString,GUPS.AntiCheat.Protected.ProtectedString)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.op_Addition(GUPS.AntiCheat.Protected.ProtectedString,GUPS.AntiCheat.Protected.ProtectedString)
      language: CSharp
      name:
        CSharp: Addition(ProtectedString, ProtectedString)
        VB: Addition(ProtectedString, ProtectedString)
      nameWithType:
        CSharp: ProtectedString.Addition(ProtectedString, ProtectedString)
        VB: ProtectedString.Addition(ProtectedString, ProtectedString)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.Addition(GUPS.AntiCheat.Protected.ProtectedString, GUPS.AntiCheat.Protected.ProtectedString)
        VB: GUPS.AntiCheat.Protected.ProtectedString.Addition(GUPS.AntiCheat.Protected.ProtectedString, GUPS.AntiCheat.Protected.ProtectedString)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Addition
        path: ''
        startLine: 18822
      summary: "\nConcatenates two protected strings.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedString operator +(ProtectedString v1, ProtectedString v2)
          VB: Public Shared Operator +(v1 As ProtectedString, v2 As ProtectedString) As ProtectedString
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedString
          description: The first protected string.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedString
          description: The second protected string.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedString
          description: A new protected string representing the concatenation of the input strings.
      overload: GUPS.AntiCheat.Protected.ProtectedString.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedString.op_Equality(GUPS.AntiCheat.Protected.ProtectedString,GUPS.AntiCheat.Protected.ProtectedString)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.op_Equality(GUPS.AntiCheat.Protected.ProtectedString,GUPS.AntiCheat.Protected.ProtectedString)
      language: CSharp
      name:
        CSharp: Equality(ProtectedString, ProtectedString)
        VB: Equality(ProtectedString, ProtectedString)
      nameWithType:
        CSharp: ProtectedString.Equality(ProtectedString, ProtectedString)
        VB: ProtectedString.Equality(ProtectedString, ProtectedString)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.Equality(GUPS.AntiCheat.Protected.ProtectedString, GUPS.AntiCheat.Protected.ProtectedString)
        VB: GUPS.AntiCheat.Protected.ProtectedString.Equality(GUPS.AntiCheat.Protected.ProtectedString, GUPS.AntiCheat.Protected.ProtectedString)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 18837
      summary: "\nChecks if two protected strings are equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedString v1, ProtectedString v2)
          VB: Public Shared Operator =(v1 As ProtectedString, v2 As ProtectedString) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedString
          description: The first protected string.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedString
          description: The second protected string.
        return:
          type: System.Boolean
          description: True if the values of the protected strings are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedString.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedString.op_Inequality(GUPS.AntiCheat.Protected.ProtectedString,GUPS.AntiCheat.Protected.ProtectedString)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.op_Inequality(GUPS.AntiCheat.Protected.ProtectedString,GUPS.AntiCheat.Protected.ProtectedString)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedString, ProtectedString)
        VB: Inequality(ProtectedString, ProtectedString)
      nameWithType:
        CSharp: ProtectedString.Inequality(ProtectedString, ProtectedString)
        VB: ProtectedString.Inequality(ProtectedString, ProtectedString)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.Inequality(GUPS.AntiCheat.Protected.ProtectedString, GUPS.AntiCheat.Protected.ProtectedString)
        VB: GUPS.AntiCheat.Protected.ProtectedString.Inequality(GUPS.AntiCheat.Protected.ProtectedString, GUPS.AntiCheat.Protected.ProtectedString)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 18848
      summary: "\nChecks if two protected strings are not equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedString v1, ProtectedString v2)
          VB: Public Shared Operator <>(v1 As ProtectedString, v2 As ProtectedString) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedString
          description: The first protected string.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedString
          description: The second protected string.
        return:
          type: System.Boolean
          description: True if the values of the protected strings are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedString.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedString.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedString.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedString.Equals(Object)
        VB: ProtectedString.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedString.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedString.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 18858
      summary: "\nChecks if the protected string is equal to the specified object.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected string.
        return:
          type: System.Boolean
          description: True if the values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedString.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: GUPS.AntiCheat.Protected.ProtectedUInt16
    commentId: T:GUPS.AntiCheat.Protected.ProtectedUInt16
    language: CSharp
    name:
      CSharp: ProtectedUInt16
      VB: ProtectedUInt16
    nameWithType:
      CSharp: ProtectedUInt16
      VB: ProtectedUInt16
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16
      VB: GUPS.AntiCheat.Protected.ProtectedUInt16
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedUInt16
      path: ''
      startLine: 18895
    summary: "\nRepresents a protected UInt16, designed to enhance integrity and security by obfuscating its value and incorporating anti-cheat measures.\nIn most cases, this protected UInt16 can be used as a drop-in replacement for the default UInt16 type.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedUInt16
        VB: Public Structure ProtectedUInt16
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedUInt16.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedUInt16.HasIntegrity
        VB: ProtectedUInt16.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 18907
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedUInt16.OnBeforeSerialize()
        VB: ProtectedUInt16.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 18929
      summary: "\nUnity serialization hook. Ensures the correct values will be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedUInt16.OnAfterDeserialize()
        VB: ProtectedUInt16.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 18937
      summary: "\nUnity deserialization hook. Ensures the correct values will be deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.#ctor(UInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.#ctor(UInt16)
      language: CSharp
      name:
        CSharp: ProtectedUInt16(UInt16)
        VB: ProtectedUInt16(UInt16)
      nameWithType:
        CSharp: ProtectedUInt16.ProtectedUInt16(UInt16)
        VB: ProtectedUInt16.ProtectedUInt16(UInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.ProtectedUInt16(UInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.ProtectedUInt16(UInt16)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 18946
      summary: "\nCreates a new protected UInt16 with the specified initial value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedUInt16(UInt16 _Value = null)
          VB: Public Sub New(_Value As UInt16 = Nothing)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.UInt16
          description: The initial value of the protected UInt16.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedUInt16.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedUInt16.Value
        VB: ProtectedUInt16.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.Value
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 18962
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public UInt16 Value { get; set; }
          VB: Public Property Value As UInt16
        parameters: []
        return:
          type: GUPS.AntiCheat.UInt16
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedUInt16.Obfuscate()
        VB: ProtectedUInt16.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 19011
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedUInt16.CheckIntegrity()
        VB: ProtectedUInt16.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 19027
      summary: "\nChecks the integrity of the protected value, detecting if an attacher changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedUInt16.Dispose()
        VB: ProtectedUInt16.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 19045
      summary: "\nDisposes of the secured and secret values.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedUInt16.ToString()
        VB: ProtectedUInt16.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 19055
      summary: "\nConverts the protected UInt16 to its string representation.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: The string representation of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedUInt16.GetHashCode()
        VB: ProtectedUInt16.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 19064
      summary: "\nGets the hash code of the protected UInt16&apos;s true value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Implicit(UInt16)~GUPS.AntiCheat.Protected.ProtectedUInt16
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Implicit(UInt16)~GUPS.AntiCheat.Protected.ProtectedUInt16
      language: CSharp
      name:
        CSharp: Implicit(UInt16 to ProtectedUInt16)
        VB: Widening(UInt16 to ProtectedUInt16)
      nameWithType:
        CSharp: ProtectedUInt16.Implicit(UInt16 to ProtectedUInt16)
        VB: ProtectedUInt16.Widening(UInt16 to ProtectedUInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.Implicit(UInt16 to GUPS.AntiCheat.Protected.ProtectedUInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.Widening(UInt16 to GUPS.AntiCheat.Protected.ProtectedUInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 19076
      summary: "\nImplicitly converts an UInt16 value to a protected UInt16.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedUInt16(UInt16 _Value)
          VB: Public Shared Widening Operator CType(_Value As UInt16) As ProtectedUInt16
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.UInt16
          description: The UInt16 value to convert.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The corresponding protected UInt16.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Implicit(GUPS.AntiCheat.Protected.ProtectedUInt16)~UInt16
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Implicit(GUPS.AntiCheat.Protected.ProtectedUInt16)~UInt16
      language: CSharp
      name:
        CSharp: Implicit(ProtectedUInt16 to UInt16)
        VB: Widening(ProtectedUInt16 to UInt16)
      nameWithType:
        CSharp: ProtectedUInt16.Implicit(ProtectedUInt16 to UInt16)
        VB: ProtectedUInt16.Widening(ProtectedUInt16 to UInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.Implicit(GUPS.AntiCheat.Protected.ProtectedUInt16 to UInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.Widening(GUPS.AntiCheat.Protected.ProtectedUInt16 to UInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 19086
      summary: "\nImplicitly converts a protected UInt16 to its UInt16 value.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator UInt16(ProtectedUInt16 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedUInt16) As UInt16
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The protected UInt16 to convert.
        return:
          type: GUPS.AntiCheat.UInt16
          description: The UInt16 value of the protected UInt16.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Addition(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Addition(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      language: CSharp
      name:
        CSharp: Addition(ProtectedUInt16, ProtectedUInt16)
        VB: Addition(ProtectedUInt16, ProtectedUInt16)
      nameWithType:
        CSharp: ProtectedUInt16.Addition(ProtectedUInt16, ProtectedUInt16)
        VB: ProtectedUInt16.Addition(ProtectedUInt16, ProtectedUInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.Addition(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.Addition(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Addition
        path: ''
        startLine: 19101
      summary: "\nAdds two protected UInt16 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedUInt16 operator +(ProtectedUInt16 v1, ProtectedUInt16 v2)
          VB: Public Shared Operator +(v1 As ProtectedUInt16, v2 As ProtectedUInt16) As ProtectedUInt16
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The first protected UInt16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The second protected UInt16.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The result of the addition.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      language: CSharp
      name:
        CSharp: Subtraction(ProtectedUInt16, ProtectedUInt16)
        VB: Subtraction(ProtectedUInt16, ProtectedUInt16)
      nameWithType:
        CSharp: ProtectedUInt16.Subtraction(ProtectedUInt16, ProtectedUInt16)
        VB: ProtectedUInt16.Subtraction(ProtectedUInt16, ProtectedUInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.Subtraction(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.Subtraction(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Subtraction
        path: ''
        startLine: 19112
      summary: "\nSubtracts the second protected UInt16 from the first.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedUInt16 operator -(ProtectedUInt16 v1, ProtectedUInt16 v2)
          VB: Public Shared Operator -(v1 As ProtectedUInt16, v2 As ProtectedUInt16) As ProtectedUInt16
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The first protected UInt16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The second protected UInt16.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The result of the subtraction.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Subtraction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Multiply(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Multiply(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      language: CSharp
      name:
        CSharp: Multiply(ProtectedUInt16, ProtectedUInt16)
        VB: Multiply(ProtectedUInt16, ProtectedUInt16)
      nameWithType:
        CSharp: ProtectedUInt16.Multiply(ProtectedUInt16, ProtectedUInt16)
        VB: ProtectedUInt16.Multiply(ProtectedUInt16, ProtectedUInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.Multiply(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.Multiply(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Multiply
        path: ''
        startLine: 19123
      summary: "\nMultiplies two protected UInt16 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedUInt16 operator *(ProtectedUInt16 v1, ProtectedUInt16 v2)
          VB: Public Shared Operator *(v1 As ProtectedUInt16, v2 As ProtectedUInt16) As ProtectedUInt16
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The first protected UInt16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The second protected UInt16.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The result of the multiplication.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Multiply*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Division(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Division(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      language: CSharp
      name:
        CSharp: Division(ProtectedUInt16, ProtectedUInt16)
        VB: Division(ProtectedUInt16, ProtectedUInt16)
      nameWithType:
        CSharp: ProtectedUInt16.Division(ProtectedUInt16, ProtectedUInt16)
        VB: ProtectedUInt16.Division(ProtectedUInt16, ProtectedUInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.Division(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.Division(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Division
        path: ''
        startLine: 19134
      summary: "\nDivides the first protected UInt16 by the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedUInt16 operator /(ProtectedUInt16 v1, ProtectedUInt16 v2)
          VB: Public Shared Operator /(v1 As ProtectedUInt16, v2 As ProtectedUInt16) As ProtectedUInt16
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The first protected UInt16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The second protected UInt16.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The result of the division.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Division*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Equality(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Equality(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      language: CSharp
      name:
        CSharp: Equality(ProtectedUInt16, ProtectedUInt16)
        VB: Equality(ProtectedUInt16, ProtectedUInt16)
      nameWithType:
        CSharp: ProtectedUInt16.Equality(ProtectedUInt16, ProtectedUInt16)
        VB: ProtectedUInt16.Equality(ProtectedUInt16, ProtectedUInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.Equality(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.Equality(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 19149
      summary: "\nChecks if two protected UInt16 values are equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedUInt16 v1, ProtectedUInt16 v2)
          VB: Public Shared Operator =(v1 As ProtectedUInt16, v2 As ProtectedUInt16) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The first protected UInt16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The second protected UInt16.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Inequality(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Inequality(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedUInt16, ProtectedUInt16)
        VB: Inequality(ProtectedUInt16, ProtectedUInt16)
      nameWithType:
        CSharp: ProtectedUInt16.Inequality(ProtectedUInt16, ProtectedUInt16)
        VB: ProtectedUInt16.Inequality(ProtectedUInt16, ProtectedUInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.Inequality(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.Inequality(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 19160
      summary: "\nChecks if two protected UInt16 values are not equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedUInt16 v1, ProtectedUInt16 v2)
          VB: Public Shared Operator <>(v1 As ProtectedUInt16, v2 As ProtectedUInt16) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The first protected UInt16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The second protected UInt16.
        return:
          type: System.Boolean
          description: True if the true values are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedUInt16.Equals(Object)
        VB: ProtectedUInt16.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 19170
      summary: "\nChecks if the protected UInt16 is equal to another object based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected UInt16.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThan(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThan(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      language: CSharp
      name:
        CSharp: LessThan(ProtectedUInt16, ProtectedUInt16)
        VB: LessThan(ProtectedUInt16, ProtectedUInt16)
      nameWithType:
        CSharp: ProtectedUInt16.LessThan(ProtectedUInt16, ProtectedUInt16)
        VB: ProtectedUInt16.LessThan(ProtectedUInt16, ProtectedUInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.LessThan(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.LessThan(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThan
        path: ''
        startLine: 19185
      summary: "\nCompares two protected UInt16 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <(ProtectedUInt16 v1, ProtectedUInt16 v2)
          VB: Public Shared Operator <(v1 As ProtectedUInt16, v2 As ProtectedUInt16) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The first protected UInt16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The second protected UInt16.
        return:
          type: System.Boolean
          description: True if the first value is less than the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      language: CSharp
      name:
        CSharp: LessThanOrEqual(ProtectedUInt16, ProtectedUInt16)
        VB: LessThanOrEqual(ProtectedUInt16, ProtectedUInt16)
      nameWithType:
        CSharp: ProtectedUInt16.LessThanOrEqual(ProtectedUInt16, ProtectedUInt16)
        VB: ProtectedUInt16.LessThanOrEqual(ProtectedUInt16, ProtectedUInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThanOrEqual
        path: ''
        startLine: 19196
      summary: "\nChecks if the first protected UInt16 is less than or equal to the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <=(ProtectedUInt16 v1, ProtectedUInt16 v2)
          VB: Public Shared Operator <=(v1 As ProtectedUInt16, v2 As ProtectedUInt16) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The first protected UInt16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The second protected UInt16.
        return:
          type: System.Boolean
          description: True if the first value is less than or equal to the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      language: CSharp
      name:
        CSharp: GreaterThan(ProtectedUInt16, ProtectedUInt16)
        VB: GreaterThan(ProtectedUInt16, ProtectedUInt16)
      nameWithType:
        CSharp: ProtectedUInt16.GreaterThan(ProtectedUInt16, ProtectedUInt16)
        VB: ProtectedUInt16.GreaterThan(ProtectedUInt16, ProtectedUInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.GreaterThan(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.GreaterThan(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThan
        path: ''
        startLine: 19207
      summary: "\nChecks if the first protected UInt16 is greater than the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator>(ProtectedUInt16 v1, ProtectedUInt16 v2)
          VB: Public Shared Operator>(v1 As ProtectedUInt16, v2 As ProtectedUInt16) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The first protected UInt16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The second protected UInt16.
        return:
          type: System.Boolean
          description: True if the first value is greater than the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt16,GUPS.AntiCheat.Protected.ProtectedUInt16)
      language: CSharp
      name:
        CSharp: GreaterThanOrEqual(ProtectedUInt16, ProtectedUInt16)
        VB: GreaterThanOrEqual(ProtectedUInt16, ProtectedUInt16)
      nameWithType:
        CSharp: ProtectedUInt16.GreaterThanOrEqual(ProtectedUInt16, ProtectedUInt16)
        VB: ProtectedUInt16.GreaterThanOrEqual(ProtectedUInt16, ProtectedUInt16)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt16.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt16.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt16, GUPS.AntiCheat.Protected.ProtectedUInt16)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThanOrEqual
        path: ''
        startLine: 19218
      summary: "\nChecks if the first protected UInt16 is greater than or equal to the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator >=(ProtectedUInt16 v1, ProtectedUInt16 v2)
          VB: Public Shared Operator >=(v1 As ProtectedUInt16, v2 As ProtectedUInt16) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The first protected UInt16.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt16
          description: The second protected UInt16.
        return:
          type: System.Boolean
          description: True if the first value is greater than or equal to the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: GUPS.AntiCheat.Protected.ProtectedUInt32
    commentId: T:GUPS.AntiCheat.Protected.ProtectedUInt32
    language: CSharp
    name:
      CSharp: ProtectedUInt32
      VB: ProtectedUInt32
    nameWithType:
      CSharp: ProtectedUInt32
      VB: ProtectedUInt32
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32
      VB: GUPS.AntiCheat.Protected.ProtectedUInt32
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedUInt32
      path: ''
      startLine: 19245
    summary: "\nRepresents a protected UInt32, designed to enhance integrity and security by obfuscating its value and incorporating anti-cheat measures.\nIn most cases, this protected UInt32 can be used as a drop-in replacement for the default UInt32 type.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedUInt32
        VB: Public Structure ProtectedUInt32
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedUInt32.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedUInt32.HasIntegrity
        VB: ProtectedUInt32.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 19257
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedUInt32.OnBeforeSerialize()
        VB: ProtectedUInt32.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 19279
      summary: "\nUnity serialization hook. Ensures the correct values will be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedUInt32.OnAfterDeserialize()
        VB: ProtectedUInt32.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 19287
      summary: "\nUnity deserialization hook. Ensures the correct values will be deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.#ctor(UInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.#ctor(UInt32)
      language: CSharp
      name:
        CSharp: ProtectedUInt32(UInt32)
        VB: ProtectedUInt32(UInt32)
      nameWithType:
        CSharp: ProtectedUInt32.ProtectedUInt32(UInt32)
        VB: ProtectedUInt32.ProtectedUInt32(UInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.ProtectedUInt32(UInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.ProtectedUInt32(UInt32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 19296
      summary: "\nCreates a new protected UInt32 with the specified initial value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedUInt32(UInt32 _Value = null)
          VB: Public Sub New(_Value As UInt32 = Nothing)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.UInt32
          description: The initial value of the protected UInt32.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedUInt32.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedUInt32.Value
        VB: ProtectedUInt32.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.Value
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 19312
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public UInt32 Value { get; set; }
          VB: Public Property Value As UInt32
        parameters: []
        return:
          type: GUPS.AntiCheat.UInt32
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedUInt32.Obfuscate()
        VB: ProtectedUInt32.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 19361
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedUInt32.CheckIntegrity()
        VB: ProtectedUInt32.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 19377
      summary: "\nChecks the integrity of the protected value, detecting if an attacher changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedUInt32.Dispose()
        VB: ProtectedUInt32.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 19395
      summary: "\nDisposes of the secured and secret values.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedUInt32.ToString()
        VB: ProtectedUInt32.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 19405
      summary: "\nConverts the protected UInt32 to its string representation.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: The string representation of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedUInt32.GetHashCode()
        VB: ProtectedUInt32.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 19414
      summary: "\nGets the hash code of the protected UInt32&apos;s true value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Implicit(UInt32)~GUPS.AntiCheat.Protected.ProtectedUInt32
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Implicit(UInt32)~GUPS.AntiCheat.Protected.ProtectedUInt32
      language: CSharp
      name:
        CSharp: Implicit(UInt32 to ProtectedUInt32)
        VB: Widening(UInt32 to ProtectedUInt32)
      nameWithType:
        CSharp: ProtectedUInt32.Implicit(UInt32 to ProtectedUInt32)
        VB: ProtectedUInt32.Widening(UInt32 to ProtectedUInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.Implicit(UInt32 to GUPS.AntiCheat.Protected.ProtectedUInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.Widening(UInt32 to GUPS.AntiCheat.Protected.ProtectedUInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 19426
      summary: "\nImplicitly converts an UInt32 value to a protected UInt32.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedUInt32(UInt32 _Value)
          VB: Public Shared Widening Operator CType(_Value As UInt32) As ProtectedUInt32
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.UInt32
          description: The UInt32 value to convert.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The corresponding protected UInt32.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Implicit(GUPS.AntiCheat.Protected.ProtectedUInt32)~UInt32
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Implicit(GUPS.AntiCheat.Protected.ProtectedUInt32)~UInt32
      language: CSharp
      name:
        CSharp: Implicit(ProtectedUInt32 to UInt32)
        VB: Widening(ProtectedUInt32 to UInt32)
      nameWithType:
        CSharp: ProtectedUInt32.Implicit(ProtectedUInt32 to UInt32)
        VB: ProtectedUInt32.Widening(ProtectedUInt32 to UInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.Implicit(GUPS.AntiCheat.Protected.ProtectedUInt32 to UInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.Widening(GUPS.AntiCheat.Protected.ProtectedUInt32 to UInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 19436
      summary: "\nImplicitly converts a protected UInt32 to its UInt32 value.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator UInt32(ProtectedUInt32 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedUInt32) As UInt32
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The protected UInt32 to convert.
        return:
          type: GUPS.AntiCheat.UInt32
          description: The UInt32 value of the protected UInt32.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Addition(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Addition(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      language: CSharp
      name:
        CSharp: Addition(ProtectedUInt32, ProtectedUInt32)
        VB: Addition(ProtectedUInt32, ProtectedUInt32)
      nameWithType:
        CSharp: ProtectedUInt32.Addition(ProtectedUInt32, ProtectedUInt32)
        VB: ProtectedUInt32.Addition(ProtectedUInt32, ProtectedUInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.Addition(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.Addition(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Addition
        path: ''
        startLine: 19451
      summary: "\nAdds two protected UInt32 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedUInt32 operator +(ProtectedUInt32 v1, ProtectedUInt32 v2)
          VB: Public Shared Operator +(v1 As ProtectedUInt32, v2 As ProtectedUInt32) As ProtectedUInt32
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The first protected UInt32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The second protected UInt32.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The result of the addition.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      language: CSharp
      name:
        CSharp: Subtraction(ProtectedUInt32, ProtectedUInt32)
        VB: Subtraction(ProtectedUInt32, ProtectedUInt32)
      nameWithType:
        CSharp: ProtectedUInt32.Subtraction(ProtectedUInt32, ProtectedUInt32)
        VB: ProtectedUInt32.Subtraction(ProtectedUInt32, ProtectedUInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.Subtraction(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.Subtraction(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Subtraction
        path: ''
        startLine: 19462
      summary: "\nSubtracts the second protected UInt32 from the first.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedUInt32 operator -(ProtectedUInt32 v1, ProtectedUInt32 v2)
          VB: Public Shared Operator -(v1 As ProtectedUInt32, v2 As ProtectedUInt32) As ProtectedUInt32
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The first protected UInt32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The second protected UInt32.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The result of the subtraction.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Subtraction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Multiply(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Multiply(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      language: CSharp
      name:
        CSharp: Multiply(ProtectedUInt32, ProtectedUInt32)
        VB: Multiply(ProtectedUInt32, ProtectedUInt32)
      nameWithType:
        CSharp: ProtectedUInt32.Multiply(ProtectedUInt32, ProtectedUInt32)
        VB: ProtectedUInt32.Multiply(ProtectedUInt32, ProtectedUInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.Multiply(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.Multiply(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Multiply
        path: ''
        startLine: 19473
      summary: "\nMultiplies two protected UInt32 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedUInt32 operator *(ProtectedUInt32 v1, ProtectedUInt32 v2)
          VB: Public Shared Operator *(v1 As ProtectedUInt32, v2 As ProtectedUInt32) As ProtectedUInt32
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The first protected UInt32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The second protected UInt32.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The result of the multiplication.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Multiply*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Division(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Division(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      language: CSharp
      name:
        CSharp: Division(ProtectedUInt32, ProtectedUInt32)
        VB: Division(ProtectedUInt32, ProtectedUInt32)
      nameWithType:
        CSharp: ProtectedUInt32.Division(ProtectedUInt32, ProtectedUInt32)
        VB: ProtectedUInt32.Division(ProtectedUInt32, ProtectedUInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.Division(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.Division(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Division
        path: ''
        startLine: 19484
      summary: "\nDivides the first protected UInt32 by the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedUInt32 operator /(ProtectedUInt32 v1, ProtectedUInt32 v2)
          VB: Public Shared Operator /(v1 As ProtectedUInt32, v2 As ProtectedUInt32) As ProtectedUInt32
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The first protected UInt32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The second protected UInt32.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The result of the division.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Division*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Equality(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Equality(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      language: CSharp
      name:
        CSharp: Equality(ProtectedUInt32, ProtectedUInt32)
        VB: Equality(ProtectedUInt32, ProtectedUInt32)
      nameWithType:
        CSharp: ProtectedUInt32.Equality(ProtectedUInt32, ProtectedUInt32)
        VB: ProtectedUInt32.Equality(ProtectedUInt32, ProtectedUInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.Equality(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.Equality(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 19499
      summary: "\nChecks if two protected UInt32 values are equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedUInt32 v1, ProtectedUInt32 v2)
          VB: Public Shared Operator =(v1 As ProtectedUInt32, v2 As ProtectedUInt32) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The first protected UInt32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The second protected UInt32.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Inequality(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Inequality(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedUInt32, ProtectedUInt32)
        VB: Inequality(ProtectedUInt32, ProtectedUInt32)
      nameWithType:
        CSharp: ProtectedUInt32.Inequality(ProtectedUInt32, ProtectedUInt32)
        VB: ProtectedUInt32.Inequality(ProtectedUInt32, ProtectedUInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.Inequality(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.Inequality(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 19510
      summary: "\nChecks if two protected UInt32 values are not equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedUInt32 v1, ProtectedUInt32 v2)
          VB: Public Shared Operator <>(v1 As ProtectedUInt32, v2 As ProtectedUInt32) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The first protected UInt32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The second protected UInt32.
        return:
          type: System.Boolean
          description: True if the true values are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedUInt32.Equals(Object)
        VB: ProtectedUInt32.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 19520
      summary: "\nChecks if the protected UInt32 is equal to another object based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected UInt32.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThan(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThan(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      language: CSharp
      name:
        CSharp: LessThan(ProtectedUInt32, ProtectedUInt32)
        VB: LessThan(ProtectedUInt32, ProtectedUInt32)
      nameWithType:
        CSharp: ProtectedUInt32.LessThan(ProtectedUInt32, ProtectedUInt32)
        VB: ProtectedUInt32.LessThan(ProtectedUInt32, ProtectedUInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.LessThan(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.LessThan(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThan
        path: ''
        startLine: 19535
      summary: "\nCompares two protected UInt32 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <(ProtectedUInt32 v1, ProtectedUInt32 v2)
          VB: Public Shared Operator <(v1 As ProtectedUInt32, v2 As ProtectedUInt32) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The first protected UInt32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The second protected UInt32.
        return:
          type: System.Boolean
          description: True if the first value is less than the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      language: CSharp
      name:
        CSharp: LessThanOrEqual(ProtectedUInt32, ProtectedUInt32)
        VB: LessThanOrEqual(ProtectedUInt32, ProtectedUInt32)
      nameWithType:
        CSharp: ProtectedUInt32.LessThanOrEqual(ProtectedUInt32, ProtectedUInt32)
        VB: ProtectedUInt32.LessThanOrEqual(ProtectedUInt32, ProtectedUInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThanOrEqual
        path: ''
        startLine: 19546
      summary: "\nChecks if the first protected UInt32 is less than or equal to the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <=(ProtectedUInt32 v1, ProtectedUInt32 v2)
          VB: Public Shared Operator <=(v1 As ProtectedUInt32, v2 As ProtectedUInt32) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The first protected UInt32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The second protected UInt32.
        return:
          type: System.Boolean
          description: True if the first value is less than or equal to the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      language: CSharp
      name:
        CSharp: GreaterThan(ProtectedUInt32, ProtectedUInt32)
        VB: GreaterThan(ProtectedUInt32, ProtectedUInt32)
      nameWithType:
        CSharp: ProtectedUInt32.GreaterThan(ProtectedUInt32, ProtectedUInt32)
        VB: ProtectedUInt32.GreaterThan(ProtectedUInt32, ProtectedUInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.GreaterThan(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.GreaterThan(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThan
        path: ''
        startLine: 19557
      summary: "\nChecks if the first protected UInt32 is greater than the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator>(ProtectedUInt32 v1, ProtectedUInt32 v2)
          VB: Public Shared Operator>(v1 As ProtectedUInt32, v2 As ProtectedUInt32) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The first protected UInt32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The second protected UInt32.
        return:
          type: System.Boolean
          description: True if the first value is greater than the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt32,GUPS.AntiCheat.Protected.ProtectedUInt32)
      language: CSharp
      name:
        CSharp: GreaterThanOrEqual(ProtectedUInt32, ProtectedUInt32)
        VB: GreaterThanOrEqual(ProtectedUInt32, ProtectedUInt32)
      nameWithType:
        CSharp: ProtectedUInt32.GreaterThanOrEqual(ProtectedUInt32, ProtectedUInt32)
        VB: ProtectedUInt32.GreaterThanOrEqual(ProtectedUInt32, ProtectedUInt32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt32.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt32.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt32, GUPS.AntiCheat.Protected.ProtectedUInt32)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThanOrEqual
        path: ''
        startLine: 19568
      summary: "\nChecks if the first protected UInt32 is greater than or equal to the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator >=(ProtectedUInt32 v1, ProtectedUInt32 v2)
          VB: Public Shared Operator >=(v1 As ProtectedUInt32, v2 As ProtectedUInt32) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The first protected UInt32.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt32
          description: The second protected UInt32.
        return:
          type: System.Boolean
          description: True if the first value is greater than or equal to the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: GUPS.AntiCheat.Protected.ProtectedUInt64
    commentId: T:GUPS.AntiCheat.Protected.ProtectedUInt64
    language: CSharp
    name:
      CSharp: ProtectedUInt64
      VB: ProtectedUInt64
    nameWithType:
      CSharp: ProtectedUInt64
      VB: ProtectedUInt64
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64
      VB: GUPS.AntiCheat.Protected.ProtectedUInt64
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedUInt64
      path: ''
      startLine: 19595
    summary: "\nRepresents a protected UInt64, designed to enhance integrity and security by obfuscating its value and incorporating anti-cheat measures.\nIn most cases, this protected UInt64 can be used as a drop-in replacement for the default UInt64 type.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedUInt64
        VB: Public Structure ProtectedUInt64
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedUInt64.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedUInt64.HasIntegrity
        VB: ProtectedUInt64.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 19607
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedUInt64.OnBeforeSerialize()
        VB: ProtectedUInt64.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 19629
      summary: "\nUnity serialization hook. Ensures the correct values will be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedUInt64.OnAfterDeserialize()
        VB: ProtectedUInt64.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 19637
      summary: "\nUnity deserialization hook. Ensures the correct values will be deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.#ctor(UInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.#ctor(UInt64)
      language: CSharp
      name:
        CSharp: ProtectedUInt64(UInt64)
        VB: ProtectedUInt64(UInt64)
      nameWithType:
        CSharp: ProtectedUInt64.ProtectedUInt64(UInt64)
        VB: ProtectedUInt64.ProtectedUInt64(UInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.ProtectedUInt64(UInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.ProtectedUInt64(UInt64)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 19646
      summary: "\nCreates a new protected UInt64 with the specified initial value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedUInt64(UInt64 _Value = null)
          VB: Public Sub New(_Value As UInt64 = Nothing)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.UInt64
          description: The initial value of the protected UInt64.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedUInt64.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedUInt64.Value
        VB: ProtectedUInt64.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.Value
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 19662
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public UInt64 Value { get; set; }
          VB: Public Property Value As UInt64
        parameters: []
        return:
          type: GUPS.AntiCheat.UInt64
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedUInt64.Obfuscate()
        VB: ProtectedUInt64.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 19711
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedUInt64.CheckIntegrity()
        VB: ProtectedUInt64.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 19727
      summary: "\nChecks the integrity of the protected value, detecting if an attacher changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedUInt64.Dispose()
        VB: ProtectedUInt64.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 19745
      summary: "\nDisposes of the secured and secret values.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedUInt64.ToString()
        VB: ProtectedUInt64.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 19755
      summary: "\nConverts the protected UInt64 to its string representation.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: The string representation of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedUInt64.GetHashCode()
        VB: ProtectedUInt64.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 19764
      summary: "\nGets the hash code of the protected UInt64&apos;s true value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code of the true value.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Implicit(UInt64)~GUPS.AntiCheat.Protected.ProtectedUInt64
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Implicit(UInt64)~GUPS.AntiCheat.Protected.ProtectedUInt64
      language: CSharp
      name:
        CSharp: Implicit(UInt64 to ProtectedUInt64)
        VB: Widening(UInt64 to ProtectedUInt64)
      nameWithType:
        CSharp: ProtectedUInt64.Implicit(UInt64 to ProtectedUInt64)
        VB: ProtectedUInt64.Widening(UInt64 to ProtectedUInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.Implicit(UInt64 to GUPS.AntiCheat.Protected.ProtectedUInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.Widening(UInt64 to GUPS.AntiCheat.Protected.ProtectedUInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 19776
      summary: "\nImplicitly converts an UInt64 value to a protected UInt64.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedUInt64(UInt64 _Value)
          VB: Public Shared Widening Operator CType(_Value As UInt64) As ProtectedUInt64
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.UInt64
          description: The UInt64 value to convert.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The corresponding protected UInt64.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Implicit(GUPS.AntiCheat.Protected.ProtectedUInt64)~UInt64
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Implicit(GUPS.AntiCheat.Protected.ProtectedUInt64)~UInt64
      language: CSharp
      name:
        CSharp: Implicit(ProtectedUInt64 to UInt64)
        VB: Widening(ProtectedUInt64 to UInt64)
      nameWithType:
        CSharp: ProtectedUInt64.Implicit(ProtectedUInt64 to UInt64)
        VB: ProtectedUInt64.Widening(ProtectedUInt64 to UInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.Implicit(GUPS.AntiCheat.Protected.ProtectedUInt64 to UInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.Widening(GUPS.AntiCheat.Protected.ProtectedUInt64 to UInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 19786
      summary: "\nImplicitly converts a protected UInt64 to its UInt64 value.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator UInt64(ProtectedUInt64 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedUInt64) As UInt64
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The protected UInt64 to convert.
        return:
          type: GUPS.AntiCheat.UInt64
          description: The UInt64 value of the protected UInt64.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Addition(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Addition(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      language: CSharp
      name:
        CSharp: Addition(ProtectedUInt64, ProtectedUInt64)
        VB: Addition(ProtectedUInt64, ProtectedUInt64)
      nameWithType:
        CSharp: ProtectedUInt64.Addition(ProtectedUInt64, ProtectedUInt64)
        VB: ProtectedUInt64.Addition(ProtectedUInt64, ProtectedUInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.Addition(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.Addition(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Addition
        path: ''
        startLine: 19801
      summary: "\nAdds two protected UInt64 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedUInt64 operator +(ProtectedUInt64 v1, ProtectedUInt64 v2)
          VB: Public Shared Operator +(v1 As ProtectedUInt64, v2 As ProtectedUInt64) As ProtectedUInt64
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The first protected UInt64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The second protected UInt64.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The result of the addition.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Addition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Subtraction(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      language: CSharp
      name:
        CSharp: Subtraction(ProtectedUInt64, ProtectedUInt64)
        VB: Subtraction(ProtectedUInt64, ProtectedUInt64)
      nameWithType:
        CSharp: ProtectedUInt64.Subtraction(ProtectedUInt64, ProtectedUInt64)
        VB: ProtectedUInt64.Subtraction(ProtectedUInt64, ProtectedUInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.Subtraction(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.Subtraction(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Subtraction
        path: ''
        startLine: 19812
      summary: "\nSubtracts the second protected UInt64 from the first.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedUInt64 operator -(ProtectedUInt64 v1, ProtectedUInt64 v2)
          VB: Public Shared Operator -(v1 As ProtectedUInt64, v2 As ProtectedUInt64) As ProtectedUInt64
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The first protected UInt64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The second protected UInt64.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The result of the subtraction.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Subtraction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Multiply(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Multiply(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      language: CSharp
      name:
        CSharp: Multiply(ProtectedUInt64, ProtectedUInt64)
        VB: Multiply(ProtectedUInt64, ProtectedUInt64)
      nameWithType:
        CSharp: ProtectedUInt64.Multiply(ProtectedUInt64, ProtectedUInt64)
        VB: ProtectedUInt64.Multiply(ProtectedUInt64, ProtectedUInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.Multiply(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.Multiply(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Multiply
        path: ''
        startLine: 19823
      summary: "\nMultiplies two protected UInt64 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedUInt64 operator *(ProtectedUInt64 v1, ProtectedUInt64 v2)
          VB: Public Shared Operator *(v1 As ProtectedUInt64, v2 As ProtectedUInt64) As ProtectedUInt64
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The first protected UInt64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The second protected UInt64.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The result of the multiplication.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Multiply*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Division(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Division(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      language: CSharp
      name:
        CSharp: Division(ProtectedUInt64, ProtectedUInt64)
        VB: Division(ProtectedUInt64, ProtectedUInt64)
      nameWithType:
        CSharp: ProtectedUInt64.Division(ProtectedUInt64, ProtectedUInt64)
        VB: ProtectedUInt64.Division(ProtectedUInt64, ProtectedUInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.Division(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.Division(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Division
        path: ''
        startLine: 19834
      summary: "\nDivides the first protected UInt64 by the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static ProtectedUInt64 operator /(ProtectedUInt64 v1, ProtectedUInt64 v2)
          VB: Public Shared Operator /(v1 As ProtectedUInt64, v2 As ProtectedUInt64) As ProtectedUInt64
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The first protected UInt64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The second protected UInt64.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The result of the division.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Division*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Equality(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Equality(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      language: CSharp
      name:
        CSharp: Equality(ProtectedUInt64, ProtectedUInt64)
        VB: Equality(ProtectedUInt64, ProtectedUInt64)
      nameWithType:
        CSharp: ProtectedUInt64.Equality(ProtectedUInt64, ProtectedUInt64)
        VB: ProtectedUInt64.Equality(ProtectedUInt64, ProtectedUInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.Equality(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.Equality(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 19849
      summary: "\nChecks if two protected UInt64 values are equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedUInt64 v1, ProtectedUInt64 v2)
          VB: Public Shared Operator =(v1 As ProtectedUInt64, v2 As ProtectedUInt64) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The first protected UInt64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The second protected UInt64.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Inequality(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Inequality(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedUInt64, ProtectedUInt64)
        VB: Inequality(ProtectedUInt64, ProtectedUInt64)
      nameWithType:
        CSharp: ProtectedUInt64.Inequality(ProtectedUInt64, ProtectedUInt64)
        VB: ProtectedUInt64.Inequality(ProtectedUInt64, ProtectedUInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.Inequality(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.Inequality(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 19860
      summary: "\nChecks if two protected UInt64 values are not equal based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedUInt64 v1, ProtectedUInt64 v2)
          VB: Public Shared Operator <>(v1 As ProtectedUInt64, v2 As ProtectedUInt64) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The first protected UInt64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The second protected UInt64.
        return:
          type: System.Boolean
          description: True if the true values are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedUInt64.Equals(Object)
        VB: ProtectedUInt64.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 19870
      summary: "\nChecks if the protected UInt64 is equal to another object based on their true values.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected UInt64.
        return:
          type: System.Boolean
          description: True if the true values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThan(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThan(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      language: CSharp
      name:
        CSharp: LessThan(ProtectedUInt64, ProtectedUInt64)
        VB: LessThan(ProtectedUInt64, ProtectedUInt64)
      nameWithType:
        CSharp: ProtectedUInt64.LessThan(ProtectedUInt64, ProtectedUInt64)
        VB: ProtectedUInt64.LessThan(ProtectedUInt64, ProtectedUInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.LessThan(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.LessThan(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThan
        path: ''
        startLine: 19885
      summary: "\nCompares two protected UInt64 values.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <(ProtectedUInt64 v1, ProtectedUInt64 v2)
          VB: Public Shared Operator <(v1 As ProtectedUInt64, v2 As ProtectedUInt64) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The first protected UInt64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The second protected UInt64.
        return:
          type: System.Boolean
          description: True if the first value is less than the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      language: CSharp
      name:
        CSharp: LessThanOrEqual(ProtectedUInt64, ProtectedUInt64)
        VB: LessThanOrEqual(ProtectedUInt64, ProtectedUInt64)
      nameWithType:
        CSharp: ProtectedUInt64.LessThanOrEqual(ProtectedUInt64, ProtectedUInt64)
        VB: ProtectedUInt64.LessThanOrEqual(ProtectedUInt64, ProtectedUInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.LessThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_LessThanOrEqual
        path: ''
        startLine: 19896
      summary: "\nChecks if the first protected UInt64 is less than or equal to the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator <=(ProtectedUInt64 v1, ProtectedUInt64 v2)
          VB: Public Shared Operator <=(v1 As ProtectedUInt64, v2 As ProtectedUInt64) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The first protected UInt64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The second protected UInt64.
        return:
          type: System.Boolean
          description: True if the first value is less than or equal to the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThan(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      language: CSharp
      name:
        CSharp: GreaterThan(ProtectedUInt64, ProtectedUInt64)
        VB: GreaterThan(ProtectedUInt64, ProtectedUInt64)
      nameWithType:
        CSharp: ProtectedUInt64.GreaterThan(ProtectedUInt64, ProtectedUInt64)
        VB: ProtectedUInt64.GreaterThan(ProtectedUInt64, ProtectedUInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.GreaterThan(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.GreaterThan(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThan
        path: ''
        startLine: 19907
      summary: "\nChecks if the first protected UInt64 is greater than the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator>(ProtectedUInt64 v1, ProtectedUInt64 v2)
          VB: Public Shared Operator>(v1 As ProtectedUInt64, v2 As ProtectedUInt64) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The first protected UInt64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The second protected UInt64.
        return:
          type: System.Boolean
          description: True if the first value is greater than the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThan*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt64,GUPS.AntiCheat.Protected.ProtectedUInt64)
      language: CSharp
      name:
        CSharp: GreaterThanOrEqual(ProtectedUInt64, ProtectedUInt64)
        VB: GreaterThanOrEqual(ProtectedUInt64, ProtectedUInt64)
      nameWithType:
        CSharp: ProtectedUInt64.GreaterThanOrEqual(ProtectedUInt64, ProtectedUInt64)
        VB: ProtectedUInt64.GreaterThanOrEqual(ProtectedUInt64, ProtectedUInt64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedUInt64.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
        VB: GUPS.AntiCheat.Protected.ProtectedUInt64.GreaterThanOrEqual(GUPS.AntiCheat.Protected.ProtectedUInt64, GUPS.AntiCheat.Protected.ProtectedUInt64)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_GreaterThanOrEqual
        path: ''
        startLine: 19918
      summary: "\nChecks if the first protected UInt64 is greater than or equal to the second.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator >=(ProtectedUInt64 v1, ProtectedUInt64 v2)
          VB: Public Shared Operator >=(v1 As ProtectedUInt64, v2 As ProtectedUInt64) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The first protected UInt64.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedUInt64
          description: The second protected UInt64.
        return:
          type: System.Boolean
          description: True if the first value is greater than or equal to the second; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThanOrEqual*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: GUPS.AntiCheat.Protected.ProtectedVector2
    commentId: T:GUPS.AntiCheat.Protected.ProtectedVector2
    language: CSharp
    name:
      CSharp: ProtectedVector2
      VB: ProtectedVector2
    nameWithType:
      CSharp: ProtectedVector2
      VB: ProtectedVector2
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedVector2
      VB: GUPS.AntiCheat.Protected.ProtectedVector2
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedVector2
      path: ''
      startLine: 19945
    summary: "\nRepresents a protected Vector2, enhancing security for sensitive vector data. \nIn most scenarios, it is recommended to replace the default Vector2 type with this protected variant.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedVector2
        VB: Public Structure ProtectedVector2
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedVector2.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedVector2.HasIntegrity
        VB: ProtectedVector2.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 19957
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedVector2.OnBeforeSerialize()
        VB: ProtectedVector2.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 19989
      summary: "\nUnity serialization hook. Ensures the correct values are serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedVector2.OnAfterDeserialize()
        VB: ProtectedVector2.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 19997
      summary: "\nUnity deserialization hook. Ensures the correct values are deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.#ctor(Vector2)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.#ctor(Vector2)
      language: CSharp
      name:
        CSharp: ProtectedVector2(Vector2)
        VB: ProtectedVector2(Vector2)
      nameWithType:
        CSharp: ProtectedVector2.ProtectedVector2(Vector2)
        VB: ProtectedVector2.ProtectedVector2(Vector2)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.ProtectedVector2(Vector2)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.ProtectedVector2(Vector2)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 20006
      summary: "\nCreates a new protected Vector2 with the specified value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedVector2(Vector2 _Value)
          VB: Public Sub New(_Value As Vector2)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Vector2
          description: The initial value of the protected Vector2.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedVector2.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedVector2.Value
        VB: ProtectedVector2.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.Value
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 20037
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector2 Value { get; set; }
          VB: Public Property Value As Vector2
        parameters: []
        return:
          type: GUPS.AntiCheat.Vector2
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedVector2.Obfuscate()
        VB: ProtectedVector2.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 20101
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedVector2.CheckIntegrity()
        VB: ProtectedVector2.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 20117
      summary: "\nChecks the integrity of the protected value, detecting if an attacker changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedVector2.Dispose()
        VB: ProtectedVector2.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 20135
      summary: "\nReleases the resources used by the protected Vector2.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedVector2.ToString()
        VB: ProtectedVector2.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 20147
      summary: "\nReturns a string representation of the protected Vector2.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: A string representation of the protected Vector2.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedVector2.GetHashCode()
        VB: ProtectedVector2.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 20156
      summary: "\nGets the hash code for the protected value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code for the protected value.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit(Vector2)~GUPS.AntiCheat.Protected.ProtectedVector2
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit(Vector2)~GUPS.AntiCheat.Protected.ProtectedVector2
      language: CSharp
      name:
        CSharp: Implicit(Vector2 to ProtectedVector2)
        VB: Widening(Vector2 to ProtectedVector2)
      nameWithType:
        CSharp: ProtectedVector2.Implicit(Vector2 to ProtectedVector2)
        VB: ProtectedVector2.Widening(Vector2 to ProtectedVector2)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.Implicit(Vector2 to GUPS.AntiCheat.Protected.ProtectedVector2)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.Widening(Vector2 to GUPS.AntiCheat.Protected.ProtectedVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 20199
      summary: "\nImplicitly converts a regular Vector2 to a protected Vector2.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedVector2(Vector2 _Value)
          VB: Public Shared Widening Operator CType(_Value As Vector2) As ProtectedVector2
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Vector2
          description: The regular Vector2 to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedVector2
          description: A new instance of the protected Vector2.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector2)~Vector2
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector2)~Vector2
      language: CSharp
      name:
        CSharp: Implicit(ProtectedVector2 to Vector2)
        VB: Widening(ProtectedVector2 to Vector2)
      nameWithType:
        CSharp: ProtectedVector2.Implicit(ProtectedVector2 to Vector2)
        VB: ProtectedVector2.Widening(ProtectedVector2 to Vector2)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.Implicit(GUPS.AntiCheat.Protected.ProtectedVector2 to Vector2)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.Widening(GUPS.AntiCheat.Protected.ProtectedVector2 to Vector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 20209
      summary: "\nImplicitly converts a protected Vector2 to a regular Vector2.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator Vector2(ProtectedVector2 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedVector2) As Vector2
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedVector2
          description: The protected Vector2 to be converted.
        return:
          type: GUPS.AntiCheat.Vector2
          description: The true unencrypted value of the protected Vector2.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector2)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector2)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      language: CSharp
      name:
        CSharp: Implicit(ProtectedVector2 to ProtectedQuaternion)
        VB: Widening(ProtectedVector2 to ProtectedQuaternion)
      nameWithType:
        CSharp: ProtectedVector2.Implicit(ProtectedVector2 to ProtectedQuaternion)
        VB: ProtectedVector2.Widening(ProtectedVector2 to ProtectedQuaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.Implicit(GUPS.AntiCheat.Protected.ProtectedVector2 to GUPS.AntiCheat.Protected.ProtectedQuaternion)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.Widening(GUPS.AntiCheat.Protected.ProtectedVector2 to GUPS.AntiCheat.Protected.ProtectedQuaternion)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 20219
      summary: "\nImplicitly converts a protected Vector2 to a protected Quaternion.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedQuaternion(ProtectedVector2 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedVector2) As ProtectedQuaternion
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedVector2
          description: The protected Vector2 to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The encrypted value as protected Quaternion.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~GUPS.AntiCheat.Protected.ProtectedVector2
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~GUPS.AntiCheat.Protected.ProtectedVector2
      language: CSharp
      name:
        CSharp: Implicit(ProtectedQuaternion to ProtectedVector2)
        VB: Widening(ProtectedQuaternion to ProtectedVector2)
      nameWithType:
        CSharp: ProtectedVector2.Implicit(ProtectedQuaternion to ProtectedVector2)
        VB: ProtectedVector2.Widening(ProtectedQuaternion to ProtectedVector2)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion to GUPS.AntiCheat.Protected.ProtectedVector2)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.Widening(GUPS.AntiCheat.Protected.ProtectedQuaternion to GUPS.AntiCheat.Protected.ProtectedVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 20229
      summary: "\nImplicitly converts a protected Quaternion to a protected Vector2.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedVector2(ProtectedQuaternion _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedQuaternion) As ProtectedVector2
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The protected Quaternion to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedVector2
          description: The encrypted value as protected Vector2.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.op_Equality(GUPS.AntiCheat.Protected.ProtectedVector2,GUPS.AntiCheat.Protected.ProtectedVector2)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.op_Equality(GUPS.AntiCheat.Protected.ProtectedVector2,GUPS.AntiCheat.Protected.ProtectedVector2)
      language: CSharp
      name:
        CSharp: Equality(ProtectedVector2, ProtectedVector2)
        VB: Equality(ProtectedVector2, ProtectedVector2)
      nameWithType:
        CSharp: ProtectedVector2.Equality(ProtectedVector2, ProtectedVector2)
        VB: ProtectedVector2.Equality(ProtectedVector2, ProtectedVector2)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.Equality(GUPS.AntiCheat.Protected.ProtectedVector2, GUPS.AntiCheat.Protected.ProtectedVector2)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.Equality(GUPS.AntiCheat.Protected.ProtectedVector2, GUPS.AntiCheat.Protected.ProtectedVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 20244
      summary: "\nChecks if two protected Vector2 instances are equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedVector2 v1, ProtectedVector2 v2)
          VB: Public Shared Operator =(v1 As ProtectedVector2, v2 As ProtectedVector2) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedVector2
          description: The first protected Vector2.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedVector2
          description: The second protected Vector2.
        return:
          type: System.Boolean
          description: True if the values of the protected Vector2 instances are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.op_Inequality(GUPS.AntiCheat.Protected.ProtectedVector2,GUPS.AntiCheat.Protected.ProtectedVector2)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.op_Inequality(GUPS.AntiCheat.Protected.ProtectedVector2,GUPS.AntiCheat.Protected.ProtectedVector2)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedVector2, ProtectedVector2)
        VB: Inequality(ProtectedVector2, ProtectedVector2)
      nameWithType:
        CSharp: ProtectedVector2.Inequality(ProtectedVector2, ProtectedVector2)
        VB: ProtectedVector2.Inequality(ProtectedVector2, ProtectedVector2)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.Inequality(GUPS.AntiCheat.Protected.ProtectedVector2, GUPS.AntiCheat.Protected.ProtectedVector2)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.Inequality(GUPS.AntiCheat.Protected.ProtectedVector2, GUPS.AntiCheat.Protected.ProtectedVector2)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 20255
      summary: "\nChecks if two protected Vector2 instances are not equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedVector2 v1, ProtectedVector2 v2)
          VB: Public Shared Operator <>(v1 As ProtectedVector2, v2 As ProtectedVector2) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedVector2
          description: The first protected Vector2.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedVector2
          description: The second protected Vector2.
        return:
          type: System.Boolean
          description: True if the values of the protected Vector2 instances are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector2.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedVector2.Equals(Object)
        VB: ProtectedVector2.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 20265
      summary: "\nChecks if the protected Vector2 is equal to the specified object.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected Vector2.
        return:
          type: System.Boolean
          description: True if the values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: GUPS.AntiCheat.Protected.ProtectedVector2Int
    commentId: T:GUPS.AntiCheat.Protected.ProtectedVector2Int
    language: CSharp
    name:
      CSharp: ProtectedVector2Int
      VB: ProtectedVector2Int
    nameWithType:
      CSharp: ProtectedVector2Int
      VB: ProtectedVector2Int
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int
      VB: GUPS.AntiCheat.Protected.ProtectedVector2Int
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedVector2Int
      path: ''
      startLine: 20296
    summary: "\nRepresents a protected Vector2Int, enhancing security for sensitive vector data. \nIn most scenarios, it is recommended to replace the default Vector2Int type with this protected variant.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedVector2Int
        VB: Public Structure ProtectedVector2Int
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedVector2Int.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedVector2Int.HasIntegrity
        VB: ProtectedVector2Int.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 20308
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedVector2Int.OnBeforeSerialize()
        VB: ProtectedVector2Int.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 20335
      summary: "\nUnity serialization hook. Ensures the correct values are serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedVector2Int.OnAfterDeserialize()
        VB: ProtectedVector2Int.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 20343
      summary: "\nUnity deserialization hook. Ensures the correct values are deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.#ctor(Vector2Int)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.#ctor(Vector2Int)
      language: CSharp
      name:
        CSharp: ProtectedVector2Int(Vector2Int)
        VB: ProtectedVector2Int(Vector2Int)
      nameWithType:
        CSharp: ProtectedVector2Int.ProtectedVector2Int(Vector2Int)
        VB: ProtectedVector2Int.ProtectedVector2Int(Vector2Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.ProtectedVector2Int(Vector2Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.ProtectedVector2Int(Vector2Int)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 20352
      summary: "\nCreates a new protected Vector2Int with the specified value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedVector2Int(Vector2Int _Value)
          VB: Public Sub New(_Value As Vector2Int)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Vector2Int
          description: The initial value of the protected Vector2Int.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedVector2Int.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedVector2Int.Value
        VB: ProtectedVector2Int.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.Value
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 20377
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector2Int Value { get; set; }
          VB: Public Property Value As Vector2Int
        parameters: []
        return:
          type: GUPS.AntiCheat.Vector2Int
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedVector2Int.Obfuscate()
        VB: ProtectedVector2Int.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 20433
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedVector2Int.CheckIntegrity()
        VB: ProtectedVector2Int.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 20449
      summary: "\nChecks the integrity of the protected value, detecting if an attacker changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedVector2Int.Dispose()
        VB: ProtectedVector2Int.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 20467
      summary: "\nReleases the resources used by the protected Vector2Int.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedVector2Int.ToString()
        VB: ProtectedVector2Int.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 20478
      summary: "\nReturns a string representation of the protected Vector2Int.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: A string representation of the protected Vector2Int.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedVector2Int.GetHashCode()
        VB: ProtectedVector2Int.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 20487
      summary: "\nGets the hash code for the protected value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code for the protected value.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit(Vector2Int)~GUPS.AntiCheat.Protected.ProtectedVector2Int
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit(Vector2Int)~GUPS.AntiCheat.Protected.ProtectedVector2Int
      language: CSharp
      name:
        CSharp: Implicit(Vector2Int to ProtectedVector2Int)
        VB: Widening(Vector2Int to ProtectedVector2Int)
      nameWithType:
        CSharp: ProtectedVector2Int.Implicit(Vector2Int to ProtectedVector2Int)
        VB: ProtectedVector2Int.Widening(Vector2Int to ProtectedVector2Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.Implicit(Vector2Int to GUPS.AntiCheat.Protected.ProtectedVector2Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.Widening(Vector2Int to GUPS.AntiCheat.Protected.ProtectedVector2Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 20499
      summary: "\nImplicitly converts a regular Vector2Int to a protected Vector2Int.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedVector2Int(Vector2Int _Value)
          VB: Public Shared Widening Operator CType(_Value As Vector2Int) As ProtectedVector2Int
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Vector2Int
          description: The regular Vector2Int to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedVector2Int
          description: A new instance of the protected Vector2Int.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector2Int)~Vector2Int
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector2Int)~Vector2Int
      language: CSharp
      name:
        CSharp: Implicit(ProtectedVector2Int to Vector2Int)
        VB: Widening(ProtectedVector2Int to Vector2Int)
      nameWithType:
        CSharp: ProtectedVector2Int.Implicit(ProtectedVector2Int to Vector2Int)
        VB: ProtectedVector2Int.Widening(ProtectedVector2Int to Vector2Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.Implicit(GUPS.AntiCheat.Protected.ProtectedVector2Int to Vector2Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.Widening(GUPS.AntiCheat.Protected.ProtectedVector2Int to Vector2Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 20509
      summary: "\nImplicitly converts a protected Vector2Int to a regular Vector2Int.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator Vector2Int(ProtectedVector2Int _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedVector2Int) As Vector2Int
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedVector2Int
          description: The protected Vector2Int to be converted.
        return:
          type: GUPS.AntiCheat.Vector2Int
          description: The true unencrypted value of the protected Vector2Int.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector2Int)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector2Int)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      language: CSharp
      name:
        CSharp: Implicit(ProtectedVector2Int to ProtectedQuaternion)
        VB: Widening(ProtectedVector2Int to ProtectedQuaternion)
      nameWithType:
        CSharp: ProtectedVector2Int.Implicit(ProtectedVector2Int to ProtectedQuaternion)
        VB: ProtectedVector2Int.Widening(ProtectedVector2Int to ProtectedQuaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.Implicit(GUPS.AntiCheat.Protected.ProtectedVector2Int to GUPS.AntiCheat.Protected.ProtectedQuaternion)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.Widening(GUPS.AntiCheat.Protected.ProtectedVector2Int to GUPS.AntiCheat.Protected.ProtectedQuaternion)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 20519
      summary: "\nImplicitly converts a protected Vector2Int to a protected Quaternion.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedQuaternion(ProtectedVector2Int _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedVector2Int) As ProtectedQuaternion
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedVector2Int
          description: The protected Vector2Int to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The encrypted value as protected Quaternion.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~GUPS.AntiCheat.Protected.ProtectedVector2Int
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~GUPS.AntiCheat.Protected.ProtectedVector2Int
      language: CSharp
      name:
        CSharp: Implicit(ProtectedQuaternion to ProtectedVector2Int)
        VB: Widening(ProtectedQuaternion to ProtectedVector2Int)
      nameWithType:
        CSharp: ProtectedVector2Int.Implicit(ProtectedQuaternion to ProtectedVector2Int)
        VB: ProtectedVector2Int.Widening(ProtectedQuaternion to ProtectedVector2Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion to GUPS.AntiCheat.Protected.ProtectedVector2Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.Widening(GUPS.AntiCheat.Protected.ProtectedQuaternion to GUPS.AntiCheat.Protected.ProtectedVector2Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 20529
      summary: "\nImplicitly converts a protected Quaternion to a protected Vector2Int.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedVector2Int(ProtectedQuaternion _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedQuaternion) As ProtectedVector2Int
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The protected Quaternion to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedVector2Int
          description: The encrypted value as protected Vector2Int.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Equality(GUPS.AntiCheat.Protected.ProtectedVector2Int,GUPS.AntiCheat.Protected.ProtectedVector2Int)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Equality(GUPS.AntiCheat.Protected.ProtectedVector2Int,GUPS.AntiCheat.Protected.ProtectedVector2Int)
      language: CSharp
      name:
        CSharp: Equality(ProtectedVector2Int, ProtectedVector2Int)
        VB: Equality(ProtectedVector2Int, ProtectedVector2Int)
      nameWithType:
        CSharp: ProtectedVector2Int.Equality(ProtectedVector2Int, ProtectedVector2Int)
        VB: ProtectedVector2Int.Equality(ProtectedVector2Int, ProtectedVector2Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.Equality(GUPS.AntiCheat.Protected.ProtectedVector2Int, GUPS.AntiCheat.Protected.ProtectedVector2Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.Equality(GUPS.AntiCheat.Protected.ProtectedVector2Int, GUPS.AntiCheat.Protected.ProtectedVector2Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 20544
      summary: "\nChecks if two protected Vector2Int instances are equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedVector2Int v1, ProtectedVector2Int v2)
          VB: Public Shared Operator =(v1 As ProtectedVector2Int, v2 As ProtectedVector2Int) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedVector2Int
          description: The first protected Vector2Int.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedVector2Int
          description: The second protected Vector2Int.
        return:
          type: System.Boolean
          description: True if the values of the protected Vector2Int instances are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Inequality(GUPS.AntiCheat.Protected.ProtectedVector2Int,GUPS.AntiCheat.Protected.ProtectedVector2Int)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Inequality(GUPS.AntiCheat.Protected.ProtectedVector2Int,GUPS.AntiCheat.Protected.ProtectedVector2Int)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedVector2Int, ProtectedVector2Int)
        VB: Inequality(ProtectedVector2Int, ProtectedVector2Int)
      nameWithType:
        CSharp: ProtectedVector2Int.Inequality(ProtectedVector2Int, ProtectedVector2Int)
        VB: ProtectedVector2Int.Inequality(ProtectedVector2Int, ProtectedVector2Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.Inequality(GUPS.AntiCheat.Protected.ProtectedVector2Int, GUPS.AntiCheat.Protected.ProtectedVector2Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.Inequality(GUPS.AntiCheat.Protected.ProtectedVector2Int, GUPS.AntiCheat.Protected.ProtectedVector2Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 20555
      summary: "\nChecks if two protected Vector2Int instances are not equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedVector2Int v1, ProtectedVector2Int v2)
          VB: Public Shared Operator <>(v1 As ProtectedVector2Int, v2 As ProtectedVector2Int) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedVector2Int
          description: The first protected Vector2Int.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedVector2Int
          description: The second protected Vector2Int.
        return:
          type: System.Boolean
          description: True if the values of the protected Vector2Int instances are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector2Int.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedVector2Int.Equals(Object)
        VB: ProtectedVector2Int.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector2Int.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedVector2Int.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 20565
      summary: "\nChecks if the protected Vector2Int is equal to the specified object.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected Vector2Int.
        return:
          type: System.Boolean
          description: True if the values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector2Int.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: GUPS.AntiCheat.Protected.ProtectedVector3
    commentId: T:GUPS.AntiCheat.Protected.ProtectedVector3
    language: CSharp
    name:
      CSharp: ProtectedVector3
      VB: ProtectedVector3
    nameWithType:
      CSharp: ProtectedVector3
      VB: ProtectedVector3
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedVector3
      VB: GUPS.AntiCheat.Protected.ProtectedVector3
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedVector3
      path: ''
      startLine: 20596
    summary: "\nRepresents a protected Vector3, enhancing security for sensitive vector data. \nIn most scenarios, it is recommended to replace the default Vector3 type with this protected variant.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedVector3
        VB: Public Structure ProtectedVector3
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedVector3.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedVector3.HasIntegrity
        VB: ProtectedVector3.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 20608
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedVector3.OnBeforeSerialize()
        VB: ProtectedVector3.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 20645
      summary: "\nUnity serialization hook. Ensures the correct values are serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedVector3.OnAfterDeserialize()
        VB: ProtectedVector3.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 20653
      summary: "\nUnity deserialization hook. Ensures the correct values are deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.#ctor(Vector3)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.#ctor(Vector3)
      language: CSharp
      name:
        CSharp: ProtectedVector3(Vector3)
        VB: ProtectedVector3(Vector3)
      nameWithType:
        CSharp: ProtectedVector3.ProtectedVector3(Vector3)
        VB: ProtectedVector3.ProtectedVector3(Vector3)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.ProtectedVector3(Vector3)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.ProtectedVector3(Vector3)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 20662
      summary: "\nCreates a new protected Vector3 with the specified value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedVector3(Vector3 _Value)
          VB: Public Sub New(_Value As Vector3)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Vector3
          description: The initial value of the protected Vector3.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedVector3.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedVector3.Value
        VB: ProtectedVector3.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.Value
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 20695
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 Value { get; set; }
          VB: Public Property Value As Vector3
        parameters: []
        return:
          type: GUPS.AntiCheat.Vector3
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedVector3.Obfuscate()
        VB: ProtectedVector3.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 20766
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedVector3.CheckIntegrity()
        VB: ProtectedVector3.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 20782
      summary: "\nChecks the integrity of the protected value, detecting if an attacker changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedVector3.Dispose()
        VB: ProtectedVector3.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 20800
      summary: "\nReleases the resources used by the protected Vector3.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedVector3.ToString()
        VB: ProtectedVector3.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 20813
      summary: "\nReturns a string representation of the protected Vector3.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: A string representation of the protected Vector3.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedVector3.GetHashCode()
        VB: ProtectedVector3.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 20822
      summary: "\nGets the hash code for the protected value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code for the protected value.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit(Vector3)~GUPS.AntiCheat.Protected.ProtectedVector3
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit(Vector3)~GUPS.AntiCheat.Protected.ProtectedVector3
      language: CSharp
      name:
        CSharp: Implicit(Vector3 to ProtectedVector3)
        VB: Widening(Vector3 to ProtectedVector3)
      nameWithType:
        CSharp: ProtectedVector3.Implicit(Vector3 to ProtectedVector3)
        VB: ProtectedVector3.Widening(Vector3 to ProtectedVector3)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.Implicit(Vector3 to GUPS.AntiCheat.Protected.ProtectedVector3)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.Widening(Vector3 to GUPS.AntiCheat.Protected.ProtectedVector3)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 20869
      summary: "\nImplicitly converts a regular Vector3 to a protected Vector3.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedVector3(Vector3 _Value)
          VB: Public Shared Widening Operator CType(_Value As Vector3) As ProtectedVector3
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Vector3
          description: The regular Vector3 to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedVector3
          description: A new instance of the protected Vector3.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector3)~Vector3
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector3)~Vector3
      language: CSharp
      name:
        CSharp: Implicit(ProtectedVector3 to Vector3)
        VB: Widening(ProtectedVector3 to Vector3)
      nameWithType:
        CSharp: ProtectedVector3.Implicit(ProtectedVector3 to Vector3)
        VB: ProtectedVector3.Widening(ProtectedVector3 to Vector3)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.Implicit(GUPS.AntiCheat.Protected.ProtectedVector3 to Vector3)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.Widening(GUPS.AntiCheat.Protected.ProtectedVector3 to Vector3)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 20879
      summary: "\nImplicitly converts a protected Vector3 to a regular Vector3.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator Vector3(ProtectedVector3 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedVector3) As Vector3
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedVector3
          description: The protected Vector3 to be converted.
        return:
          type: GUPS.AntiCheat.Vector3
          description: The true unencrypted value of the protected Vector3.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector3)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector3)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      language: CSharp
      name:
        CSharp: Implicit(ProtectedVector3 to ProtectedQuaternion)
        VB: Widening(ProtectedVector3 to ProtectedQuaternion)
      nameWithType:
        CSharp: ProtectedVector3.Implicit(ProtectedVector3 to ProtectedQuaternion)
        VB: ProtectedVector3.Widening(ProtectedVector3 to ProtectedQuaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.Implicit(GUPS.AntiCheat.Protected.ProtectedVector3 to GUPS.AntiCheat.Protected.ProtectedQuaternion)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.Widening(GUPS.AntiCheat.Protected.ProtectedVector3 to GUPS.AntiCheat.Protected.ProtectedQuaternion)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 20889
      summary: "\nImplicitly converts a protected Vector3 to a protected Quaternion.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedQuaternion(ProtectedVector3 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedVector3) As ProtectedQuaternion
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedVector3
          description: The protected Vector3 to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The encrypted value as protected Quaternion.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~GUPS.AntiCheat.Protected.ProtectedVector3
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~GUPS.AntiCheat.Protected.ProtectedVector3
      language: CSharp
      name:
        CSharp: Implicit(ProtectedQuaternion to ProtectedVector3)
        VB: Widening(ProtectedQuaternion to ProtectedVector3)
      nameWithType:
        CSharp: ProtectedVector3.Implicit(ProtectedQuaternion to ProtectedVector3)
        VB: ProtectedVector3.Widening(ProtectedQuaternion to ProtectedVector3)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion to GUPS.AntiCheat.Protected.ProtectedVector3)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.Widening(GUPS.AntiCheat.Protected.ProtectedQuaternion to GUPS.AntiCheat.Protected.ProtectedVector3)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 20899
      summary: "\nImplicitly converts a protected Quaternion to a protected Vector3.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedVector3(ProtectedQuaternion _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedQuaternion) As ProtectedVector3
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The protected Quaternion to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedVector3
          description: The encrypted value as protected Vector3.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.op_Equality(GUPS.AntiCheat.Protected.ProtectedVector3,GUPS.AntiCheat.Protected.ProtectedVector3)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.op_Equality(GUPS.AntiCheat.Protected.ProtectedVector3,GUPS.AntiCheat.Protected.ProtectedVector3)
      language: CSharp
      name:
        CSharp: Equality(ProtectedVector3, ProtectedVector3)
        VB: Equality(ProtectedVector3, ProtectedVector3)
      nameWithType:
        CSharp: ProtectedVector3.Equality(ProtectedVector3, ProtectedVector3)
        VB: ProtectedVector3.Equality(ProtectedVector3, ProtectedVector3)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.Equality(GUPS.AntiCheat.Protected.ProtectedVector3, GUPS.AntiCheat.Protected.ProtectedVector3)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.Equality(GUPS.AntiCheat.Protected.ProtectedVector3, GUPS.AntiCheat.Protected.ProtectedVector3)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 20914
      summary: "\nChecks if two protected Vector3 instances are equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedVector3 v1, ProtectedVector3 v2)
          VB: Public Shared Operator =(v1 As ProtectedVector3, v2 As ProtectedVector3) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedVector3
          description: The first protected Vector3.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedVector3
          description: The second protected Vector3.
        return:
          type: System.Boolean
          description: True if the values of the protected Vector3 instances are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.op_Inequality(GUPS.AntiCheat.Protected.ProtectedVector3,GUPS.AntiCheat.Protected.ProtectedVector3)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.op_Inequality(GUPS.AntiCheat.Protected.ProtectedVector3,GUPS.AntiCheat.Protected.ProtectedVector3)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedVector3, ProtectedVector3)
        VB: Inequality(ProtectedVector3, ProtectedVector3)
      nameWithType:
        CSharp: ProtectedVector3.Inequality(ProtectedVector3, ProtectedVector3)
        VB: ProtectedVector3.Inequality(ProtectedVector3, ProtectedVector3)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.Inequality(GUPS.AntiCheat.Protected.ProtectedVector3, GUPS.AntiCheat.Protected.ProtectedVector3)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.Inequality(GUPS.AntiCheat.Protected.ProtectedVector3, GUPS.AntiCheat.Protected.ProtectedVector3)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 20925
      summary: "\nChecks if two protected Vector3 instances are not equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedVector3 v1, ProtectedVector3 v2)
          VB: Public Shared Operator <>(v1 As ProtectedVector3, v2 As ProtectedVector3) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedVector3
          description: The first protected Vector3.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedVector3
          description: The second protected Vector3.
        return:
          type: System.Boolean
          description: True if the values of the protected Vector3 instances are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector3.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedVector3.Equals(Object)
        VB: ProtectedVector3.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 20935
      summary: "\nChecks if the protected Vector3 is equal to the specified object.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected Vector3.
        return:
          type: System.Boolean
          description: True if the values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: GUPS.AntiCheat.Protected.ProtectedVector3Int
    commentId: T:GUPS.AntiCheat.Protected.ProtectedVector3Int
    language: CSharp
    name:
      CSharp: ProtectedVector3Int
      VB: ProtectedVector3Int
    nameWithType:
      CSharp: ProtectedVector3Int
      VB: ProtectedVector3Int
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int
      VB: GUPS.AntiCheat.Protected.ProtectedVector3Int
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedVector3Int
      path: ''
      startLine: 20966
    summary: "\nRepresents a protected Vector3Int, enhancing security for sensitive vector data. \nIn most scenarios, it is recommended to replace the default Vector3Int type with this protected variant.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedVector3Int
        VB: Public Structure ProtectedVector3Int
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedVector3Int.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedVector3Int.HasIntegrity
        VB: ProtectedVector3Int.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 20978
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedVector3Int.OnBeforeSerialize()
        VB: ProtectedVector3Int.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 21010
      summary: "\nUnity serialization hook. Ensures the correct values are serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedVector3Int.OnAfterDeserialize()
        VB: ProtectedVector3Int.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 21018
      summary: "\nUnity deserialization hook. Ensures the correct values are deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.#ctor(Vector3Int)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.#ctor(Vector3Int)
      language: CSharp
      name:
        CSharp: ProtectedVector3Int(Vector3Int)
        VB: ProtectedVector3Int(Vector3Int)
      nameWithType:
        CSharp: ProtectedVector3Int.ProtectedVector3Int(Vector3Int)
        VB: ProtectedVector3Int.ProtectedVector3Int(Vector3Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.ProtectedVector3Int(Vector3Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.ProtectedVector3Int(Vector3Int)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 21027
      summary: "\nCreates a new protected Vector3Int with the specified value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedVector3Int(Vector3Int _Value)
          VB: Public Sub New(_Value As Vector3Int)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Vector3Int
          description: The initial value of the protected Vector3Int.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedVector3Int.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedVector3Int.Value
        VB: ProtectedVector3Int.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.Value
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 21053
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3Int Value { get; set; }
          VB: Public Property Value As Vector3Int
        parameters: []
        return:
          type: GUPS.AntiCheat.Vector3Int
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedVector3Int.Obfuscate()
        VB: ProtectedVector3Int.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 21111
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedVector3Int.CheckIntegrity()
        VB: ProtectedVector3Int.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 21127
      summary: "\nChecks the integrity of the protected value, detecting if an attacker changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedVector3Int.Dispose()
        VB: ProtectedVector3Int.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 21145
      summary: "\nReleases the resources used by the protected Vector3Int.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedVector3Int.ToString()
        VB: ProtectedVector3Int.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 21157
      summary: "\nReturns a string representation of the protected Vector3Int.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: A string representation of the protected Vector3Int.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedVector3Int.GetHashCode()
        VB: ProtectedVector3Int.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 21166
      summary: "\nGets the hash code for the protected value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code for the protected value.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit(Vector3Int)~GUPS.AntiCheat.Protected.ProtectedVector3Int
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit(Vector3Int)~GUPS.AntiCheat.Protected.ProtectedVector3Int
      language: CSharp
      name:
        CSharp: Implicit(Vector3Int to ProtectedVector3Int)
        VB: Widening(Vector3Int to ProtectedVector3Int)
      nameWithType:
        CSharp: ProtectedVector3Int.Implicit(Vector3Int to ProtectedVector3Int)
        VB: ProtectedVector3Int.Widening(Vector3Int to ProtectedVector3Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.Implicit(Vector3Int to GUPS.AntiCheat.Protected.ProtectedVector3Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.Widening(Vector3Int to GUPS.AntiCheat.Protected.ProtectedVector3Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 21178
      summary: "\nImplicitly converts a regular Vector3Int to a protected Vector3Int.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedVector3Int(Vector3Int _Value)
          VB: Public Shared Widening Operator CType(_Value As Vector3Int) As ProtectedVector3Int
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Vector3Int
          description: The regular Vector3Int to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedVector3Int
          description: A new instance of the protected Vector3Int.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector3Int)~Vector3Int
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector3Int)~Vector3Int
      language: CSharp
      name:
        CSharp: Implicit(ProtectedVector3Int to Vector3Int)
        VB: Widening(ProtectedVector3Int to Vector3Int)
      nameWithType:
        CSharp: ProtectedVector3Int.Implicit(ProtectedVector3Int to Vector3Int)
        VB: ProtectedVector3Int.Widening(ProtectedVector3Int to Vector3Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.Implicit(GUPS.AntiCheat.Protected.ProtectedVector3Int to Vector3Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.Widening(GUPS.AntiCheat.Protected.ProtectedVector3Int to Vector3Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 21188
      summary: "\nImplicitly converts a protected Vector3Int to a regular Vector3Int.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator Vector3Int(ProtectedVector3Int _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedVector3Int) As Vector3Int
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedVector3Int
          description: The protected Vector3Int to be converted.
        return:
          type: GUPS.AntiCheat.Vector3Int
          description: The true unencrypted value of the protected Vector3Int.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector3Int)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector3Int)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      language: CSharp
      name:
        CSharp: Implicit(ProtectedVector3Int to ProtectedQuaternion)
        VB: Widening(ProtectedVector3Int to ProtectedQuaternion)
      nameWithType:
        CSharp: ProtectedVector3Int.Implicit(ProtectedVector3Int to ProtectedQuaternion)
        VB: ProtectedVector3Int.Widening(ProtectedVector3Int to ProtectedQuaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.Implicit(GUPS.AntiCheat.Protected.ProtectedVector3Int to GUPS.AntiCheat.Protected.ProtectedQuaternion)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.Widening(GUPS.AntiCheat.Protected.ProtectedVector3Int to GUPS.AntiCheat.Protected.ProtectedQuaternion)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 21198
      summary: "\nImplicitly converts a protected Vector3Int to a protected Quaternion.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedQuaternion(ProtectedVector3Int _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedVector3Int) As ProtectedQuaternion
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedVector3Int
          description: The protected Vector3Int to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The encrypted value as protected Quaternion.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~GUPS.AntiCheat.Protected.ProtectedVector3Int
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~GUPS.AntiCheat.Protected.ProtectedVector3Int
      language: CSharp
      name:
        CSharp: Implicit(ProtectedQuaternion to ProtectedVector3Int)
        VB: Widening(ProtectedQuaternion to ProtectedVector3Int)
      nameWithType:
        CSharp: ProtectedVector3Int.Implicit(ProtectedQuaternion to ProtectedVector3Int)
        VB: ProtectedVector3Int.Widening(ProtectedQuaternion to ProtectedVector3Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion to GUPS.AntiCheat.Protected.ProtectedVector3Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.Widening(GUPS.AntiCheat.Protected.ProtectedQuaternion to GUPS.AntiCheat.Protected.ProtectedVector3Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 21208
      summary: "\nImplicitly converts a protected Quaternion to a protected Vector3Int.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedVector3Int(ProtectedQuaternion _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedQuaternion) As ProtectedVector3Int
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The protected Quaternion to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedVector3Int
          description: The encrypted value as protected Vector3Int.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Equality(GUPS.AntiCheat.Protected.ProtectedVector3Int,GUPS.AntiCheat.Protected.ProtectedVector3Int)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Equality(GUPS.AntiCheat.Protected.ProtectedVector3Int,GUPS.AntiCheat.Protected.ProtectedVector3Int)
      language: CSharp
      name:
        CSharp: Equality(ProtectedVector3Int, ProtectedVector3Int)
        VB: Equality(ProtectedVector3Int, ProtectedVector3Int)
      nameWithType:
        CSharp: ProtectedVector3Int.Equality(ProtectedVector3Int, ProtectedVector3Int)
        VB: ProtectedVector3Int.Equality(ProtectedVector3Int, ProtectedVector3Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.Equality(GUPS.AntiCheat.Protected.ProtectedVector3Int, GUPS.AntiCheat.Protected.ProtectedVector3Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.Equality(GUPS.AntiCheat.Protected.ProtectedVector3Int, GUPS.AntiCheat.Protected.ProtectedVector3Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 21223
      summary: "\nChecks if two protected Vector3Int instances are equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedVector3Int v1, ProtectedVector3Int v2)
          VB: Public Shared Operator =(v1 As ProtectedVector3Int, v2 As ProtectedVector3Int) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedVector3Int
          description: The first protected Vector3Int.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedVector3Int
          description: The second protected Vector3Int.
        return:
          type: System.Boolean
          description: True if the values of the protected Vector3Int instances are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Inequality(GUPS.AntiCheat.Protected.ProtectedVector3Int,GUPS.AntiCheat.Protected.ProtectedVector3Int)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Inequality(GUPS.AntiCheat.Protected.ProtectedVector3Int,GUPS.AntiCheat.Protected.ProtectedVector3Int)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedVector3Int, ProtectedVector3Int)
        VB: Inequality(ProtectedVector3Int, ProtectedVector3Int)
      nameWithType:
        CSharp: ProtectedVector3Int.Inequality(ProtectedVector3Int, ProtectedVector3Int)
        VB: ProtectedVector3Int.Inequality(ProtectedVector3Int, ProtectedVector3Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.Inequality(GUPS.AntiCheat.Protected.ProtectedVector3Int, GUPS.AntiCheat.Protected.ProtectedVector3Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.Inequality(GUPS.AntiCheat.Protected.ProtectedVector3Int, GUPS.AntiCheat.Protected.ProtectedVector3Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 21234
      summary: "\nChecks if two protected Vector3Int instances are not equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedVector3Int v1, ProtectedVector3Int v2)
          VB: Public Shared Operator <>(v1 As ProtectedVector3Int, v2 As ProtectedVector3Int) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedVector3Int
          description: The first protected Vector3Int.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedVector3Int
          description: The second protected Vector3Int.
        return:
          type: System.Boolean
          description: True if the values of the protected Vector3Int instances are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector3Int.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedVector3Int.Equals(Object)
        VB: ProtectedVector3Int.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector3Int.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedVector3Int.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 21244
      summary: "\nChecks if the protected Vector3Int is equal to the specified object.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected Vector3Int.
        return:
          type: System.Boolean
          description: True if the values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector3Int.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: GUPS.AntiCheat.Protected.ProtectedVector4
    commentId: T:GUPS.AntiCheat.Protected.ProtectedVector4
    language: CSharp
    name:
      CSharp: ProtectedVector4
      VB: ProtectedVector4
    nameWithType:
      CSharp: ProtectedVector4
      VB: ProtectedVector4
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedVector4
      VB: GUPS.AntiCheat.Protected.ProtectedVector4
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedVector4
      path: ''
      startLine: 21275
    summary: "\nRepresents a protected Vector4, enhancing security for sensitive vector data. \nIn most scenarios, it is recommended to replace the default Vector4 type with this protected variant.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedVector4
        VB: Public Structure ProtectedVector4
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedVector4.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedVector4.HasIntegrity
        VB: ProtectedVector4.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 21287
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedVector4.OnBeforeSerialize()
        VB: ProtectedVector4.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 21329
      summary: "\nUnity serialization hook. Ensures the correct values are serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedVector4.OnAfterDeserialize()
        VB: ProtectedVector4.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 21337
      summary: "\nUnity deserialization hook. Ensures the correct values are deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.#ctor(Vector4)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.#ctor(Vector4)
      language: CSharp
      name:
        CSharp: ProtectedVector4(Vector4)
        VB: ProtectedVector4(Vector4)
      nameWithType:
        CSharp: ProtectedVector4.ProtectedVector4(Vector4)
        VB: ProtectedVector4.ProtectedVector4(Vector4)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.ProtectedVector4(Vector4)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.ProtectedVector4(Vector4)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 21346
      summary: "\nCreates a new protected Vector4 with the specified value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedVector4(Vector4 _Value)
          VB: Public Sub New(_Value As Vector4)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Vector4
          description: The initial value of the protected Vector4.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedVector4.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedVector4.Value
        VB: ProtectedVector4.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.Value
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 21381
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector4 Value { get; set; }
          VB: Public Property Value As Vector4
        parameters: []
        return:
          type: GUPS.AntiCheat.Vector4
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedVector4.Obfuscate()
        VB: ProtectedVector4.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 21459
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedVector4.CheckIntegrity()
        VB: ProtectedVector4.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 21475
      summary: "\nChecks the integrity of the protected value, detecting if an attacker changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedVector4.Dispose()
        VB: ProtectedVector4.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 21493
      summary: "\nReleases the resources used by the protected Vector4.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedVector4.ToString()
        VB: ProtectedVector4.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 21507
      summary: "\nReturns a string representation of the protected Vector4.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: A string representation of the protected Vector4.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedVector4.GetHashCode()
        VB: ProtectedVector4.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 21516
      summary: "\nGets the hash code for the protected value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code for the protected value.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit(Vector4)~GUPS.AntiCheat.Protected.ProtectedVector4
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit(Vector4)~GUPS.AntiCheat.Protected.ProtectedVector4
      language: CSharp
      name:
        CSharp: Implicit(Vector4 to ProtectedVector4)
        VB: Widening(Vector4 to ProtectedVector4)
      nameWithType:
        CSharp: ProtectedVector4.Implicit(Vector4 to ProtectedVector4)
        VB: ProtectedVector4.Widening(Vector4 to ProtectedVector4)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.Implicit(Vector4 to GUPS.AntiCheat.Protected.ProtectedVector4)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.Widening(Vector4 to GUPS.AntiCheat.Protected.ProtectedVector4)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 21567
      summary: "\nImplicitly converts a regular Vector4 to a protected Vector4.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedVector4(Vector4 _Value)
          VB: Public Shared Widening Operator CType(_Value As Vector4) As ProtectedVector4
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Vector4
          description: The regular Vector4 to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedVector4
          description: A new instance of the protected Vector4.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector4)~Vector4
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector4)~Vector4
      language: CSharp
      name:
        CSharp: Implicit(ProtectedVector4 to Vector4)
        VB: Widening(ProtectedVector4 to Vector4)
      nameWithType:
        CSharp: ProtectedVector4.Implicit(ProtectedVector4 to Vector4)
        VB: ProtectedVector4.Widening(ProtectedVector4 to Vector4)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.Implicit(GUPS.AntiCheat.Protected.ProtectedVector4 to Vector4)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.Widening(GUPS.AntiCheat.Protected.ProtectedVector4 to Vector4)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 21577
      summary: "\nImplicitly converts a protected Vector4 to a regular Vector4.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator Vector4(ProtectedVector4 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedVector4) As Vector4
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedVector4
          description: The protected Vector4 to be converted.
        return:
          type: GUPS.AntiCheat.Vector4
          description: The true unencrypted value of the protected Vector4.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector4)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector4)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      language: CSharp
      name:
        CSharp: Implicit(ProtectedVector4 to ProtectedQuaternion)
        VB: Widening(ProtectedVector4 to ProtectedQuaternion)
      nameWithType:
        CSharp: ProtectedVector4.Implicit(ProtectedVector4 to ProtectedQuaternion)
        VB: ProtectedVector4.Widening(ProtectedVector4 to ProtectedQuaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.Implicit(GUPS.AntiCheat.Protected.ProtectedVector4 to GUPS.AntiCheat.Protected.ProtectedQuaternion)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.Widening(GUPS.AntiCheat.Protected.ProtectedVector4 to GUPS.AntiCheat.Protected.ProtectedQuaternion)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 21587
      summary: "\nImplicitly converts a protected Vector4 to a protected Quaternion.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedQuaternion(ProtectedVector4 _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedVector4) As ProtectedQuaternion
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedVector4
          description: The protected Vector4 to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The encrypted value as protected Quaternion.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~GUPS.AntiCheat.Protected.ProtectedVector4
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~GUPS.AntiCheat.Protected.ProtectedVector4
      language: CSharp
      name:
        CSharp: Implicit(ProtectedQuaternion to ProtectedVector4)
        VB: Widening(ProtectedQuaternion to ProtectedVector4)
      nameWithType:
        CSharp: ProtectedVector4.Implicit(ProtectedQuaternion to ProtectedVector4)
        VB: ProtectedVector4.Widening(ProtectedQuaternion to ProtectedVector4)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion to GUPS.AntiCheat.Protected.ProtectedVector4)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.Widening(GUPS.AntiCheat.Protected.ProtectedQuaternion to GUPS.AntiCheat.Protected.ProtectedVector4)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 21597
      summary: "\nImplicitly converts a protected Quaternion to a protected Vector4.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedVector4(ProtectedQuaternion _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedQuaternion) As ProtectedVector4
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The protected Quaternion to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedVector4
          description: The encrypted value as protected Vector4.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.op_Equality(GUPS.AntiCheat.Protected.ProtectedVector4,GUPS.AntiCheat.Protected.ProtectedVector4)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.op_Equality(GUPS.AntiCheat.Protected.ProtectedVector4,GUPS.AntiCheat.Protected.ProtectedVector4)
      language: CSharp
      name:
        CSharp: Equality(ProtectedVector4, ProtectedVector4)
        VB: Equality(ProtectedVector4, ProtectedVector4)
      nameWithType:
        CSharp: ProtectedVector4.Equality(ProtectedVector4, ProtectedVector4)
        VB: ProtectedVector4.Equality(ProtectedVector4, ProtectedVector4)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.Equality(GUPS.AntiCheat.Protected.ProtectedVector4, GUPS.AntiCheat.Protected.ProtectedVector4)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.Equality(GUPS.AntiCheat.Protected.ProtectedVector4, GUPS.AntiCheat.Protected.ProtectedVector4)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 21612
      summary: "\nChecks if two protected Vector4 instances are equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedVector4 v1, ProtectedVector4 v2)
          VB: Public Shared Operator =(v1 As ProtectedVector4, v2 As ProtectedVector4) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedVector4
          description: The first protected Vector4.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedVector4
          description: The second protected Vector4.
        return:
          type: System.Boolean
          description: True if the values of the protected Vector4 instances are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.op_Inequality(GUPS.AntiCheat.Protected.ProtectedVector4,GUPS.AntiCheat.Protected.ProtectedVector4)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.op_Inequality(GUPS.AntiCheat.Protected.ProtectedVector4,GUPS.AntiCheat.Protected.ProtectedVector4)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedVector4, ProtectedVector4)
        VB: Inequality(ProtectedVector4, ProtectedVector4)
      nameWithType:
        CSharp: ProtectedVector4.Inequality(ProtectedVector4, ProtectedVector4)
        VB: ProtectedVector4.Inequality(ProtectedVector4, ProtectedVector4)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.Inequality(GUPS.AntiCheat.Protected.ProtectedVector4, GUPS.AntiCheat.Protected.ProtectedVector4)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.Inequality(GUPS.AntiCheat.Protected.ProtectedVector4, GUPS.AntiCheat.Protected.ProtectedVector4)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 21623
      summary: "\nChecks if two protected Vector4 instances are not equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedVector4 v1, ProtectedVector4 v2)
          VB: Public Shared Operator <>(v1 As ProtectedVector4, v2 As ProtectedVector4) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedVector4
          description: The first protected Vector4.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedVector4
          description: The second protected Vector4.
        return:
          type: System.Boolean
          description: True if the values of the protected Vector4 instances are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector4.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedVector4.Equals(Object)
        VB: ProtectedVector4.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 21633
      summary: "\nChecks if the protected Vector4 is equal to the specified object.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected Vector4.
        return:
          type: System.Boolean
          description: True if the values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: GUPS.AntiCheat.Protected.ProtectedVector4Int
    commentId: T:GUPS.AntiCheat.Protected.ProtectedVector4Int
    language: CSharp
    name:
      CSharp: ProtectedVector4Int
      VB: ProtectedVector4Int
    nameWithType:
      CSharp: ProtectedVector4Int
      VB: ProtectedVector4Int
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int
      VB: GUPS.AntiCheat.Protected.ProtectedVector4Int
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected
    source:
      id: ProtectedVector4Int
      path: ''
      startLine: 21664
    summary: "\nRepresents a protected Vector4Int, enhancing security for sensitive vector data. \nUnity does not have a regular Vector4Int type, so this is a custom implementation.\n"
    example: []
    syntax:
      content:
        CSharp: public struct ProtectedVector4Int
        VB: Public Structure ProtectedVector4Int
    implements:
    - GUPS.AntiCheat.IProtected
    - GUPS.AntiCheat.IDisposable
    - GUPS.AntiCheat.ISerializationCallbackReceiver
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.ProtectedVector4Int.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedVector4Int.HasIntegrity
        VB: ProtectedVector4Int.HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.HasIntegrity
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: HasIntegrity
        path: ''
        startLine: 21676
      summary: "\nGets a value indicating whether the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { readonly get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - readonly get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnBeforeSerialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.OnBeforeSerialize
      language: CSharp
      name:
        CSharp: OnBeforeSerialize()
        VB: OnBeforeSerialize()
      nameWithType:
        CSharp: ProtectedVector4Int.OnBeforeSerialize()
        VB: ProtectedVector4Int.OnBeforeSerialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnBeforeSerialize()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnBeforeSerialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnBeforeSerialize
        path: ''
        startLine: 21713
      summary: "\nUnity serialization hook. Ensures the correct values are serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnBeforeSerialize()
          VB: Public Sub OnBeforeSerialize
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnBeforeSerialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnAfterDeserialize
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.OnAfterDeserialize
      language: CSharp
      name:
        CSharp: OnAfterDeserialize()
        VB: OnAfterDeserialize()
      nameWithType:
        CSharp: ProtectedVector4Int.OnAfterDeserialize()
        VB: ProtectedVector4Int.OnAfterDeserialize()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnAfterDeserialize()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnAfterDeserialize()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: OnAfterDeserialize
        path: ''
        startLine: 21721
      summary: "\nUnity deserialization hook. Ensures the correct values are deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public void OnAfterDeserialize()
          VB: Public Sub OnAfterDeserialize
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnAfterDeserialize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.#ctor(Vector4)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.#ctor(Vector4)
      language: CSharp
      name:
        CSharp: ProtectedVector4Int(Vector4)
        VB: ProtectedVector4Int(Vector4)
      nameWithType:
        CSharp: ProtectedVector4Int.ProtectedVector4Int(Vector4)
        VB: ProtectedVector4Int.ProtectedVector4Int(Vector4)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.ProtectedVector4Int(Vector4)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.ProtectedVector4Int(Vector4)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: .ctor
        path: ''
        startLine: 21730
      summary: "\nCreates a new protected Vector4 with the specified value.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedVector4Int(Vector4 _Value)
          VB: Public Sub New(_Value As Vector4)
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Vector4
          description: The initial value of the protected Vector4.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.Value
      commentId: P:GUPS.AntiCheat.Protected.ProtectedVector4Int.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedVector4Int.Value
        VB: ProtectedVector4Int.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.Value
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Value
        path: ''
        startLine: 21757
      summary: "\nGets and sets the true unencrypted field value.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector4 Value { get; set; }
          VB: Public Property Value As Vector4
        parameters: []
        return:
          type: GUPS.AntiCheat.Vector4
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.Obfuscate
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.Obfuscate
      language: CSharp
      name:
        CSharp: Obfuscate()
        VB: Obfuscate()
      nameWithType:
        CSharp: ProtectedVector4Int.Obfuscate()
        VB: ProtectedVector4Int.Obfuscate()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.Obfuscate()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.Obfuscate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Obfuscate
        path: ''
        startLine: 21817
      summary: "\nObfuscates the current value, generating a new random secret key.\n"
      example: []
      syntax:
        content:
          CSharp: public void Obfuscate()
          VB: Public Sub Obfuscate
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.Obfuscate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedVector4Int.CheckIntegrity()
        VB: ProtectedVector4Int.CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: CheckIntegrity
        path: ''
        startLine: 21833
      summary: "\nChecks the integrity of the protected value, detecting if an attacker changed the honeypot fake value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the protected value has integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.Dispose
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: ProtectedVector4Int.Dispose()
        VB: ProtectedVector4Int.Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.Dispose()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Dispose
        path: ''
        startLine: 21851
      summary: "\nReleases the resources used by the protected Vector4.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.ToString
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: ProtectedVector4Int.ToString()
        VB: ProtectedVector4Int.ToString()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.ToString()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: ToString
        path: ''
        startLine: 21864
      summary: "\nReturns a string representation of the protected Vector4.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: A string representation of the protected Vector4.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedVector4Int.GetHashCode()
        VB: ProtectedVector4Int.GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.GetHashCode()
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: GetHashCode
        path: ''
        startLine: 21873
      summary: "\nGets the hash code for the protected value.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code for the protected value.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.GetHashCode*
      overridden: System.ValueType.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit(Vector4)~GUPS.AntiCheat.Protected.ProtectedVector4Int
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit(Vector4)~GUPS.AntiCheat.Protected.ProtectedVector4Int
      language: CSharp
      name:
        CSharp: Implicit(Vector4 to ProtectedVector4Int)
        VB: Widening(Vector4 to ProtectedVector4Int)
      nameWithType:
        CSharp: ProtectedVector4Int.Implicit(Vector4 to ProtectedVector4Int)
        VB: ProtectedVector4Int.Widening(Vector4 to ProtectedVector4Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.Implicit(Vector4 to GUPS.AntiCheat.Protected.ProtectedVector4Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.Widening(Vector4 to GUPS.AntiCheat.Protected.ProtectedVector4Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 21885
      summary: "\nImplicitly converts a regular Vector4 to a protected Vector4Int.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedVector4Int(Vector4 _Value)
          VB: Public Shared Widening Operator CType(_Value As Vector4) As ProtectedVector4Int
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Vector4
          description: The regular Vector4 to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedVector4Int
          description: A new instance of the protected Vector4Int.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector4Int)~Vector4
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector4Int)~Vector4
      language: CSharp
      name:
        CSharp: Implicit(ProtectedVector4Int to Vector4)
        VB: Widening(ProtectedVector4Int to Vector4)
      nameWithType:
        CSharp: ProtectedVector4Int.Implicit(ProtectedVector4Int to Vector4)
        VB: ProtectedVector4Int.Widening(ProtectedVector4Int to Vector4)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.Implicit(GUPS.AntiCheat.Protected.ProtectedVector4Int to Vector4)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.Widening(GUPS.AntiCheat.Protected.ProtectedVector4Int to Vector4)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 21895
      summary: "\nImplicitly converts a protected Vector4Int to a regular Vector4.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator Vector4(ProtectedVector4Int _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedVector4Int) As Vector4
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedVector4Int
          description: The protected Vector4Int to be converted.
        return:
          type: GUPS.AntiCheat.Vector4
          description: The true unencrypted value of the protected Vector4.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector4Int)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedVector4Int)~GUPS.AntiCheat.Protected.ProtectedQuaternion
      language: CSharp
      name:
        CSharp: Implicit(ProtectedVector4Int to ProtectedQuaternion)
        VB: Widening(ProtectedVector4Int to ProtectedQuaternion)
      nameWithType:
        CSharp: ProtectedVector4Int.Implicit(ProtectedVector4Int to ProtectedQuaternion)
        VB: ProtectedVector4Int.Widening(ProtectedVector4Int to ProtectedQuaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.Implicit(GUPS.AntiCheat.Protected.ProtectedVector4Int to GUPS.AntiCheat.Protected.ProtectedQuaternion)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.Widening(GUPS.AntiCheat.Protected.ProtectedVector4Int to GUPS.AntiCheat.Protected.ProtectedQuaternion)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 21905
      summary: "\nImplicitly converts a protected Vector4Int to a protected Quaternion.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedQuaternion(ProtectedVector4Int _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedVector4Int) As ProtectedQuaternion
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedVector4Int
          description: The protected Vector4Int to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The encrypted value as protected Quaternion.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~GUPS.AntiCheat.Protected.ProtectedVector4Int
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion)~GUPS.AntiCheat.Protected.ProtectedVector4Int
      language: CSharp
      name:
        CSharp: Implicit(ProtectedQuaternion to ProtectedVector4Int)
        VB: Widening(ProtectedQuaternion to ProtectedVector4Int)
      nameWithType:
        CSharp: ProtectedVector4Int.Implicit(ProtectedQuaternion to ProtectedVector4Int)
        VB: ProtectedVector4Int.Widening(ProtectedQuaternion to ProtectedVector4Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.Implicit(GUPS.AntiCheat.Protected.ProtectedQuaternion to GUPS.AntiCheat.Protected.ProtectedVector4Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.Widening(GUPS.AntiCheat.Protected.ProtectedQuaternion to GUPS.AntiCheat.Protected.ProtectedVector4Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Implicit
        path: ''
        startLine: 21915
      summary: "\nImplicitly converts a protected Quaternion to a protected Vector4Int.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator ProtectedVector4Int(ProtectedQuaternion _Value)
          VB: Public Shared Widening Operator CType(_Value As ProtectedQuaternion) As ProtectedVector4Int
        parameters:
        - id: _Value
          type: GUPS.AntiCheat.Protected.ProtectedQuaternion
          description: The protected Quaternion to be converted.
        return:
          type: GUPS.AntiCheat.Protected.ProtectedVector4Int
          description: The encrypted value as protected Vector4Int.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Equality(GUPS.AntiCheat.Protected.ProtectedVector4Int,GUPS.AntiCheat.Protected.ProtectedVector4Int)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Equality(GUPS.AntiCheat.Protected.ProtectedVector4Int,GUPS.AntiCheat.Protected.ProtectedVector4Int)
      language: CSharp
      name:
        CSharp: Equality(ProtectedVector4Int, ProtectedVector4Int)
        VB: Equality(ProtectedVector4Int, ProtectedVector4Int)
      nameWithType:
        CSharp: ProtectedVector4Int.Equality(ProtectedVector4Int, ProtectedVector4Int)
        VB: ProtectedVector4Int.Equality(ProtectedVector4Int, ProtectedVector4Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.Equality(GUPS.AntiCheat.Protected.ProtectedVector4Int, GUPS.AntiCheat.Protected.ProtectedVector4Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.Equality(GUPS.AntiCheat.Protected.ProtectedVector4Int, GUPS.AntiCheat.Protected.ProtectedVector4Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Equality
        path: ''
        startLine: 21930
      summary: "\nChecks if two protected Vector4Int instances are equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(ProtectedVector4Int v1, ProtectedVector4Int v2)
          VB: Public Shared Operator =(v1 As ProtectedVector4Int, v2 As ProtectedVector4Int) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedVector4Int
          description: The first protected Vector4Int.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedVector4Int
          description: The second protected Vector4Int.
        return:
          type: System.Boolean
          description: True if the values of the protected Vector4Int instances are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Inequality(GUPS.AntiCheat.Protected.ProtectedVector4Int,GUPS.AntiCheat.Protected.ProtectedVector4Int)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Inequality(GUPS.AntiCheat.Protected.ProtectedVector4Int,GUPS.AntiCheat.Protected.ProtectedVector4Int)
      language: CSharp
      name:
        CSharp: Inequality(ProtectedVector4Int, ProtectedVector4Int)
        VB: Inequality(ProtectedVector4Int, ProtectedVector4Int)
      nameWithType:
        CSharp: ProtectedVector4Int.Inequality(ProtectedVector4Int, ProtectedVector4Int)
        VB: ProtectedVector4Int.Inequality(ProtectedVector4Int, ProtectedVector4Int)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.Inequality(GUPS.AntiCheat.Protected.ProtectedVector4Int, GUPS.AntiCheat.Protected.ProtectedVector4Int)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.Inequality(GUPS.AntiCheat.Protected.ProtectedVector4Int, GUPS.AntiCheat.Protected.ProtectedVector4Int)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: op_Inequality
        path: ''
        startLine: 21941
      summary: "\nChecks if two protected Vector4Int instances are not equal.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(ProtectedVector4Int v1, ProtectedVector4Int v2)
          VB: Public Shared Operator <>(v1 As ProtectedVector4Int, v2 As ProtectedVector4Int) As Boolean
        parameters:
        - id: v1
          type: GUPS.AntiCheat.Protected.ProtectedVector4Int
          description: The first protected Vector4Int.
        - id: v2
          type: GUPS.AntiCheat.Protected.ProtectedVector4Int
          description: The second protected Vector4Int.
        return:
          type: System.Boolean
          description: True if the values of the protected Vector4Int instances are not equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.ProtectedVector4Int.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: ProtectedVector4Int.Equals(Object)
        VB: ProtectedVector4Int.Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.ProtectedVector4Int.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.ProtectedVector4Int.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected
      source:
        id: Equals
        path: ''
        startLine: 21951
      summary: "\nChecks if the protected Vector4Int is equal to the specified object.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare with the protected Vector4Int.
        return:
          type: System.Boolean
          description: True if the values are equal; otherwise, false.
      overload: GUPS.AntiCheat.Protected.ProtectedVector4Int.Equals*
      overridden: System.ValueType.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
- id: GUPS.AntiCheat.Protected.Collection
  commentId: N:GUPS.AntiCheat.Protected.Collection
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Protected.Collection
    VB: GUPS.AntiCheat.Protected.Collection
  nameWithType:
    CSharp: GUPS.AntiCheat.Protected.Collection
    VB: GUPS.AntiCheat.Protected.Collection
  qualifiedName:
    CSharp: GUPS.AntiCheat.Protected.Collection
    VB: GUPS.AntiCheat.Protected.Collection
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.ProtectedList`1
    language: CSharp
    name:
      CSharp: ProtectedList<T>
      VB: ProtectedList(Of T)
    nameWithType:
      CSharp: ProtectedList<T>
      VB: ProtectedList(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>
      VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection
    source:
      id: ProtectedList
      path: ''
      startLine: 12956
    summary: "\nRepresents a protected list that implements the <see cref=\"!:IList&lt;T>\"></see> interface. This list allows tracking changes \nand provides a hash code for verification purposes. Before interacting with the list, you should call the <xref href=\"GUPS.AntiCheat.Protected.Collection.ProtectedList%601.CheckIntegrity\" data-throw-if-not-resolved=\"false\"></xref> \nmethod to verify its integrity.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          public class ProtectedList<T>

              where T : struct
        VB: Public Class ProtectedList(Of T As Structure)
      typeParameters:
      - id: T
        description: The type of elements in the list.
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.IDataIntegrity
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Item(System.Int32)
      commentId: P:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Item(System.Int32)
      language: CSharp
      name:
        CSharp: Item[Int32]
        VB: Item(Int32)
      nameWithType:
        CSharp: ProtectedList<T>.Item[Int32]
        VB: ProtectedList(Of T).Item(Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Item[System.Int32]
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Item(System.Int32)
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: this[]
        path: ''
        startLine: 12968
      summary: "\nGets or sets the element at the specified index.\n"
      example: []
      syntax:
        content:
          CSharp: public T this[int _Index] { get; set; }
          VB: Public Property Item(_Index As Integer) As T
        parameters:
        - id: _Index
          type: System.Int32
          description: The zero-based index of the element to get or set.
        return:
          type: '{T}'
          description: The element at the specified index.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Item*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Count
      commentId: P:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: ProtectedList<T>.Count
        VB: ProtectedList(Of T).Count
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Count
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Count
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Count
        path: ''
        startLine: 12987
      summary: "\nGets the number of elements contained in the list.\n"
      example: []
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Count*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IsReadOnly
      commentId: P:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IsReadOnly
      language: CSharp
      name:
        CSharp: IsReadOnly
        VB: IsReadOnly
      nameWithType:
        CSharp: ProtectedList<T>.IsReadOnly
        VB: ProtectedList(Of T).IsReadOnly
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.IsReadOnly
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).IsReadOnly
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: IsReadOnly
        path: ''
        startLine: 12992
      summary: "\nGets a value indicating whether the list is read-only.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsReadOnly { get; }
          VB: Public ReadOnly Property IsReadOnly As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IsReadOnly*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Hash
      commentId: P:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Hash
      language: CSharp
      name:
        CSharp: Hash
        VB: Hash
      nameWithType:
        CSharp: ProtectedList<T>.Hash
        VB: ProtectedList(Of T).Hash
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Hash
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Hash
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Hash
        path: ''
        startLine: 12997
      summary: "\nGets the hash code associated with the current state of the list.\n"
      example: []
      syntax:
        content:
          CSharp: public Int32 Hash { get; }
          VB: Public ReadOnly Property Hash As Int32
        parameters: []
        return:
          type: GUPS.AntiCheat.Int32
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Hash*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedList<T>.HasIntegrity
        VB: ProtectedList(Of T).HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.HasIntegrity
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: HasIntegrity
        path: ''
        startLine: 13002
      summary: "\nGet if the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.#ctor
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.#ctor
      language: CSharp
      name:
        CSharp: ProtectedList()
        VB: ProtectedList()
      nameWithType:
        CSharp: ProtectedList<T>.ProtectedList()
        VB: ProtectedList(Of T).ProtectedList()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.ProtectedList()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).ProtectedList()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: .ctor
        path: ''
        startLine: 13007
      summary: "\nCreate a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.ProtectedList%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedList()
          VB: Public Sub New
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.ProtectedList`1: 
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Add(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Add(`0)
      language: CSharp
      name:
        CSharp: Add(T)
        VB: Add(T)
      nameWithType:
        CSharp: ProtectedList<T>.Add(T)
        VB: ProtectedList(Of T).Add(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Add(T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Add(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Add
        path: ''
        startLine: 13018
      summary: "\nAdds an item to the end of the list.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(T _Item)
          VB: Public Sub Add(_Item As T)
        parameters:
        - id: _Item
          type: '{T}'
          description: The item to add to the list.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Insert(System.Int32,`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Insert(System.Int32,`0)
      language: CSharp
      name:
        CSharp: Insert(Int32, T)
        VB: Insert(Int32, T)
      nameWithType:
        CSharp: ProtectedList<T>.Insert(Int32, T)
        VB: ProtectedList(Of T).Insert(Int32, T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Insert(System.Int32, T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Insert(System.Int32, T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Insert
        path: ''
        startLine: 13032
      summary: "\nInserts an item into the list at the specified index.\n"
      example: []
      syntax:
        content:
          CSharp: public void Insert(int _Index, T _Item)
          VB: Public Sub Insert(_Index As Integer, _Item As T)
        parameters:
        - id: _Index
          type: System.Int32
          description: The zero-based index at which the item should be inserted.
        - id: _Item
          type: '{T}'
          description: The item to insert into the list.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Insert*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Contains(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Contains(`0)
      language: CSharp
      name:
        CSharp: Contains(T)
        VB: Contains(T)
      nameWithType:
        CSharp: ProtectedList<T>.Contains(T)
        VB: ProtectedList(Of T).Contains(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Contains(T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Contains(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Contains
        path: ''
        startLine: 13046
      summary: "\nDetermines whether the list contains a specific value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(T _Item)
          VB: Public Function Contains(_Item As T) As Boolean
        parameters:
        - id: _Item
          type: '{T}'
          description: The object to locate in the list.
        return:
          type: System.Boolean
          description: true if item is found in the list; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CopyTo(`0[],System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CopyTo(`0[],System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(T[], Int32)
        VB: CopyTo(T(), Int32)
      nameWithType:
        CSharp: ProtectedList<T>.CopyTo(T[], Int32)
        VB: ProtectedList(Of T).CopyTo(T(), Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.CopyTo(T[], System.Int32)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).CopyTo(T(), System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: CopyTo
        path: ''
        startLine: 13053
      summary: "\nCopies the elements of the list to an Array, starting at a particular Array index.\n"
      example: []
      syntax:
        content:
          CSharp: public void CopyTo(T[] _Array, int _ArrayIndex)
          VB: Public Sub CopyTo(_Array As T(), _ArrayIndex As Integer)
        parameters:
        - id: _Array
          type: '{T}[]'
          description: The one-dimensional Array that is the destination of the elements copied from the list.
        - id: _ArrayIndex
          type: System.Int32
          description: The zero-based index in array at which copying begins.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IndexOf(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IndexOf(`0)
      language: CSharp
      name:
        CSharp: IndexOf(T)
        VB: IndexOf(T)
      nameWithType:
        CSharp: ProtectedList<T>.IndexOf(T)
        VB: ProtectedList(Of T).IndexOf(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.IndexOf(T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).IndexOf(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: IndexOf
        path: ''
        startLine: 13060
      summary: "\nSearches for the specified object and returns the zero-based index of the first occurrence within the entire list.\n"
      example: []
      syntax:
        content:
          CSharp: public int IndexOf(T _Item)
          VB: Public Function IndexOf(_Item As T) As Integer
        parameters:
        - id: _Item
          type: '{T}'
          description: The object to locate in the list.
        return:
          type: System.Int32
          description: The zero-based index of the first occurrence of item within the entire list, if found; otherwise, -1.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IndexOf*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Remove(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Remove(`0)
      language: CSharp
      name:
        CSharp: Remove(T)
        VB: Remove(T)
      nameWithType:
        CSharp: ProtectedList<T>.Remove(T)
        VB: ProtectedList(Of T).Remove(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Remove(T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Remove(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Remove
        path: ''
        startLine: 13067
      summary: "\nRemoves the first occurrence of a specific object from the list.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Remove(T _Item)
          VB: Public Function Remove(_Item As T) As Boolean
        parameters:
        - id: _Item
          type: '{T}'
          description: The object to remove from the list.
        return:
          type: System.Boolean
          description: true if item was successfully removed from the list; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Remove*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.RemoveAt(System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.RemoveAt(System.Int32)
      language: CSharp
      name:
        CSharp: RemoveAt(Int32)
        VB: RemoveAt(Int32)
      nameWithType:
        CSharp: ProtectedList<T>.RemoveAt(Int32)
        VB: ProtectedList(Of T).RemoveAt(Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.RemoveAt(System.Int32)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).RemoveAt(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: RemoveAt
        path: ''
        startLine: 13086
      summary: "\nRemoves the element at the specified index of the list.\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveAt(int _Index)
          VB: Public Sub RemoveAt(_Index As Integer)
        parameters:
        - id: _Index
          type: System.Int32
          description: The zero-based index of the element to remove.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.RemoveAt*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Clear
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: ProtectedList<T>.Clear()
        VB: ProtectedList(Of T).Clear()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Clear()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Clear
        path: ''
        startLine: 13101
      summary: "\nRemoves all elements from the list.\n"
      example: []
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedList<T>.CheckIntegrity()
        VB: ProtectedList(Of T).CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: CheckIntegrity
        path: ''
        startLine: 13114
      summary: "\nVerifies the integrity of the list by comparing the current hash with the computed hash.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the list is verified successfully; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedList<T>.GetHashCode()
        VB: ProtectedList(Of T).GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.GetHashCode()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: GetHashCode
        path: ''
        startLine: 13130
      summary: "\nReturns a hash code for the list based on its elements.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: A hash code for the current list.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetEnumerator
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: ProtectedList<T>.GetEnumerator()
        VB: ProtectedList(Of T).GetEnumerator()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.GetEnumerator()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).GetEnumerator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: GetEnumerator
        path: ''
        startLine: 13179
      summary: "\nReturns an enumerator that iterates through the list.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerator<T> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of T)
        return:
          type: System.Collections.IEnumerator{{T}}
          description: An enumerator for the list.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetEnumerator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CheckIntegrity: 
  - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1
    language: CSharp
    name:
      CSharp: ProtectedQueue<T>
      VB: ProtectedQueue(Of T)
    nameWithType:
      CSharp: ProtectedQueue<T>
      VB: ProtectedQueue(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>
      VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection
    source:
      id: ProtectedQueue
      path: ''
      startLine: 13205
    summary: "\nRepresents a protected queue that implements the <see cref=\"!:IEnumerable&lt;T>\"></see>, <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>, \n<see cref=\"!:IReadOnlyCollection&lt;T>\"></see>, and <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interfaces. This queue allows tracking changes and \nprovides a hash code for verification purposes. Before interacting with the queue, you should call the <xref href=\"GUPS.AntiCheat.Protected.Collection.ProtectedQueue%601.CheckIntegrity\" data-throw-if-not-resolved=\"false\"></xref>\nto verify its integrity.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedQueue<T> : ICollection, IEnumerable where T : struct'
        VB: >-
          Public Class ProtectedQueue(Of T As Structure)

              Implements ICollection, IEnumerable
      typeParameters:
      - id: T
        description: The type of elements in the queue.
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.IReadOnlyCollection{{T}}
    - GUPS.AntiCheat.IDataIntegrity
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Hash
      commentId: P:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Hash
      language: CSharp
      name:
        CSharp: Hash
        VB: Hash
      nameWithType:
        CSharp: ProtectedQueue<T>.Hash
        VB: ProtectedQueue(Of T).Hash
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Hash
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Hash
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Hash
        path: ''
        startLine: 13215
      summary: "\nGets the hash code associated with the current state of the queue.\n"
      example: []
      syntax:
        content:
          CSharp: public Int32 Hash { get; }
          VB: Public ReadOnly Property Hash As Int32
        parameters: []
        return:
          type: GUPS.AntiCheat.Int32
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Hash*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Count
      commentId: P:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: ProtectedQueue<T>.Count
        VB: ProtectedQueue(Of T).Count
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Count
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Count
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Count
        path: ''
        startLine: 13220
      summary: "\nGets the number of elements contained in the queue.\n"
      example: []
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Count*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedQueue<T>.HasIntegrity
        VB: ProtectedQueue(Of T).HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.HasIntegrity
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: HasIntegrity
        path: ''
        startLine: 13235
      summary: "\nGet if the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor
      language: CSharp
      name:
        CSharp: ProtectedQueue()
        VB: ProtectedQueue()
      nameWithType:
        CSharp: ProtectedQueue<T>.ProtectedQueue()
        VB: ProtectedQueue(Of T).ProtectedQueue()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.ProtectedQueue()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).ProtectedQueue()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: .ctor
        path: ''
        startLine: 13240
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.ProtectedQueue%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedQueue()
          VB: Public Sub New
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1: 
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor(System.Collections.IEnumerable{`0})
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor(System.Collections.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: ProtectedQueue(IEnumerable<T>)
        VB: ProtectedQueue(IEnumerable(Of T))
      nameWithType:
        CSharp: ProtectedQueue<T>.ProtectedQueue(IEnumerable<T>)
        VB: ProtectedQueue(Of T).ProtectedQueue(IEnumerable(Of T))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.ProtectedQueue(System.Collections.IEnumerable<T>)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).ProtectedQueue(System.Collections.IEnumerable(Of T))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: .ctor
        path: ''
        startLine: 13251
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.ProtectedQueue%601\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified collection.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedQueue(IEnumerable<T> _Collection)
          VB: Public Sub New(_Collection As IEnumerable(Of T))
        parameters:
        - id: _Collection
          type: System.Collections.IEnumerable{{T}}
          description: The collection whose elements are copied to the new queue.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1: 
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor(System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: ProtectedQueue(Int32)
        VB: ProtectedQueue(Int32)
      nameWithType:
        CSharp: ProtectedQueue<T>.ProtectedQueue(Int32)
        VB: ProtectedQueue(Of T).ProtectedQueue(Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.ProtectedQueue(System.Int32)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).ProtectedQueue(System.Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: .ctor
        path: ''
        startLine: 13262
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.ProtectedQueue%601\" data-throw-if-not-resolved=\"false\"></xref> class with the specified initial capacity.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedQueue(int _Capacity)
          VB: Public Sub New(_Capacity As Integer)
        parameters:
        - id: _Capacity
          type: System.Int32
          description: The initial number of elements that the queue can contain.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1: 
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Contains(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Contains(`0)
      language: CSharp
      name:
        CSharp: Contains(T)
        VB: Contains(T)
      nameWithType:
        CSharp: ProtectedQueue<T>.Contains(T)
        VB: ProtectedQueue(Of T).Contains(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Contains(T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Contains(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Contains
        path: ''
        startLine: 13274
      summary: "\nDetermines whether the queue contains a specific value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(T _Item)
          VB: Public Function Contains(_Item As T) As Boolean
        parameters:
        - id: _Item
          type: '{T}'
          description: The object to locate in the queue.
        return:
          type: System.Boolean
          description: true if item is found in the queue; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Enqueue(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Enqueue(`0)
      language: CSharp
      name:
        CSharp: Enqueue(T)
        VB: Enqueue(T)
      nameWithType:
        CSharp: ProtectedQueue<T>.Enqueue(T)
        VB: ProtectedQueue(Of T).Enqueue(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Enqueue(T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Enqueue(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Enqueue
        path: ''
        startLine: 13280
      summary: "\nAdds an object to the end of the queue.\n"
      example: []
      syntax:
        content:
          CSharp: public void Enqueue(T _Item)
          VB: Public Sub Enqueue(_Item As T)
        parameters:
        - id: _Item
          type: '{T}'
          description: The object to add to the queue.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Enqueue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Peek
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Peek
      language: CSharp
      name:
        CSharp: Peek()
        VB: Peek()
      nameWithType:
        CSharp: ProtectedQueue<T>.Peek()
        VB: ProtectedQueue(Of T).Peek()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Peek()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Peek()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Peek
        path: ''
        startLine: 13293
      summary: "\nReturns the object at the beginning of the queue without removing it.\n"
      example: []
      syntax:
        content:
          CSharp: public T Peek()
          VB: Public Function Peek As T
        return:
          type: '{T}'
          description: The object at the beginning of the queue.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Peek*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Dequeue
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Dequeue
      language: CSharp
      name:
        CSharp: Dequeue()
        VB: Dequeue()
      nameWithType:
        CSharp: ProtectedQueue<T>.Dequeue()
        VB: ProtectedQueue(Of T).Dequeue()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Dequeue()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Dequeue()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Dequeue
        path: ''
        startLine: 13299
      summary: "\nRemoves and returns the object at the beginning of the queue.\n"
      example: []
      syntax:
        content:
          CSharp: public T Dequeue()
          VB: Public Function Dequeue As T
        return:
          type: '{T}'
          description: The object removed from the beginning of the queue.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Dequeue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CopyTo(`0[],System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CopyTo(`0[],System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(T[], Int32)
        VB: CopyTo(T(), Int32)
      nameWithType:
        CSharp: ProtectedQueue<T>.CopyTo(T[], Int32)
        VB: ProtectedQueue(Of T).CopyTo(T(), Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.CopyTo(T[], System.Int32)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).CopyTo(T(), System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: CopyTo
        path: ''
        startLine: 13323
      summary: "\nCopies the elements of the queue to an array, starting at a particular array index.\n"
      example: []
      syntax:
        content:
          CSharp: public void CopyTo(T[] _Array, int _ArrayIndex)
          VB: Public Sub CopyTo(_Array As T(), _ArrayIndex As Integer)
        parameters:
        - id: _Array
          type: '{T}[]'
          description: The one-dimensional array that is the destination of the elements copied from the queue.
        - id: _ArrayIndex
          type: System.Int32
          description: The zero-based index in array at which copying begins.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TrimExcess
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TrimExcess
      language: CSharp
      name:
        CSharp: TrimExcess()
        VB: TrimExcess()
      nameWithType:
        CSharp: ProtectedQueue<T>.TrimExcess()
        VB: ProtectedQueue(Of T).TrimExcess()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.TrimExcess()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).TrimExcess()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: TrimExcess
        path: ''
        startLine: 13328
      summary: "\nSets the capacity to the actual number of elements in the queue, if that number is less than a threshold value.\n"
      example: []
      syntax:
        content:
          CSharp: public void TrimExcess()
          VB: Public Sub TrimExcess
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TrimExcess*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryPeek(`0@)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryPeek(`0@)
      language: CSharp
      name:
        CSharp: TryPeek(out T)
        VB: TryPeek(ByRef T)
      nameWithType:
        CSharp: ProtectedQueue<T>.TryPeek(out T)
        VB: ProtectedQueue(Of T).TryPeek(ByRef T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.TryPeek(out T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).TryPeek(ByRef T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: TryPeek
        path: ''
        startLine: 13335
      summary: "\nReturns the object at the beginning of the queue without removing it and returns whether the operation succeeded.\n"
      example: []
      syntax:
        content:
          CSharp: public bool TryPeek(out T _Result)
          VB: Public Function TryPeek(ByRef _Result As T) As Boolean
        parameters:
        - id: _Result
          type: '{T}'
          description: When this method returns, contains the object at the beginning of the queue, if the queue is not empty; otherwise, the default value for the element type.
        return:
          type: System.Boolean
          description: true if there was an object to return; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryPeek*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryDequeue(`0@)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryDequeue(`0@)
      language: CSharp
      name:
        CSharp: TryDequeue(out T)
        VB: TryDequeue(ByRef T)
      nameWithType:
        CSharp: ProtectedQueue<T>.TryDequeue(out T)
        VB: ProtectedQueue(Of T).TryDequeue(ByRef T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.TryDequeue(out T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).TryDequeue(ByRef T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: TryDequeue
        path: ''
        startLine: 13351
      summary: "\nRemoves and returns the object at the beginning of the queue and returns whether the operation succeeded.\n"
      example: []
      syntax:
        content:
          CSharp: public bool TryDequeue(out T _Result)
          VB: Public Function TryDequeue(ByRef _Result As T) As Boolean
        parameters:
        - id: _Result
          type: '{T}'
          description: When this method returns, contains the object removed from the beginning of the queue, if the queue is not empty; otherwise, the default value for the element type.
        return:
          type: System.Boolean
          description: true if there was an object to return; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryDequeue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.ToArray
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.ToArray
      language: CSharp
      name:
        CSharp: ToArray()
        VB: ToArray()
      nameWithType:
        CSharp: ProtectedQueue<T>.ToArray()
        VB: ProtectedQueue(Of T).ToArray()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.ToArray()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).ToArray()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: ToArray
        path: ''
        startLine: 13366
      summary: "\nCopies the elements of the queue to a new array.\n"
      example: []
      syntax:
        content:
          CSharp: public T[] ToArray()
          VB: Public Function ToArray As T()
        return:
          type: '{T}[]'
          description: An array containing copies of the elements of the queue.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.ToArray*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Clear
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: ProtectedQueue<T>.Clear()
        VB: ProtectedQueue(Of T).Clear()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Clear()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Clear
        path: ''
        startLine: 13371
      summary: "\nRemoves all elements from the queue.\n"
      example: []
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedQueue<T>.CheckIntegrity()
        VB: ProtectedQueue(Of T).CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: CheckIntegrity
        path: ''
        startLine: 13384
      summary: "\nVerifies the integrity of the queue by comparing the current hash with the computed hash.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the queue is verified successfully; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedQueue<T>.GetHashCode()
        VB: ProtectedQueue(Of T).GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.GetHashCode()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: GetHashCode
        path: ''
        startLine: 13400
      summary: "\nReturns a hash code for the queue based on its elements.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: A hash code for the current queue.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetEnumerator
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: ProtectedQueue<T>.GetEnumerator()
        VB: ProtectedQueue(Of T).GetEnumerator()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.GetEnumerator()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).GetEnumerator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: GetEnumerator
        path: ''
        startLine: 13449
      summary: "\nReturns an enumerator that iterates through the elements of the queue.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerator<T> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of T)
        return:
          type: System.Collections.IEnumerator{{T}}
          description: An enumerator for the queue.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetEnumerator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      System.Collections.IEnumerable: 
      System.Collections.ICollection: 
      GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CheckIntegrity: 
  - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1
    language: CSharp
    name:
      CSharp: ProtectedStack<T>
      VB: ProtectedStack(Of T)
    nameWithType:
      CSharp: ProtectedStack<T>
      VB: ProtectedStack(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>
      VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection
    source:
      id: ProtectedStack
      path: ''
      startLine: 13475
    summary: "\nRepresents a protected stack that implements the <see cref=\"!:IEnumerable&lt;T>\"></see>, <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>, \n<see cref=\"!:IReadOnlyCollection&lt;T>\"></see>, and <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interfaces. This stack allows tracking changes \nand provides a hash code for verification purposes. Before interacting with the stack, you should call the <xref href=\"GUPS.AntiCheat.Protected.Collection.ProtectedStack%601.CheckIntegrity\" data-throw-if-not-resolved=\"false\"></xref>\nto verify its integrity.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedStack<T> : ICollection, IEnumerable where T : struct'
        VB: >-
          Public Class ProtectedStack(Of T As Structure)

              Implements ICollection, IEnumerable
      typeParameters:
      - id: T
        description: The type of elements in the stack.
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.IReadOnlyCollection{{T}}
    - GUPS.AntiCheat.IDataIntegrity
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Hash
      commentId: P:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Hash
      language: CSharp
      name:
        CSharp: Hash
        VB: Hash
      nameWithType:
        CSharp: ProtectedStack<T>.Hash
        VB: ProtectedStack(Of T).Hash
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Hash
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Hash
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Hash
        path: ''
        startLine: 13495
      summary: "\nGets the hash code associated with the current state of the stack.\n"
      example: []
      syntax:
        content:
          CSharp: public Int32 Hash { get; }
          VB: Public ReadOnly Property Hash As Int32
        parameters: []
        return:
          type: GUPS.AntiCheat.Int32
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Hash*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: ProtectedStack<T>.HasIntegrity
        VB: ProtectedStack(Of T).HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.HasIntegrity
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: HasIntegrity
        path: ''
        startLine: 13500
      summary: "\nGet if the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor
      language: CSharp
      name:
        CSharp: ProtectedStack()
        VB: ProtectedStack()
      nameWithType:
        CSharp: ProtectedStack<T>.ProtectedStack()
        VB: ProtectedStack(Of T).ProtectedStack()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.ProtectedStack()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).ProtectedStack()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: .ctor
        path: ''
        startLine: 13505
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.ProtectedStack%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedStack()
          VB: Public Sub New
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.ProtectedStack`1: 
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor(System.Collections.IEnumerable{`0})
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor(System.Collections.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: ProtectedStack(IEnumerable<T>)
        VB: ProtectedStack(IEnumerable(Of T))
      nameWithType:
        CSharp: ProtectedStack<T>.ProtectedStack(IEnumerable<T>)
        VB: ProtectedStack(Of T).ProtectedStack(IEnumerable(Of T))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.ProtectedStack(System.Collections.IEnumerable<T>)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).ProtectedStack(System.Collections.IEnumerable(Of T))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: .ctor
        path: ''
        startLine: 13516
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.ProtectedStack%601\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified collection.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedStack(IEnumerable<T> _Collection)
          VB: Public Sub New(_Collection As IEnumerable(Of T))
        parameters:
        - id: _Collection
          type: System.Collections.IEnumerable{{T}}
          description: The collection whose elements are copied to the new stack.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.ProtectedStack`1: 
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor(System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: ProtectedStack(Int32)
        VB: ProtectedStack(Int32)
      nameWithType:
        CSharp: ProtectedStack<T>.ProtectedStack(Int32)
        VB: ProtectedStack(Of T).ProtectedStack(Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.ProtectedStack(System.Int32)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).ProtectedStack(System.Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: .ctor
        path: ''
        startLine: 13527
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.ProtectedStack%601\" data-throw-if-not-resolved=\"false\"></xref> class with the specified initial capacity.\n"
      example: []
      syntax:
        content:
          CSharp: public ProtectedStack(int _Capacity)
          VB: Public Sub New(_Capacity As Integer)
        parameters:
        - id: _Capacity
          type: System.Int32
          description: The initial number of elements that the stack can contain.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.ProtectedStack`1: 
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Count
      commentId: P:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: ProtectedStack<T>.Count
        VB: ProtectedStack(Of T).Count
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Count
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Count
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Count
        path: ''
        startLine: 13537
      summary: "\nGets the number of elements contained in the stack.\n"
      example: []
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Count*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Contains(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Contains(`0)
      language: CSharp
      name:
        CSharp: Contains(T)
        VB: Contains(T)
      nameWithType:
        CSharp: ProtectedStack<T>.Contains(T)
        VB: ProtectedStack(Of T).Contains(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Contains(T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Contains(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Contains
        path: ''
        startLine: 13544
      summary: "\nDetermines whether the stack contains a specific value.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(T _Item)
          VB: Public Function Contains(_Item As T) As Boolean
        parameters:
        - id: _Item
          type: '{T}'
          description: The object to locate in the stack.
        return:
          type: System.Boolean
          description: true if item is found in the stack; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CopyTo(`0[],System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CopyTo(`0[],System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(T[], Int32)
        VB: CopyTo(T(), Int32)
      nameWithType:
        CSharp: ProtectedStack<T>.CopyTo(T[], Int32)
        VB: ProtectedStack(Of T).CopyTo(T(), Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.CopyTo(T[], System.Int32)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).CopyTo(T(), System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: CopyTo
        path: ''
        startLine: 13551
      summary: "\nCopies the elements of the stack to an array, starting at a particular array index.\n"
      example: []
      syntax:
        content:
          CSharp: public void CopyTo(T[] _Array, int _ArrayIndex)
          VB: Public Sub CopyTo(_Array As T(), _ArrayIndex As Integer)
        parameters:
        - id: _Array
          type: '{T}[]'
          description: The one-dimensional Array that is the destination of the elements copied from the stack.
        - id: _ArrayIndex
          type: System.Int32
          description: The zero-based index in array at which copying begins.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Push(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Push(`0)
      language: CSharp
      name:
        CSharp: Push(T)
        VB: Push(T)
      nameWithType:
        CSharp: ProtectedStack<T>.Push(T)
        VB: ProtectedStack(Of T).Push(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Push(T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Push(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Push
        path: ''
        startLine: 13564
      summary: "\nInserts an object at the top of the stack.\n"
      example: []
      syntax:
        content:
          CSharp: public void Push(T _Item)
          VB: Public Sub Push(_Item As T)
        parameters:
        - id: _Item
          type: '{T}'
          description: The object to push onto the stack.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Push*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Peek
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Peek
      language: CSharp
      name:
        CSharp: Peek()
        VB: Peek()
      nameWithType:
        CSharp: ProtectedStack<T>.Peek()
        VB: ProtectedStack(Of T).Peek()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Peek()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Peek()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Peek
        path: ''
        startLine: 13577
      summary: "\nReturns the object at the top of the stack without removing it.\n"
      example: []
      syntax:
        content:
          CSharp: public T Peek()
          VB: Public Function Peek As T
        return:
          type: '{T}'
          description: The object at the top of the stack.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Peek*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Pop
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Pop
      language: CSharp
      name:
        CSharp: Pop()
        VB: Pop()
      nameWithType:
        CSharp: ProtectedStack<T>.Pop()
        VB: ProtectedStack(Of T).Pop()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Pop()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Pop()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Pop
        path: ''
        startLine: 13583
      summary: "\nRemoves and returns the object at the top of the stack.\n"
      example: []
      syntax:
        content:
          CSharp: public T Pop()
          VB: Public Function Pop As T
        return:
          type: '{T}'
          description: The object removed from the top of the stack.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Pop*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TrimExcess
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TrimExcess
      language: CSharp
      name:
        CSharp: TrimExcess()
        VB: TrimExcess()
      nameWithType:
        CSharp: ProtectedStack<T>.TrimExcess()
        VB: ProtectedStack(Of T).TrimExcess()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.TrimExcess()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).TrimExcess()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: TrimExcess
        path: ''
        startLine: 13598
      summary: "\nSets the capacity to the actual number of elements in the stack, if that number is less than a threshold value.\n"
      example: []
      syntax:
        content:
          CSharp: public void TrimExcess()
          VB: Public Sub TrimExcess
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TrimExcess*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPeek(`0@)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPeek(`0@)
      language: CSharp
      name:
        CSharp: TryPeek(out T)
        VB: TryPeek(ByRef T)
      nameWithType:
        CSharp: ProtectedStack<T>.TryPeek(out T)
        VB: ProtectedStack(Of T).TryPeek(ByRef T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.TryPeek(out T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).TryPeek(ByRef T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: TryPeek
        path: ''
        startLine: 13605
      summary: "\nReturns the object at the top of the stack without removing it and returns whether the operation succeeded.\n"
      example: []
      syntax:
        content:
          CSharp: public bool TryPeek(out T _Result)
          VB: Public Function TryPeek(ByRef _Result As T) As Boolean
        parameters:
        - id: _Result
          type: '{T}'
          description: When this method returns, contains the object at the top of the stack, if the stack is not empty; otherwise, the default value for the element type.
        return:
          type: System.Boolean
          description: true if there was an object to return; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPeek*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPop(`0@)
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPop(`0@)
      language: CSharp
      name:
        CSharp: TryPop(out T)
        VB: TryPop(ByRef T)
      nameWithType:
        CSharp: ProtectedStack<T>.TryPop(out T)
        VB: ProtectedStack(Of T).TryPop(ByRef T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.TryPop(out T)
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).TryPop(ByRef T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: TryPop
        path: ''
        startLine: 13612
      summary: "\nRemoves and returns the object at the top of the stack and returns whether the operation succeeded.\n"
      example: []
      syntax:
        content:
          CSharp: public bool TryPop(out T _Result)
          VB: Public Function TryPop(ByRef _Result As T) As Boolean
        parameters:
        - id: _Result
          type: '{T}'
          description: When this method returns, contains the object removed from the top of the stack, if the stack is not empty; otherwise, the default value for the element type.
        return:
          type: System.Boolean
          description: true if there was an object to return; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPop*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.ToArray
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.ToArray
      language: CSharp
      name:
        CSharp: ToArray()
        VB: ToArray()
      nameWithType:
        CSharp: ProtectedStack<T>.ToArray()
        VB: ProtectedStack(Of T).ToArray()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.ToArray()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).ToArray()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: ToArray
        path: ''
        startLine: 13627
      summary: "\nCopies the elements of the stack to a new array.\n"
      example: []
      syntax:
        content:
          CSharp: public T[] ToArray()
          VB: Public Function ToArray As T()
        return:
          type: '{T}[]'
          description: An array containing copies of the elements of the stack.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.ToArray*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Clear
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: ProtectedStack<T>.Clear()
        VB: ProtectedStack(Of T).Clear()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Clear()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: Clear
        path: ''
        startLine: 13632
      summary: "\nRemoves all elements from the stack.\n"
      example: []
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: ProtectedStack<T>.CheckIntegrity()
        VB: ProtectedStack(Of T).CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: CheckIntegrity
        path: ''
        startLine: 13638
      summary: "\nVerifies the integrity of the stack by comparing the current hash with the computed hash.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the stack is verified successfully; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: ProtectedStack<T>.GetHashCode()
        VB: ProtectedStack(Of T).GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.GetHashCode()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: GetHashCode
        path: ''
        startLine: 13654
      summary: "\nReturns a hash code for the queue based on its elements.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: A hash code for the current queue.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetEnumerator
      commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: ProtectedStack<T>.GetEnumerator()
        VB: ProtectedStack(Of T).GetEnumerator()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.GetEnumerator()
        VB: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).GetEnumerator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection
      source:
        id: GetEnumerator
        path: ''
        startLine: 13703
      summary: "\nReturns an enumerator that iterates through the stack.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerator<T> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of T)
        return:
          type: System.Collections.IEnumerator{{T}}
          description: An enumerator for the stack.
      overload: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetEnumerator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      System.Collections.IEnumerable: 
      System.Collections.ICollection: 
      GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CheckIntegrity: 
- id: GUPS.AntiCheat.Protected.Collection.Chain
  commentId: N:GUPS.AntiCheat.Protected.Collection.Chain
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Protected.Collection.Chain
    VB: GUPS.AntiCheat.Protected.Collection.Chain
  nameWithType:
    CSharp: GUPS.AntiCheat.Protected.Collection.Chain
    VB: GUPS.AntiCheat.Protected.Collection.Chain
  qualifiedName:
    CSharp: GUPS.AntiCheat.Protected.Collection.Chain
    VB: GUPS.AntiCheat.Protected.Collection.Chain
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.Block`1
    language: CSharp
    name:
      CSharp: Block<T>
      VB: Block(Of T)
    nameWithType:
      CSharp: Block<T>
      VB: Block(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>
      VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection.Chain
    source:
      id: Block
      path: ''
      startLine: 13741
    summary: "\nRepresents an implementation of the <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.IBlock%601\" data-throw-if-not-resolved=\"false\"></xref> interface, storing transactions of type T for a blockchain. A block contains a \nfixed size of transactions and can be chained with other blocks to a blockchain.\n"
    remarks: "\n<p>\nThe block class is designed to store data transactions for a blockchain. A block has a nonce value, which is the hash of the previous block, \nallowing to chain blocks together, while easily verifying the integrity of the chain.\n</p>\n<p>\nThe class provides methods to append transactions to the block and verify its integrity. To do so a hash is stored and updated upon each \ntransaction addition.\n</p>\n<p>\nNote: Only primitive types or structs are supported.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Block<T> : IBlock<T> where T : struct'
        VB: >-
          Public Class Block(Of T As Structure)

              Implements IBlock(Of T)
      typeParameters:
      - id: T
        description: The value type of the content stored in the block transactions.
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Collection.Chain.IBlock{{T}}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Size
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Size
      language: CSharp
      name:
        CSharp: Size
        VB: Size
      nameWithType:
        CSharp: Block<T>.Size
        VB: Block(Of T).Size
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Size
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Size
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Size
        path: ''
        startLine: 13760
      summary: "\nGets the amount of max transactions this block can store.\n"
      example: []
      syntax:
        content:
          CSharp: public int Size { get; }
          VB: Public ReadOnly Property Size As Integer
        parameters: []
        return:
          type: System.Int32
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Size*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Items
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Items
      language: CSharp
      name:
        CSharp: Items
        VB: Items
      nameWithType:
        CSharp: Block<T>.Items
        VB: Block(Of T).Items
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Items
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Items
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Items
        path: ''
        startLine: 13771
      summary: "\nGets the array of transactions within the block.\n"
      example: []
      syntax:
        content:
          CSharp: public ITransaction<T>[] Items { get; }
          VB: Public ReadOnly Property Items As ITransaction(Of T)()
        parameters: []
        return:
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[]
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Items*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.IBlock{{T}}.Items
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Item(System.Int32)
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Item(System.Int32)
      language: CSharp
      name:
        CSharp: Item[Int32]
        VB: Item(Int32)
      nameWithType:
        CSharp: Block<T>.Item[Int32]
        VB: Block(Of T).Item(Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Item[System.Int32]
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Item(System.Int32)
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: this[]
        path: ''
        startLine: 13778
      summary: "\nGets the transaction at the specified index.\n"
      example: []
      syntax:
        content:
          CSharp: public ITransaction<T> this[int _Index] { get; }
          VB: Public ReadOnly Property Item(_Index As Integer) As ITransaction(Of T)
        parameters:
        - id: _Index
          type: System.Int32
          description: The index of the transaction to get.
        return:
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}
          description: The transaction at the specified index.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Item*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Count
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: Block<T>.Count
        VB: Block(Of T).Count
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Count
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Count
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Count
        path: ''
        startLine: 13789
      summary: "\nGets the count of transactions currently appended to the block.\n"
      example: []
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Count*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Last
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Last
      language: CSharp
      name:
        CSharp: Last
        VB: Last
      nameWithType:
        CSharp: Block<T>.Last
        VB: Block(Of T).Last
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Last
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Last
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Last
        path: ''
        startLine: 13794
      summary: "\nGets the last transaction appended to the block. If no transactions are appended, null is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public ITransaction<T> Last { get; }
          VB: Public ReadOnly Property Last As ITransaction(Of T)
        parameters: []
        return:
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Last*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.IBlock{{T}}.Last
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.LastTransactionTimestamp
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.LastTransactionTimestamp
      language: CSharp
      name:
        CSharp: LastTransactionTimestamp
        VB: LastTransactionTimestamp
      nameWithType:
        CSharp: Block<T>.LastTransactionTimestamp
        VB: Block(Of T).LastTransactionTimestamp
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.LastTransactionTimestamp
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).LastTransactionTimestamp
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: LastTransactionTimestamp
        path: ''
        startLine: 13799
      summary: "\nGet the last transaction timestamp, may be 0 if the block is empty.\n"
      example: []
      syntax:
        content:
          CSharp: public Int64 LastTransactionTimestamp { get; }
          VB: Public ReadOnly Property LastTransactionTimestamp As Int64
        parameters: []
        return:
          type: GUPS.AntiCheat.Int64
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.LastTransactionTimestamp*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.nonce
      commentId: F:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.nonce
      language: CSharp
      name:
        CSharp: nonce
        VB: nonce
      nameWithType:
        CSharp: Block<T>.nonce
        VB: Block(Of T).nonce
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.nonce
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).nonce
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: nonce
        path: ''
        startLine: 13805
      summary: "\nThe nonce value of the block, which is the hash of the previous block.\n"
      example: []
      syntax:
        content:
          CSharp: public int nonce
          VB: Public nonce As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Nonce
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Nonce
      language: CSharp
      name:
        CSharp: Nonce
        VB: Nonce
      nameWithType:
        CSharp: Block<T>.Nonce
        VB: Block(Of T).Nonce
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Nonce
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Nonce
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Nonce
        path: ''
        startLine: 13810
      summary: "\nGets the nonce value of the block, which is the hash of the previous block.\n"
      example: []
      syntax:
        content:
          CSharp: public int Nonce { get; }
          VB: Public ReadOnly Property Nonce As Integer
        parameters: []
        return:
          type: System.Int32
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Nonce*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.hash
      commentId: F:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.hash
      language: CSharp
      name:
        CSharp: hash
        VB: hash
      nameWithType:
        CSharp: Block<T>.hash
        VB: Block(Of T).hash
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.hash
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).hash
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: hash
        path: ''
        startLine: 13816
      summary: "\nA calculated hash based on the nonce and the transactions of the block.\n"
      example: []
      syntax:
        content:
          CSharp: public int hash
          VB: Public hash As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Hash
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Hash
      language: CSharp
      name:
        CSharp: Hash
        VB: Hash
      nameWithType:
        CSharp: Block<T>.Hash
        VB: Block(Of T).Hash
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Hash
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Hash
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Hash
        path: ''
        startLine: 13821
      summary: "\nGets the calculated hash based on the nonce and the transactions of the block.\n"
      example: []
      syntax:
        content:
          CSharp: public int Hash { get; }
          VB: Public ReadOnly Property Hash As Integer
        parameters: []
        return:
          type: System.Int32
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Hash*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.#ctor(System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: Block(Int32)
        VB: Block(Int32)
      nameWithType:
        CSharp: Block<T>.Block(Int32)
        VB: Block(Of T).Block(Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Block(System.Int32)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Block(System.Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: .ctor
        path: ''
        startLine: 13827
      summary: "\nInitializes a new instance of <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.Block%601\" data-throw-if-not-resolved=\"false\"></xref> with the specified size.\n"
      example: []
      syntax:
        content:
          CSharp: public Block(int _Size)
          VB: Public Sub New(_Size As Integer)
        parameters:
        - id: _Size
          type: System.Int32
          description: The size of the block.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.Chain.Block`1: 
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.#ctor(System.Int32,System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.#ctor(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Block(Int32, Int32)
        VB: Block(Int32, Int32)
      nameWithType:
        CSharp: Block<T>.Block(Int32, Int32)
        VB: Block(Of T).Block(Int32, Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Block(System.Int32, System.Int32)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Block(System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: .ctor
        path: ''
        startLine: 13845
      summary: "\nInitializes a new instance of <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.Block%601\" data-throw-if-not-resolved=\"false\"></xref> with the specified size and nonce.\n"
      example: []
      syntax:
        content:
          CSharp: public Block(int _Size, int _Nonce)
          VB: Public Sub New(_Size As Integer, _Nonce As Integer)
        parameters:
        - id: _Size
          type: System.Int32
          description: The size of the block.
        - id: _Nonce
          type: System.Int32
          description: The nonce associated with the block.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.Chain.Block`1: 
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Append(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Append(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
      language: CSharp
      name:
        CSharp: Append(ITransaction<T>)
        VB: Append(ITransaction(Of T))
      nameWithType:
        CSharp: Block<T>.Append(ITransaction<T>)
        VB: Block(Of T).Append(ITransaction(Of T))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Append(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Append(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Append
        path: ''
        startLine: 13861
      summary: "\nAppends a transaction to the block. If the block is full, the transaction is not appended and false is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Append(ITransaction<T> _Transaction)
          VB: Public Function Append(_Transaction As ITransaction(Of T)) As Boolean
        parameters:
        - id: _Transaction
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}
          description: The transaction to append.
        return:
          type: System.Boolean
          description: True if the transaction was successfully appended; otherwise, false if the block is full.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Append*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Verify
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Verify
      language: CSharp
      name:
        CSharp: Verify()
        VB: Verify()
      nameWithType:
        CSharp: Block<T>.Verify()
        VB: Block(Of T).Verify()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Verify()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Verify()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Verify
        path: ''
        startLine: 13885
      summary: "\nVerifies the integrity of the block by comparing the stored hash with the computed hash.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Verify()
          VB: Public Function Verify As Boolean
        return:
          type: System.Boolean
          description: True if the block is intact; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Verify*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: Block<T>.GetHashCode()
        VB: Block(Of T).GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.GetHashCode()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: GetHashCode
        path: ''
        startLine: 13894
      summary: "\nOverrides the default GetHashCode method to calculate a hash based on the nonce and the transactions of the block.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The computed hash code.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: Block<T>.Equals(Object)
        VB: Block(Of T).Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Equals
        path: ''
        startLine: 13918
      summary: "\nOverrides the default Equals method to compare the current block with another block.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object _Obj)
          VB: Public Overrides Function Equals(_Obj As Object) As Boolean
        parameters:
        - id: _Obj
          type: System.Object
          description: The object to compare with the current block.
        return:
          type: System.Boolean
          description: True if the specified object is equal to the current block; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetEnumerator
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: Block<T>.GetEnumerator()
        VB: Block(Of T).GetEnumerator()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.GetEnumerator()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).GetEnumerator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: GetEnumerator
        path: ''
        startLine: 13947
      summary: "\nEnumerates the transactions in the block.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerator<ITransaction<T>> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of ITransaction(Of T))
        return:
          type: System.Collections.IEnumerator{GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}}
          description: The enumerator.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetEnumerator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1: 
  - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1
    language: CSharp
    name:
      CSharp: BlockChain<T>
      VB: BlockChain(Of T)
    nameWithType:
      CSharp: BlockChain<T>
      VB: BlockChain(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>
      VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection.Chain
    source:
      id: BlockChain
      path: ''
      startLine: 14011
    summary: "\nRepresents an implementation of the <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.IDataChain%601\" data-throw-if-not-resolved=\"false\"></xref> interface, storing linked blocks to form a blockchain. The \nblockchain can be synchronized with a remote source to retrieve and upload data while maintaining its integrity. Valid use cases\ncould be to store game data, such as scores, achievements, or player progress and synchronize it with a remote server. This \nimplementation is not designed to store large amounts of data, but rather to store small amounts of data that require integrity \nand synchronization.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.BlockChain%601\" data-throw-if-not-resolved=\"false\"></xref> class implements the <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.IDataChain%601\" data-throw-if-not-resolved=\"false\"></xref> interface and supports observation through the \n<see cref=\"!:IWatchedSubject\"></see> interface. The blockchain consists of blocks, each containing a specified number of transactions storing \ncontent of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>. \n</p>\n<p>\nThe blocks are linked together based on their hash, ensuring the integrity of the chain. New transactions can be appended to the chain \nonly if it maintains its integrity.\n</p>\n<p>\nEverytime the blockchain is modified (through synchronization or appending new transactions), the integrity of the chain is verified. \nIf the integrity is compromised, the blockchain notifies the primitive cheating detector of the possible cheating attempt.\n</p>\n<p>\nNote: Only primitive types or structs are supported.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class BlockChain<T> : IDataChain<Block<T>> where T : struct'
        VB: >-
          Public Class BlockChain(Of T As Structure)

              Implements IDataChain(Of Block(Of T))
      typeParameters:
      - id: T
        description: The value type of the content stored in the block transactions.
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}
    - GUPS.AntiCheat.IDataIntegrity
    - GUPS.AntiCheat.IWatchedSubject
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Chain
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Chain
      language: CSharp
      name:
        CSharp: Chain
        VB: Chain
      nameWithType:
        CSharp: BlockChain<T>.Chain
        VB: BlockChain(Of T).Chain
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.Chain
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).Chain
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Chain
        path: ''
        startLine: 14022
      summary: "\nGets the blockchain as ordered linked list of blocks.\n"
      example: []
      syntax:
        content:
          CSharp: public LinkedList<Block<T>> Chain { get; }
          VB: Public ReadOnly Property Chain As LinkedList(Of Block(Of T))
        parameters: []
        return:
          type: GUPS.AntiCheat.LinkedList{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Chain*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}.Chain
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.LastBlock
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.LastBlock
      language: CSharp
      name:
        CSharp: LastBlock
        VB: LastBlock
      nameWithType:
        CSharp: BlockChain<T>.LastBlock
        VB: BlockChain(Of T).LastBlock
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.LastBlock
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).LastBlock
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: LastBlock
        path: ''
        startLine: 14032
      summary: "\nGet the last block of the chain, may be null if the chain is empty.\n"
      example: []
      syntax:
        content:
          CSharp: public Block<T> LastBlock { get; }
          VB: Public ReadOnly Property LastBlock As Block(Of T)
        parameters: []
        return:
          type: GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.LastBlock*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: BlockChain<T>.HasIntegrity
        VB: BlockChain(Of T).HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.HasIntegrity
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: HasIntegrity
        path: ''
        startLine: 14042
      summary: "\nGet if the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor
      language: CSharp
      name:
        CSharp: BlockChain()
        VB: BlockChain()
      nameWithType:
        CSharp: BlockChain<T>.BlockChain()
        VB: BlockChain(Of T).BlockChain()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.BlockChain()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).BlockChain()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: .ctor
        path: ''
        startLine: 14048
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.BlockChain%601\" data-throw-if-not-resolved=\"false\"></xref> class with a default block size of 10 and without a synchronizer.\nWithout a synchronizer, the blockchain cannot be synchronized with a remote source and is only used for local purposes.\n"
      example: []
      syntax:
        content:
          CSharp: public BlockChain()
          VB: Public Sub New
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1: 
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor(System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: BlockChain(Int32)
        VB: BlockChain(Int32)
      nameWithType:
        CSharp: BlockChain<T>.BlockChain(Int32)
        VB: BlockChain(Of T).BlockChain(Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.BlockChain(System.Int32)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).BlockChain(System.Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: .ctor
        path: ''
        startLine: 14058
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.BlockChain%601\" data-throw-if-not-resolved=\"false\"></xref> class with the specified block size and without a synchronizer.\nWithout a synchronizer, the blockchain cannot be synchronized with a remote source and is only used for local purposes.\n"
      example: []
      syntax:
        content:
          CSharp: public BlockChain(int _BlockSize)
          VB: Public Sub New(_BlockSize As Integer)
        parameters:
        - id: _BlockSize
          type: System.Int32
          description: The size of each block in the blockchain.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1: 
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor(GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{`0})
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor(GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{`0})
      language: CSharp
      name:
        CSharp: BlockChain(ISynchronizer<T>)
        VB: BlockChain(ISynchronizer(Of T))
      nameWithType:
        CSharp: BlockChain<T>.BlockChain(ISynchronizer<T>)
        VB: BlockChain(Of T).BlockChain(ISynchronizer(Of T))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.BlockChain(GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).BlockChain(GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: .ctor
        path: ''
        startLine: 14068
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.BlockChain%601\" data-throw-if-not-resolved=\"false\"></xref> class with the default block size of 10 and specified synchronizer.\nWithout a synchronizer, the blockchain cannot be synchronized with a remote source and is only used for local purposes.\n"
      example: []
      syntax:
        content:
          CSharp: public BlockChain(ISynchronizer<T> _Synchronizer)
          VB: Public Sub New(_Synchronizer As ISynchronizer(Of T))
        parameters:
        - id: _Synchronizer
          type: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}
          description: The synchronizer used to synchronize the blockchain with a remote source.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1: 
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor(System.Int32,GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{`0})
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor(System.Int32,GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{`0})
      language: CSharp
      name:
        CSharp: BlockChain(Int32, ISynchronizer<T>)
        VB: BlockChain(Int32, ISynchronizer(Of T))
      nameWithType:
        CSharp: BlockChain<T>.BlockChain(Int32, ISynchronizer<T>)
        VB: BlockChain(Of T).BlockChain(Int32, ISynchronizer(Of T))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.BlockChain(System.Int32, GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).BlockChain(System.Int32, GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: .ctor
        path: ''
        startLine: 14079
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.BlockChain%601\" data-throw-if-not-resolved=\"false\"></xref> class with the specified block size and synchronizer.\nWithout a synchronizer, the blockchain cannot be synchronized with a remote source and is only used for local purposes.\n"
      example: []
      syntax:
        content:
          CSharp: public BlockChain(int _BlockSize, ISynchronizer<T> _Synchronizer)
          VB: Public Sub New(_BlockSize As Integer, _Synchronizer As ISynchronizer(Of T))
        parameters:
        - id: _BlockSize
          type: System.Int32
          description: The size of each block in the blockchain.
        - id: _Synchronizer
          type: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}
          description: The synchronizer used to synchronize the blockchain with a remote source.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1: 
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.SynchronizeAsync
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.SynchronizeAsync
      language: CSharp
      name:
        CSharp: SynchronizeAsync()
        VB: SynchronizeAsync()
      nameWithType:
        CSharp: BlockChain<T>.SynchronizeAsync()
        VB: BlockChain(Of T).SynchronizeAsync()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.SynchronizeAsync()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).SynchronizeAsync()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: SynchronizeAsync
        path: ''
        startLine: 14094
      summary: "\nSynchronizes the blockchain with the remote source, appending all remote transactions to the local chain beginning from the last sync timestamp.\nIf no synchronizer is available, no synchronization is performed and the method just returns true.\n"
      example: []
      syntax:
        content:
          CSharp: public async Task<bool> SynchronizeAsync()
          VB: Public Function SynchronizeAsync As Task(Of Boolean)
        return:
          type: GUPS.AntiCheat.Task{System.Boolean}
          description: True if the synchronization is successful; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.SynchronizeAsync*
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Append(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Append(`0)
      language: CSharp
      name:
        CSharp: Append(T)
        VB: Append(T)
      nameWithType:
        CSharp: BlockChain<T>.Append(T)
        VB: BlockChain(Of T).Append(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.Append(T)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).Append(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Append
        path: ''
        startLine: 14175
      summary: "\nAppends a new item to the blockchain. This item will be packed into a transaction and synchronized with the remote source if available.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Append(T _Item)
          VB: Public Function Append(_Item As T) As Boolean
        parameters:
        - id: _Item
          type: '{T}'
          description: The item to be appended to the blockchain.
        return:
          type: System.Boolean
          description: True if the item is appended successfully and the chain has still its integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Append*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.AppendAsync(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.AppendAsync(`0)
      language: CSharp
      name:
        CSharp: AppendAsync(T)
        VB: AppendAsync(T)
      nameWithType:
        CSharp: BlockChain<T>.AppendAsync(T)
        VB: BlockChain(Of T).AppendAsync(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.AppendAsync(T)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).AppendAsync(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: AppendAsync
        path: ''
        startLine: 14209
      summary: "\nAppends a new item to the blockchain. This item will be packed into a transaction and synchronized with the remote source if available.\n"
      example: []
      syntax:
        content:
          CSharp: public async Task<bool> AppendAsync(T _Item)
          VB: Public Function AppendAsync(_Item As T) As Task(Of Boolean)
        parameters:
        - id: _Item
          type: '{T}'
          description: The item to be appended to the blockchain.
        return:
          type: GUPS.AntiCheat.Task{System.Boolean}
          description: True if the item is appended successfully and the chain has still its integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.AppendAsync*
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - isEii: true
      id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#Append(GUPS.AntiCheat.Protected.Collection.Chain.Block{`0})
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#Append(GUPS.AntiCheat.Protected.Collection.Chain.Block{`0})
      language: CSharp
      name:
        CSharp: IDataChain<Block<T>>.Append(Block<T>)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.Append(Block(Of T))
      nameWithType:
        CSharp: BlockChain<T>.IDataChain<Block<T>>.Append(Block<T>)
        VB: BlockChain(Of T).GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.Append(Block(Of T))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.Append(GUPS.AntiCheat.Protected.Collection.Chain.Block<T>)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.Append(GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.Append
        path: ''
        startLine: 14238
      summary: "\nAppends the blocks content to the blockchain. The content will be synchronized with the remote source if available.\n"
      example: []
      syntax:
        content:
          CSharp: bool IDataChain<Block<T>>.Append(Block<T> _Item)
          VB: Function GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.Append(_Item As Block(Of T)) As Boolean Implements IDataChain(Of Block(Of T)).Append
        parameters:
        - id: _Item
          type: GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}
          description: The block to be appended to the blockchain.
        return:
          type: System.Boolean
          description: True if the block is appended successfully and the chain has still its integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#Append*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}.Append(GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}})
      modifiers:
        CSharp: []
        VB: []
    - isEii: true
      id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#AppendAsync(GUPS.AntiCheat.Protected.Collection.Chain.Block{`0})
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#AppendAsync(GUPS.AntiCheat.Protected.Collection.Chain.Block{`0})
      language: CSharp
      name:
        CSharp: IDataChain<Block<T>>.AppendAsync(Block<T>)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.AppendAsync(Block(Of T))
      nameWithType:
        CSharp: BlockChain<T>.IDataChain<Block<T>>.AppendAsync(Block<T>)
        VB: BlockChain(Of T).GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.AppendAsync(Block(Of T))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.AppendAsync(GUPS.AntiCheat.Protected.Collection.Chain.Block<T>)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.AppendAsync(GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.AppendAsync
        path: ''
        startLine: 14255
      summary: "\nAppends the blocks content to the blockchain. The content will be synchronized with the remote source if available.\n"
      example: []
      syntax:
        content:
          CSharp: async Task<bool> IDataChain<Block<T>>.AppendAsync(Block<T> _Item)
          VB: Function GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.AppendAsync(_Item As Block(Of T)) As Task(Of Boolean) Implements IDataChain(Of Block(Of T)).AppendAsync
        parameters:
        - id: _Item
          type: GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}
          description: The block to be appended to the blockchain.
        return:
          type: GUPS.AntiCheat.Task{System.Boolean}
          description: True if the block is appended successfully and the chain has still its integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#AppendAsync*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}.AppendAsync(GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}})
      modifiers:
        CSharp:
        - async
        VB: []
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: BlockChain<T>.CheckIntegrity()
        VB: BlockChain(Of T).CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: CheckIntegrity
        path: ''
        startLine: 14296
      summary: "\nVerifies the integrity of the entire blockchain, notifying observers if a change is detected.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the blockchain is verified successfully; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrityOfLastBlock
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrityOfLastBlock
      language: CSharp
      name:
        CSharp: CheckIntegrityOfLastBlock()
        VB: CheckIntegrityOfLastBlock()
      nameWithType:
        CSharp: BlockChain<T>.CheckIntegrityOfLastBlock()
        VB: BlockChain(Of T).CheckIntegrityOfLastBlock()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.CheckIntegrityOfLastBlock()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).CheckIntegrityOfLastBlock()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: CheckIntegrityOfLastBlock
        path: ''
        startLine: 14334
      summary: "\nVerifies the integrity of the last block in the blockchain, notifying observers if a change is detected.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrityOfLastBlock()
          VB: Public Function CheckIntegrityOfLastBlock As Boolean
        return:
          type: System.Boolean
          description: True if the last block is verified successfully; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrityOfLastBlock*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GetEnumerator
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: BlockChain<T>.GetEnumerator()
        VB: BlockChain(Of T).GetEnumerator()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.GetEnumerator()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).GetEnumerator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: GetEnumerator
        path: ''
        startLine: 14366
      summary: "\nProvides an enumerator for iterating over the blocks in the blockchain.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerator<Block<T>> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of Block(Of T))
        return:
          type: System.Collections.IEnumerator{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}
          description: An enumerator for the blockchain.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GetEnumerator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Dispose
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: BlockChain<T>.Dispose()
        VB: BlockChain(Of T).Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.Dispose()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Dispose
        path: ''
        startLine: 14383
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1: 
      GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1: 
  - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1
    language: CSharp
    name:
      CSharp: IBlock<T>
      VB: IBlock(Of T)
    nameWithType:
      CSharp: IBlock<T>
      VB: IBlock(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>
      VB: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection.Chain
    source:
      id: IBlock
      path: ''
      startLine: 14398
    summary: "\nRepresents a generic block interface storing transactions of type T.\n"
    example: []
    syntax:
      content:
        CSharp: public interface IBlock<T>
        VB: Public Interface IBlock(Of T)
      typeParameters:
      - id: T
        description: The type of content stored in the block transactions.
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Size
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Size
      language: CSharp
      name:
        CSharp: Size
        VB: Size
      nameWithType:
        CSharp: IBlock<T>.Size
        VB: IBlock(Of T).Size
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Size
        VB: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Size
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Size
        path: ''
        startLine: 14403
      summary: "\nGets the amount of max transactions this block can store.\n"
      example: []
      syntax:
        content:
          CSharp: Int32 Size { get; }
          VB: ReadOnly Property Size As Int32
        parameters: []
        return:
          type: GUPS.AntiCheat.Int32
      overload: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Size*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items
      language: CSharp
      name:
        CSharp: Items
        VB: Items
      nameWithType:
        CSharp: IBlock<T>.Items
        VB: IBlock(Of T).Items
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Items
        VB: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Items
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Items
        path: ''
        startLine: 14408
      summary: "\nGets an array containing the transactions of the block.\n"
      example: []
      syntax:
        content:
          CSharp: ITransaction<T>[] Items { get; }
          VB: ReadOnly Property Items As ITransaction(Of T)()
        parameters: []
        return:
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[]
      overload: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Item(Int32)
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Item(Int32)
      language: CSharp
      name:
        CSharp: Item[Int32]
        VB: Item(Int32)
      nameWithType:
        CSharp: IBlock<T>.Item[Int32]
        VB: IBlock(Of T).Item(Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Item[Int32]
        VB: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Item(Int32)
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: this[]
        path: ''
        startLine: 14415
      summary: "\nGets the transaction at the specified index.\n"
      example: []
      syntax:
        content:
          CSharp: ITransaction<T> this[Int32 _Index] { get; }
          VB: ReadOnly Property Item(_Index As Int32) As ITransaction(Of T)
        parameters:
        - id: _Index
          type: GUPS.AntiCheat.Int32
          description: The index of the transaction to get.
        return:
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}
          description: The transaction at the specified index.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Item*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Count
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: IBlock<T>.Count
        VB: IBlock(Of T).Count
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Count
        VB: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Count
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Count
        path: ''
        startLine: 14420
      summary: "\nGets the count of transactions in the block.\n"
      example: []
      syntax:
        content:
          CSharp: Int32 Count { get; }
          VB: ReadOnly Property Count As Int32
        parameters: []
        return:
          type: GUPS.AntiCheat.Int32
      overload: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Count*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last
      language: CSharp
      name:
        CSharp: Last
        VB: Last
      nameWithType:
        CSharp: IBlock<T>.Last
        VB: IBlock(Of T).Last
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Last
        VB: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Last
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Last
        path: ''
        startLine: 14425
      summary: "\nGets the last transaction appended to the block.\n"
      example: []
      syntax:
        content:
          CSharp: ITransaction<T> Last { get; }
          VB: ReadOnly Property Last As ITransaction(Of T)
        parameters: []
        return:
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}
      overload: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Nonce
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Nonce
      language: CSharp
      name:
        CSharp: Nonce
        VB: Nonce
      nameWithType:
        CSharp: IBlock<T>.Nonce
        VB: IBlock(Of T).Nonce
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Nonce
        VB: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Nonce
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Nonce
        path: ''
        startLine: 14430
      summary: "\nGets the nonce value of the block, which is the hash of the previous block.\n"
      example: []
      syntax:
        content:
          CSharp: Int32 Nonce { get; }
          VB: ReadOnly Property Nonce As Int32
        parameters: []
        return:
          type: GUPS.AntiCheat.Int32
      overload: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Nonce*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Hash
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Hash
      language: CSharp
      name:
        CSharp: Hash
        VB: Hash
      nameWithType:
        CSharp: IBlock<T>.Hash
        VB: IBlock(Of T).Hash
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Hash
        VB: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Hash
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Hash
        path: ''
        startLine: 14435
      summary: "\nGets the hash value associated with the block.\n"
      example: []
      syntax:
        content:
          CSharp: Int32 Hash { get; }
          VB: ReadOnly Property Hash As Int32
        parameters: []
        return:
          type: GUPS.AntiCheat.Int32
      overload: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Hash*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
  - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
    language: CSharp
    name:
      CSharp: ITransaction<T>
      VB: ITransaction(Of T)
    nameWithType:
      CSharp: ITransaction<T>
      VB: ITransaction(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>
      VB: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection.Chain
    source:
      id: ITransaction
      path: ''
      startLine: 14448
    summary: "\nRepresents a transaction inside a block from a blockchain. A transaction contains a timestamp (the time it was added to the blockchain) \nand a content of type T.\n"
    example: []
    syntax:
      content:
        CSharp: public interface ITransaction<T>
        VB: Public Interface ITransaction(Of T)
      typeParameters:
      - id: T
        description: The type of the content of the transaction.
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp
      language: CSharp
      name:
        CSharp: Timestamp
        VB: Timestamp
      nameWithType:
        CSharp: ITransaction<T>.Timestamp
        VB: ITransaction(Of T).Timestamp
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>.Timestamp
        VB: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T).Timestamp
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Timestamp
        path: ''
        startLine: 14453
      summary: "\nThe timestamp of the transaction, when it was added to the blockchain. Recommended to use at least milliseconds.\n"
      example: []
      syntax:
        content:
          CSharp: Int64 Timestamp { get; }
          VB: ReadOnly Property Timestamp As Int64
        parameters: []
        return:
          type: GUPS.AntiCheat.Int64
      overload: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content
      language: CSharp
      name:
        CSharp: Content
        VB: Content
      nameWithType:
        CSharp: ITransaction<T>.Content
        VB: ITransaction(Of T).Content
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>.Content
        VB: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T).Content
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Content
        path: ''
        startLine: 14458
      summary: "\nThe serializeable content of the transaction.\n"
      example: []
      syntax:
        content:
          CSharp: T Content { get; }
          VB: ReadOnly Property Content As T
        parameters: []
        return:
          type: '{T}'
      overload: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
  - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1
    language: CSharp
    name:
      CSharp: Transaction<T>
      VB: Transaction(Of T)
    nameWithType:
      CSharp: Transaction<T>
      VB: Transaction(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Transaction<T>
      VB: GUPS.AntiCheat.Protected.Collection.Chain.Transaction(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection.Chain
    source:
      id: Transaction
      path: ''
      startLine: 14476
    summary: "\nRepresents a transaction inside a block from a blockchain. A transaction contains a timestamp (the time it was added to the blockchain) \nand a content of type T.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Transaction<T> : ITransaction<T> where T : struct'
        VB: >-
          Public Class Transaction(Of T As Structure)

              Implements ITransaction(Of T)
      typeParameters:
      - id: T
        description: The type of the content of the transaction.
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.timestamp
      commentId: F:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.timestamp
      language: CSharp
      name:
        CSharp: timestamp
        VB: timestamp
      nameWithType:
        CSharp: Transaction<T>.timestamp
        VB: Transaction(Of T).timestamp
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Transaction<T>.timestamp
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Transaction(Of T).timestamp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: timestamp
        path: ''
        startLine: 14485
      summary: "\nThe timestamp of the transaction, when it was added to the blockchain. Recommended to use at least milliseconds.\n"
      example: []
      syntax:
        content:
          CSharp: public Int64 timestamp
          VB: Public timestamp As Int64
        return:
          type: GUPS.AntiCheat.Int64
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Timestamp
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Timestamp
      language: CSharp
      name:
        CSharp: Timestamp
        VB: Timestamp
      nameWithType:
        CSharp: Transaction<T>.Timestamp
        VB: Transaction(Of T).Timestamp
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Transaction<T>.Timestamp
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Transaction(Of T).Timestamp
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Timestamp
        path: ''
        startLine: 14490
      summary: "\nThe timestamp of the transaction, when it was added to the blockchain. Recommended to use at least milliseconds.\n"
      example: []
      syntax:
        content:
          CSharp: public Int64 Timestamp { get; }
          VB: Public ReadOnly Property Timestamp As Int64
        parameters: []
        return:
          type: GUPS.AntiCheat.Int64
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Timestamp*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}.Timestamp
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.content
      commentId: F:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.content
      language: CSharp
      name:
        CSharp: content
        VB: content
      nameWithType:
        CSharp: Transaction<T>.content
        VB: Transaction(Of T).content
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Transaction<T>.content
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Transaction(Of T).content
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: content
        path: ''
        startLine: 14496
      summary: "\nThe serializeable content of the transaction.\n"
      example: []
      syntax:
        content:
          CSharp: public T content
          VB: Public content As T
        return:
          type: '{T}'
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Content
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Content
      language: CSharp
      name:
        CSharp: Content
        VB: Content
      nameWithType:
        CSharp: Transaction<T>.Content
        VB: Transaction(Of T).Content
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Transaction<T>.Content
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Transaction(Of T).Content
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Content
        path: ''
        startLine: 14501
      summary: "\nThe serializeable content of the transaction.\n"
      example: []
      syntax:
        content:
          CSharp: public T Content { get; }
          VB: Public ReadOnly Property Content As T
        parameters: []
        return:
          type: '{T}'
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Content*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}.Content
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.#ctor(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.#ctor(`0)
      language: CSharp
      name:
        CSharp: Transaction(T)
        VB: Transaction(T)
      nameWithType:
        CSharp: Transaction<T>.Transaction(T)
        VB: Transaction(Of T).Transaction(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Transaction<T>.Transaction(T)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Transaction(Of T).Transaction(T)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: .ctor
        path: ''
        startLine: 14507
      summary: "\nCreate a new transaction with the current timestamp and content.\n"
      example: []
      syntax:
        content:
          CSharp: public Transaction(T _Content)
          VB: Public Sub New(_Content As T)
        parameters:
        - id: _Content
          type: '{T}'
          description: The content of the transaction.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.#ctor(Int64,`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.#ctor(Int64,`0)
      language: CSharp
      name:
        CSharp: Transaction(Int64, T)
        VB: Transaction(Int64, T)
      nameWithType:
        CSharp: Transaction<T>.Transaction(Int64, T)
        VB: Transaction(Of T).Transaction(Int64, T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Transaction<T>.Transaction(Int64, T)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Transaction(Of T).Transaction(Int64, T)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: .ctor
        path: ''
        startLine: 14517
      summary: "\nCreate a new transaction with the passed index, timestamp and content.\n"
      example: []
      syntax:
        content:
          CSharp: public Transaction(Int64 _Timestamp, T _Content)
          VB: Public Sub New(_Timestamp As Int64, _Content As T)
        parameters:
        - id: _Timestamp
          type: GUPS.AntiCheat.Int64
          description: The imestamp of the transaction.
        - id: _Content
          type: '{T}'
          description: The content of the transaction.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: Transaction<T>.GetHashCode()
        VB: Transaction(Of T).GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.Transaction<T>.GetHashCode()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.Transaction(Of T).GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: GetHashCode
        path: ''
        startLine: 14527
      summary: "\nCalculate the hash code of the transaction based on its timestamp and content.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: The hash code of the transaction.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1
    language: CSharp
    name:
      CSharp: FileSynchronizer<T>
      VB: FileSynchronizer(Of T)
    nameWithType:
      CSharp: FileSynchronizer<T>
      VB: FileSynchronizer(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer<T>
      VB: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection.Chain
    source:
      id: FileSynchronizer
      path: ''
      startLine: 14555
    summary: "\nRepresents a synchronizer that is responsible for synchronizing a BlockChain with a file on the local file storage.\n"
    remarks: "\n<p>\nNote: Only primitive types or structs are supported.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class FileSynchronizer<T> : ISynchronizer<T> where T : struct'
        VB: >-
          Public Class FileSynchronizer(Of T As Structure)

              Implements ISynchronizer(Of T)
      typeParameters:
      - id: T
        description: The content type of the transactions.
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.FilePath
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.FilePath
      language: CSharp
      name:
        CSharp: FilePath
        VB: FilePath
      nameWithType:
        CSharp: FileSynchronizer<T>.FilePath
        VB: FileSynchronizer(Of T).FilePath
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer<T>.FilePath
        VB: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer(Of T).FilePath
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: FilePath
        path: ''
        startLine: 14561
      summary: "\nGets the file path of the file that is used for the synchronization.\n"
      example: []
      syntax:
        content:
          CSharp: public string FilePath { get; }
          VB: Public ReadOnly Property FilePath As String
        parameters: []
        return:
          type: System.String
      overload: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.FilePath*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.#ctor(String)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.#ctor(String)
      language: CSharp
      name:
        CSharp: FileSynchronizer(String)
        VB: FileSynchronizer(String)
      nameWithType:
        CSharp: FileSynchronizer<T>.FileSynchronizer(String)
        VB: FileSynchronizer(Of T).FileSynchronizer(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer<T>.FileSynchronizer(String)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer(Of T).FileSynchronizer(String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: .ctor
        path: ''
        startLine: 14577
      summary: "\nCreate a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public FileSynchronizer(String _FilePath)
          VB: Public Sub New(_FilePath As String)
        parameters:
        - id: _FilePath
          type: GUPS.AntiCheat.String
          description: The local file path of the file that is used for the synchronization.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1: 
    - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.ReadAsync(Int64)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.ReadAsync(Int64)
      language: CSharp
      name:
        CSharp: ReadAsync(Int64)
        VB: ReadAsync(Int64)
      nameWithType:
        CSharp: FileSynchronizer<T>.ReadAsync(Int64)
        VB: FileSynchronizer(Of T).ReadAsync(Int64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer<T>.ReadAsync(Int64)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer(Of T).ReadAsync(Int64)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: ReadAsync
        path: ''
        startLine: 14644
      syntax:
        content:
          CSharp: public async Task<ITransaction<T>[]> ReadAsync(Int64 _SyncTimestamp)
          VB: Public Function ReadAsync(_SyncTimestamp As Int64) As Task(Of ITransaction(Of T)())
        parameters:
        - id: _SyncTimestamp
          type: GUPS.AntiCheat.Int64
        return:
          type: GUPS.AntiCheat.Task{GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[]}
      overload: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.ReadAsync*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}.ReadAsync(Int64)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
      language: CSharp
      name:
        CSharp: WriteAsync(ITransaction<T>)
        VB: WriteAsync(ITransaction(Of T))
      nameWithType:
        CSharp: FileSynchronizer<T>.WriteAsync(ITransaction<T>)
        VB: FileSynchronizer(Of T).WriteAsync(ITransaction(Of T))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer<T>.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer(Of T).WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: WriteAsync
        path: ''
        startLine: 14705
      summary: "\nSyncs the blockchain with a file on the file storage. Saves the transaction from the local blockchain to the file.\n"
      example: []
      syntax:
        content:
          CSharp: public async Task WriteAsync(ITransaction<T> _Transaction)
          VB: Public Function WriteAsync(_Transaction As ITransaction(Of T)) As Task
        parameters:
        - id: _Transaction
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}
          description: The transaction to save in the file.
        return:
          type: GUPS.AntiCheat.Task
      overload: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.WriteAsync*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}})
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
      language: CSharp
      name:
        CSharp: WriteAsync(ITransaction<T>[])
        VB: WriteAsync(ITransaction(Of T)())
      nameWithType:
        CSharp: FileSynchronizer<T>.WriteAsync(ITransaction<T>[])
        VB: FileSynchronizer(Of T).WriteAsync(ITransaction(Of T)())
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer<T>.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>[])
        VB: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer(Of T).WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T)())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: WriteAsync
        path: ''
        startLine: 14733
      summary: "\nSyncs the blockchain with a file on the file storage. Saves the transactions from the local blockchain to the file.\n"
      example: []
      syntax:
        content:
          CSharp: public async Task WriteAsync(ITransaction<T>[] _Transactions)
          VB: Public Function WriteAsync(_Transactions As ITransaction(Of T)()) As Task
        parameters:
        - id: _Transactions
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[]
          description: The transactions to save in the file.
        return:
          type: GUPS.AntiCheat.Task
      overload: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.WriteAsync*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[])
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
  - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1
    language: CSharp
    name:
      CSharp: ISynchronizer<T>
      VB: ISynchronizer(Of T)
    nameWithType:
      CSharp: ISynchronizer<T>
      VB: ISynchronizer(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>
      VB: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection.Chain
    source:
      id: ISynchronizer
      path: ''
      startLine: 14754
    summary: "\nAn interface that is responsible for synchronizing the BlockChain with the server.\n"
    example: []
    syntax:
      content:
        CSharp: public interface ISynchronizer<T>
        VB: Public Interface ISynchronizer(Of T)
      typeParameters:
      - id: T
        description: The content type of the transactions.
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync(Int64)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync(Int64)
      language: CSharp
      name:
        CSharp: ReadAsync(Int64)
        VB: ReadAsync(Int64)
      nameWithType:
        CSharp: ISynchronizer<T>.ReadAsync(Int64)
        VB: ISynchronizer(Of T).ReadAsync(Int64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>.ReadAsync(Int64)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T).ReadAsync(Int64)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: ReadAsync
        path: ''
        startLine: 14761
      syntax:
        content:
          CSharp: Task<ITransaction<T>[]> ReadAsync(Int64 _SyncTimestamp)
          VB: Function ReadAsync(_SyncTimestamp As Int64) As Task(Of ITransaction(Of T)())
        parameters:
        - id: _SyncTimestamp
          type: GUPS.AntiCheat.Int64
        return:
          type: GUPS.AntiCheat.Task{GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[]}
      overload: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync*
      modifiers:
        CSharp: []
        VB: []
    - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
      language: CSharp
      name:
        CSharp: WriteAsync(ITransaction<T>)
        VB: WriteAsync(ITransaction(Of T))
      nameWithType:
        CSharp: ISynchronizer<T>.WriteAsync(ITransaction<T>)
        VB: ISynchronizer(Of T).WriteAsync(ITransaction(Of T))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T).WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: WriteAsync
        path: ''
        startLine: 14767
      summary: "\nSyncs the blockchain with the server. Uploads the transaction from the local blockchain to the server.\n"
      example: []
      syntax:
        content:
          CSharp: Task WriteAsync(ITransaction<T> _Transaction)
          VB: Function WriteAsync(_Transaction As ITransaction(Of T)) As Task
        parameters:
        - id: _Transaction
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}
          description: The transaction to upload to the server.
        return:
          type: GUPS.AntiCheat.Task
      overload: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync*
      modifiers:
        CSharp: []
        VB: []
    - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
      language: CSharp
      name:
        CSharp: WriteAsync(ITransaction<T>[])
        VB: WriteAsync(ITransaction(Of T)())
      nameWithType:
        CSharp: ISynchronizer<T>.WriteAsync(ITransaction<T>[])
        VB: ISynchronizer(Of T).WriteAsync(ITransaction(Of T)())
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>[])
        VB: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T).WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T)())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: WriteAsync
        path: ''
        startLine: 14773
      summary: "\nSyncs the blockchain with the server. Uploads the transactions from the local blockchain to the server.\n"
      example: []
      syntax:
        content:
          CSharp: Task WriteAsync(ITransaction<T>[] _Transactions)
          VB: Function WriteAsync(_Transactions As ITransaction(Of T)()) As Task
        parameters:
        - id: _Transactions
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[]
          description: The transactions to upload to the server.
        return:
          type: GUPS.AntiCheat.Task
      overload: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync*
      modifiers:
        CSharp: []
        VB: []
  - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1
    language: CSharp
    name:
      CSharp: WebSynchronizer<T>
      VB: WebSynchronizer(Of T)
    nameWithType:
      CSharp: WebSynchronizer<T>
      VB: WebSynchronizer(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer<T>
      VB: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection.Chain
    source:
      id: WebSynchronizer
      path: ''
      startLine: 14793
    summary: "\nRepresents a synchronizer that is responsible for synchronizing a BlockChain with a web server. The web server should provide a read and \nwrite endpoint. The read endpoint should return the transactions as JSON array and accept an int64 &apos;timestamp&apos; as query parameter. The \nwrite endpoint should accept transactions as JSON array. And set the timestamp for each received transaction. Use at least milliseconds.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class WebSynchronizer<T> : ISynchronizer<T> where T : struct'
        VB: >-
          Public Class WebSynchronizer(Of T As Structure)

              Implements ISynchronizer(Of T)
      typeParameters:
      - id: T
        description: ''
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadEndpoint
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadEndpoint
      language: CSharp
      name:
        CSharp: ReadEndpoint
        VB: ReadEndpoint
      nameWithType:
        CSharp: WebSynchronizer<T>.ReadEndpoint
        VB: WebSynchronizer(Of T).ReadEndpoint
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer<T>.ReadEndpoint
        VB: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer(Of T).ReadEndpoint
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: ReadEndpoint
        path: ''
        startLine: 14799
      summary: "\nGet the read endpoint of the web server. The endpoint should return the transactions as JSON array.\n"
      example: []
      syntax:
        content:
          CSharp: public String ReadEndpoint { get; }
          VB: Public ReadOnly Property ReadEndpoint As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadEndpoint*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteEndpoint
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteEndpoint
      language: CSharp
      name:
        CSharp: WriteEndpoint
        VB: WriteEndpoint
      nameWithType:
        CSharp: WebSynchronizer<T>.WriteEndpoint
        VB: WebSynchronizer(Of T).WriteEndpoint
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer<T>.WriteEndpoint
        VB: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer(Of T).WriteEndpoint
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: WriteEndpoint
        path: ''
        startLine: 14804
      summary: "\nGet the write endpoint of the web server. The endpoint should accept transactions as JSON array.\n"
      example: []
      syntax:
        content:
          CSharp: public String WriteEndpoint { get; }
          VB: Public ReadOnly Property WriteEndpoint As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteEndpoint*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.#ctor(String,String)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.#ctor(String,String)
      language: CSharp
      name:
        CSharp: WebSynchronizer(String, String)
        VB: WebSynchronizer(String, String)
      nameWithType:
        CSharp: WebSynchronizer<T>.WebSynchronizer(String, String)
        VB: WebSynchronizer(Of T).WebSynchronizer(String, String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer<T>.WebSynchronizer(String, String)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer(Of T).WebSynchronizer(String, String)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: .ctor
        path: ''
        startLine: 14813
      summary: "\nCreate a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public WebSynchronizer(String _ReadEndpoint, String _WriteEndpoint)
          VB: Public Sub New(_ReadEndpoint As String, _WriteEndpoint As String)
        parameters:
        - id: _ReadEndpoint
          type: GUPS.AntiCheat.String
          description: "The read endpoint of the web server. The endpoint should return the transactions as JSON array. The endpoint \nshould accept a timestamp as query parameter."
        - id: _WriteEndpoint
          type: GUPS.AntiCheat.String
          description: "The write endpoint of the web server. The endpoint should accept transactions as JSON array. The endpoint \nshould set the timestamp for each received transaction."
      overload: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1: 
    - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadAsync(Int64)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadAsync(Int64)
      language: CSharp
      name:
        CSharp: ReadAsync(Int64)
        VB: ReadAsync(Int64)
      nameWithType:
        CSharp: WebSynchronizer<T>.ReadAsync(Int64)
        VB: WebSynchronizer(Of T).ReadAsync(Int64)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer<T>.ReadAsync(Int64)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer(Of T).ReadAsync(Int64)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: ReadAsync
        path: ''
        startLine: 14827
      summary: "\nSyncs the blockchain with a remove server. Downloads the latest transactions from the server and updates the local blockchain, starting\nfrom the passed sync timestamp.\n"
      example: []
      syntax:
        content:
          CSharp: public async Task<ITransaction<T>[]> ReadAsync(Int64 _SyncTimestamp)
          VB: Public Function ReadAsync(_SyncTimestamp As Int64) As Task(Of ITransaction(Of T)())
        parameters:
        - id: _SyncTimestamp
          type: GUPS.AntiCheat.Int64
          description: The timestamp of the last sync.
        return:
          type: GUPS.AntiCheat.Task{GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[]}
          description: The array of transactions that were loaded from the server. If no new transactions are available, an empty array is returned.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadAsync*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}.ReadAsync(Int64)
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
      language: CSharp
      name:
        CSharp: WriteAsync(ITransaction<T>)
        VB: WriteAsync(ITransaction(Of T))
      nameWithType:
        CSharp: WebSynchronizer<T>.WriteAsync(ITransaction<T>)
        VB: WebSynchronizer(Of T).WriteAsync(ITransaction(Of T))
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer<T>.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer(Of T).WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: WriteAsync
        path: ''
        startLine: 14868
      summary: "\nSyncs the blockchain with a remove server. Uploads the transaction from the local blockchain to the server.\n"
      example: []
      syntax:
        content:
          CSharp: public async Task WriteAsync(ITransaction<T> _Transaction)
          VB: Public Function WriteAsync(_Transaction As ITransaction(Of T)) As Task
        parameters:
        - id: _Transaction
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}
          description: The transaction to upload to the server.
        return:
          type: GUPS.AntiCheat.Task
      overload: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteAsync*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}})
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
      language: CSharp
      name:
        CSharp: WriteAsync(ITransaction<T>[])
        VB: WriteAsync(ITransaction(Of T)())
      nameWithType:
        CSharp: WebSynchronizer<T>.WriteAsync(ITransaction<T>[])
        VB: WebSynchronizer(Of T).WriteAsync(ITransaction(Of T)())
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer<T>.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>[])
        VB: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer(Of T).WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T)())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: WriteAsync
        path: ''
        startLine: 14879
      summary: "\nSyncs the blockchain with a remove server. Uploads the transactions from the local blockchain to the server.\n"
      example: []
      syntax:
        content:
          CSharp: public async Task WriteAsync(ITransaction<T>[] _Transactions)
          VB: Public Function WriteAsync(_Transactions As ITransaction(Of T)()) As Task
        parameters:
        - id: _Transactions
          type: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[]
          description: The transactions to upload to the server.
        return:
          type: GUPS.AntiCheat.Task
      overload: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteAsync*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[])
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
  - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1
    language: CSharp
    name:
      CSharp: DataChain<T>
      VB: DataChain(Of T)
    nameWithType:
      CSharp: DataChain<T>
      VB: DataChain(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>
      VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection.Chain
    source:
      id: DataChain
      path: ''
      startLine: 14957
    summary: "\nRepresents a generic data chain that implements the <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.IDataChain%601\" data-throw-if-not-resolved=\"false\"></xref> interface and is observed by the primitive cheating detector. \nUsing this class, you can ensure that a chain of data is not modified without your knowledge. Each time you append or remove an item from the\nchain, the class verifies its integrity and notifies the primitive cheating detector if a change is detected. This can be performance costly,\nso do not use it for large amounts of data.\nOnly primitive types are supported.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.DataChain%601\" data-throw-if-not-resolved=\"false\"></xref> class represents a data chain that implements the <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.IDataChain%601\" data-throw-if-not-resolved=\"false\"></xref> interface. It allows \nyou to observe changes in the data chain through the <see cref=\"!:IWatchedSubject\"></see> interface. The class supports the storage of \nelements of primitive types and ensures that modifications to the data chain trigger notifications to subscribed observers.\n</p>\n<p>\nThe class maintains a linked list of elements, and changes to the data chain are monitored by computing hash codes and notifying the \nprimitive detector when a unallowed change is detected.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: 'public class DataChain<T> : IDataChain<T> where T : struct'
        VB: >-
          Public Class DataChain(Of T As Structure)

              Implements IDataChain(Of T)
      typeParameters:
      - id: T
        description: The type of elements stored in the data chain, must be a nullable value type.
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{{T}}
    - GUPS.AntiCheat.IDataIntegrity
    - GUPS.AntiCheat.IWatchedSubject
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Chain
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Chain
      language: CSharp
      name:
        CSharp: Chain
        VB: Chain
      nameWithType:
        CSharp: DataChain<T>.Chain
        VB: DataChain(Of T).Chain
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.Chain
        VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).Chain
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Chain
        path: ''
        startLine: 14972
      summary: "\nGets the linked list containing the elements of the data chain.\n"
      example: []
      syntax:
        content:
          CSharp: public LinkedList<T> Chain { get; }
          VB: Public ReadOnly Property Chain As LinkedList(Of T)
        parameters: []
        return:
          type: GUPS.AntiCheat.LinkedList{{T}}
      overload: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Chain*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{{T}}.Chain
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.HasIntegrity
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.HasIntegrity
      language: CSharp
      name:
        CSharp: HasIntegrity
        VB: HasIntegrity
      nameWithType:
        CSharp: DataChain<T>.HasIntegrity
        VB: DataChain(Of T).HasIntegrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.HasIntegrity
        VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).HasIntegrity
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: HasIntegrity
        path: ''
        startLine: 14977
      summary: "\nGet if the protected value has integrity, i.e., whether it has maintained its original state.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasIntegrity { get; }
          VB: Public ReadOnly Property HasIntegrity As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.HasIntegrity*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.#ctor
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.#ctor
      language: CSharp
      name:
        CSharp: DataChain()
        VB: DataChain()
      nameWithType:
        CSharp: DataChain<T>.DataChain()
        VB: DataChain(Of T).DataChain()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.DataChain()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).DataChain()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: .ctor
        path: ''
        startLine: 14982
      summary: "\nInitializes a new instance of the <xref href=\"GUPS.AntiCheat.Protected.Collection.Chain.DataChain%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
      example: []
      syntax:
        content:
          CSharp: public DataChain()
          VB: Public Sub New
      overload: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1: 
    - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Append(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Append(`0)
      language: CSharp
      name:
        CSharp: Append(T)
        VB: Append(T)
      nameWithType:
        CSharp: DataChain<T>.Append(T)
        VB: DataChain(Of T).Append(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.Append(T)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).Append(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Append
        path: ''
        startLine: 14996
      summary: "\nAppends a new item to the end of the data chain.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Append(T _Item)
          VB: Public Function Append(_Item As T) As Boolean
        parameters:
        - id: _Item
          type: '{T}'
          description: The item to be appended to the data chain.
        return:
          type: System.Boolean
          description: True if the element is appended successfully and the chain has its integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Append*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{{T}}.Append({T})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.AppendAsync(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.AppendAsync(`0)
      language: CSharp
      name:
        CSharp: AppendAsync(T)
        VB: AppendAsync(T)
      nameWithType:
        CSharp: DataChain<T>.AppendAsync(T)
        VB: DataChain(Of T).AppendAsync(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.AppendAsync(T)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).AppendAsync(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: AppendAsync
        path: ''
        startLine: 15020
      summary: "\nAppends a new item to the end of the data chain.\n"
      example: []
      syntax:
        content:
          CSharp: public async Task<bool> AppendAsync(T _Item)
          VB: Public Function AppendAsync(_Item As T) As Task(Of Boolean)
        parameters:
        - id: _Item
          type: '{T}'
          description: The item to be appended to the data chain.
        return:
          type: GUPS.AntiCheat.Task{System.Boolean}
          description: True if the element is appended successfully and the chain has its integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.AppendAsync*
      implements:
      - GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{{T}}.AppendAsync({T})
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLast
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLast
      language: CSharp
      name:
        CSharp: RemoveLast()
        VB: RemoveLast()
      nameWithType:
        CSharp: DataChain<T>.RemoveLast()
        VB: DataChain(Of T).RemoveLast()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.RemoveLast()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).RemoveLast()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: RemoveLast
        path: ''
        startLine: 15045
      summary: "\nRemoves the last item from the end of the data chain.\n"
      example: []
      syntax:
        content:
          CSharp: public bool RemoveLast()
          VB: Public Function RemoveLast As Boolean
        return:
          type: System.Boolean
          description: True if the element could be removed successfully and the chain has its integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLast*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLastAsync
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLastAsync
      language: CSharp
      name:
        CSharp: RemoveLastAsync()
        VB: RemoveLastAsync()
      nameWithType:
        CSharp: DataChain<T>.RemoveLastAsync()
        VB: DataChain(Of T).RemoveLastAsync()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.RemoveLastAsync()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).RemoveLastAsync()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: RemoveLastAsync
        path: ''
        startLine: 15068
      summary: "\nRemoves the last item from the end of the data chain.\n"
      example: []
      syntax:
        content:
          CSharp: public async Task<bool> RemoveLastAsync()
          VB: Public Function RemoveLastAsync As Task(Of Boolean)
        return:
          type: GUPS.AntiCheat.Task{System.Boolean}
          description: True if the element could be removed successfully and the chain has its integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLastAsync*
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.CheckIntegrity
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.CheckIntegrity
      language: CSharp
      name:
        CSharp: CheckIntegrity()
        VB: CheckIntegrity()
      nameWithType:
        CSharp: DataChain<T>.CheckIntegrity()
        VB: DataChain(Of T).CheckIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.CheckIntegrity()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).CheckIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: CheckIntegrity
        path: ''
        startLine: 15093
      summary: "\nVerifies the integrity of the data chain, notifying observers if a change is detected.\n"
      example: []
      syntax:
        content:
          CSharp: public bool CheckIntegrity()
          VB: Public Function CheckIntegrity As Boolean
        return:
          type: System.Boolean
          description: True if the data chain is verified successfully; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.CheckIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetHashCode
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: DataChain<T>.GetHashCode()
        VB: DataChain(Of T).GetHashCode()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.GetHashCode()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: GetHashCode
        path: ''
        startLine: 15123
      summary: "\nComputes the hash code for the data chain based on the hash codes of its elements.\n"
      example: []
      syntax:
        content:
          CSharp: public override Int32 GetHashCode()
          VB: Public Overrides Function GetHashCode As Int32
        return:
          type: GUPS.AntiCheat.Int32
          description: A hash code for the current data chain.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Equals(System.Object)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: DataChain<T>.Equals(Object)
        VB: DataChain(Of T).Equals(Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.Equals(System.Object)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Equals
        path: ''
        startLine: 15147
      summary: "\nDetermines whether the specified object is equal to the current data chain.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object _Obj)
          VB: Public Overrides Function Equals(_Obj As Object) As Boolean
        parameters:
        - id: _Obj
          type: System.Object
          description: The object to compare with the current data chain.
        return:
          type: System.Boolean
          description: True if the specified object is equal to the current data chain; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetEnumerator
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: DataChain<T>.GetEnumerator()
        VB: DataChain(Of T).GetEnumerator()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.GetEnumerator()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).GetEnumerator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: GetEnumerator
        path: ''
        startLine: 15182
      summary: "\nProvides an enumerator for iterating over the elements of the data chain.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerator<T> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of T)
        return:
          type: System.Collections.IEnumerator{{T}}
          description: An enumerator for the data chain.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetEnumerator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Dispose
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: DataChain<T>.Dispose()
        VB: DataChain(Of T).Dispose()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.Dispose()
        VB: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Dispose
        path: ''
        startLine: 15199
      summary: "\nDoes nothing.\n"
      example: []
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Dispose*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1: 
      GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1: 
  - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1
    language: CSharp
    name:
      CSharp: IDataChain<T>
      VB: IDataChain(Of T)
    nameWithType:
      CSharp: IDataChain<T>
      VB: IDataChain(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>
      VB: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Collection.Chain
    source:
      id: IDataChain
      path: ''
      startLine: 15219
    summary: "\nRepresents a generic data chain interface, providing functionality to iterate, and manipulate a linked list of elements of type T that validates it integrity.\n"
    example: []
    syntax:
      content:
        CSharp: public interface IDataChain<T>
        VB: >-
          Public Interface IDataChain(Of T)

              Inherits IEnumerable(Of T), IDataIntegrity
      typeParameters:
      - id: T
        description: The type of elements stored in the data chain.
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain
      commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain
      language: CSharp
      name:
        CSharp: Chain
        VB: Chain
      nameWithType:
        CSharp: IDataChain<T>.Chain
        VB: IDataChain(Of T).Chain
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>.Chain
        VB: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T).Chain
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Chain
        path: ''
        startLine: 15224
      summary: "\nGets the linked list containing the elements of the data chain.\n"
      example: []
      syntax:
        content:
          CSharp: LinkedList<T> Chain { get; }
          VB: ReadOnly Property Chain As LinkedList(Of T)
        parameters: []
        return:
          type: GUPS.AntiCheat.LinkedList{{T}}
      overload: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append(`0)
      language: CSharp
      name:
        CSharp: Append(T)
        VB: Append(T)
      nameWithType:
        CSharp: IDataChain<T>.Append(T)
        VB: IDataChain(Of T).Append(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>.Append(T)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T).Append(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: Append
        path: ''
        startLine: 15231
      summary: "\nAppends a new item to the end of the data chain.\n"
      example: []
      syntax:
        content:
          CSharp: bool Append(T _Item)
          VB: Function Append(_Item As T) As Boolean
        parameters:
        - id: _Item
          type: '{T}'
          description: The item to be appended to the data chain.
        return:
          type: System.Boolean
          description: True if the element is appended successfully and the chain has its integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append*
      modifiers:
        CSharp: []
        VB: []
    - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync(`0)
      commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync(`0)
      language: CSharp
      name:
        CSharp: AppendAsync(T)
        VB: AppendAsync(T)
      nameWithType:
        CSharp: IDataChain<T>.AppendAsync(T)
        VB: IDataChain(Of T).AppendAsync(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>.AppendAsync(T)
        VB: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T).AppendAsync(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Collection.Chain
      source:
        id: AppendAsync
        path: ''
        startLine: 15238
      summary: "\nAppends a new item to the end of the data chain.\n"
      example: []
      syntax:
        content:
          CSharp: Task<bool> AppendAsync(T _Item)
          VB: Function AppendAsync(_Item As T) As Task(Of Boolean)
        parameters:
        - id: _Item
          type: '{T}'
          description: The item to be appended to the data chain.
        return:
          type: GUPS.AntiCheat.Task{System.Boolean}
          description: True if the element is appended successfully and the chain has its integrity; otherwise, false.
      overload: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync*
      modifiers:
        CSharp: []
        VB: []
- id: GUPS.AntiCheat.Protected.Storage.Prefs
  commentId: N:GUPS.AntiCheat.Protected.Storage.Prefs
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Protected.Storage.Prefs
    VB: GUPS.AntiCheat.Protected.Storage.Prefs
  nameWithType:
    CSharp: GUPS.AntiCheat.Protected.Storage.Prefs
    VB: GUPS.AntiCheat.Protected.Storage.Prefs
  qualifiedName:
    CSharp: GUPS.AntiCheat.Protected.Storage.Prefs
    VB: GUPS.AntiCheat.Protected.Storage.Prefs
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
    language: CSharp
    name:
      CSharp: IProtectedPref<T>
      VB: IProtectedPref(Of T)
    nameWithType:
      CSharp: IProtectedPref<T>
      VB: IProtectedPref(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<T>
      VB: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of T)
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Storage.Prefs
    source:
      id: IProtectedPref
      path: ''
      startLine: 22017
    summary: "\nProvides an interface for accessing protected player preferences via properties, offering a more structured approach than \ninteracting directly with the static ProtectedPlayerPrefs class. Also allows to easily assign the protected player preferences\nin the unity inspector.\n"
    remarks: "\n<p>\nImplementing classes should handle the mapping between the generic type and the actual storage and retrieval of values in the player preferences.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public interface IProtectedPref<T>
        VB: Public Interface IProtectedPref(Of T)
      typeParameters:
      - id: T
        description: The type of the value stored in the protected player preferences.
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
      language: CSharp
      name:
        CSharp: Key
        VB: Key
      nameWithType:
        CSharp: IProtectedPref<T>.Key
        VB: IProtectedPref(Of T).Key
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<T>.Key
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of T).Key
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Key
        path: ''
        startLine: 22022
      summary: "\nGets the unique key associated with the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: String Key { get; }
          VB: ReadOnly Property Key As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key*
      modifiers:
        CSharp:
        - get
        VB:
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: IProtectedPref<T>.Value
        VB: IProtectedPref(Of T).Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<T>.Value
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of T).Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Value
        path: ''
        startLine: 22027
      summary: "\nGets or sets the value of the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: T Value { get; set; }
          VB: Property Value As T
        parameters: []
        return:
          type: '{T}'
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
  - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref
    language: CSharp
    name:
      CSharp: ProtectedBoolPref
      VB: ProtectedBoolPref
    nameWithType:
      CSharp: ProtectedBoolPref
      VB: ProtectedBoolPref
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref
      VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Storage.Prefs
    source:
      id: ProtectedBoolPref
      path: ''
      startLine: 22225
    summary: "\nProvides an class for accessing protected boolean player preferences via properties, offering a more structured approach than \ninteracting directly with the static ProtectedPlayerPrefs class. Also allows to easily assign the protected player preferences\nin the unity inspector.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedBoolPref : IProtectedPref<bool>'
        VB: >-
          Public Class ProtectedBoolPref

              Implements IProtectedPref(Of Boolean)
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{System.Boolean}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Key
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Key
      language: CSharp
      name:
        CSharp: Key
        VB: Key
      nameWithType:
        CSharp: ProtectedBoolPref.Key
        VB: ProtectedBoolPref.Key
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Key
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Key
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Key
        path: ''
        startLine: 22238
      summary: "\nGets the unique key associated with the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public String Key { get; }
          VB: Public ReadOnly Property Key As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Key*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{System.Boolean}.Key
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Value
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedBoolPref.Value
        VB: ProtectedBoolPref.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Value
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Value
        path: ''
        startLine: 22250
      summary: "\nGets or sets the value of the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Value { get; set; }
          VB: Public Property Value As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Value*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{System.Boolean}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs
    language: CSharp
    name:
      CSharp: ProtectedFileBasedPlayerPrefs
      VB: ProtectedFileBasedPlayerPrefs
    nameWithType:
      CSharp: ProtectedFileBasedPlayerPrefs
      VB: ProtectedFileBasedPlayerPrefs
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs
      VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Storage.Prefs
    source:
      id: ProtectedFileBasedPlayerPrefs
      path: ''
      startLine: 22296
    summary: "\nProvides a thread-safe, file-based implementation of protected player preferences.\n"
    remarks: "\nThis class allows secure storage and retrieval of player preferences using a file-based system. \nIt supports various data types, optional encryption, and automatic saving. \nThe implementation ensures thread safety through locking mechanisms and offers both synchronous \nand asynchronous methods for interacting with the stored data.\n"
    example: []
    syntax:
      content:
        CSharp: public static class ProtectedFileBasedPlayerPrefs
        VB: Public Module ProtectedFileBasedPlayerPrefs
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath
      language: CSharp
      name:
        CSharp: FilePath
        VB: FilePath
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.FilePath
        VB: ProtectedFileBasedPlayerPrefs.FilePath
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: FilePath
        path: ''
        startLine: 22311
      summary: "\nGets or sets the custom file path for storing player preferences.\nDefault is: Application.persistentDataPath + System.IO.Path.DirectorySeparatorChar + &quot;playerprefs.dat&quot;\n"
      example: []
      syntax:
        content:
          CSharp: public static String FilePath { get; set; }
          VB: Public Shared Property FilePath As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath*
      modifiers:
        CSharp:
        - public
        - static
        - get
        - set
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.AutoSave
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.AutoSave
      language: CSharp
      name:
        CSharp: AutoSave
        VB: AutoSave
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.AutoSave
        VB: ProtectedFileBasedPlayerPrefs.AutoSave
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.AutoSave
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.AutoSave
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: AutoSave
        path: ''
        startLine: 22326
      summary: "\nGets or sets a value indicating whether changes are saved automatically. Default is true.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool AutoSave { get; set; }
          VB: Public Shared Property AutoSave As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.AutoSave*
      modifiers:
        CSharp:
        - public
        - static
        - get
        - set
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKey(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKey(String)
      language: CSharp
      name:
        CSharp: HasKey(String)
        VB: HasKey(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.HasKey(String)
        VB: ProtectedFileBasedPlayerPrefs.HasKey(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKey(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKey(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: HasKey
        path: ''
        startLine: 22371
      summary: "\nChecks if a specified key exists in the storage file.\n"
      remarks: "\nThis method ensures that the storage is loaded before checking for the key&apos;s existence. \nThe key is processed (hashed if necessary) before the check is performed. \nThread safety and data integrity are ensured during the operation.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool HasKey(String _Key)
          VB: Public Shared Function HasKey(_Key As String) As Boolean
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key to check for existence.
        return:
          type: System.Boolean
          description: True if the key exists, otherwise false.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKey*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKeyAsync(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKeyAsync(String)
      language: CSharp
      name:
        CSharp: HasKeyAsync(String)
        VB: HasKeyAsync(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.HasKeyAsync(String)
        VB: ProtectedFileBasedPlayerPrefs.HasKeyAsync(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKeyAsync(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKeyAsync(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: HasKeyAsync
        path: ''
        startLine: 22392
      summary: "\nAsynchronously checks if a specified key exists in the storage file.\n"
      remarks: "\nThis method performs the same functionality as <see cref=\"!:HasKey(string)\"></see> but executes it asynchronously \nto avoid blocking the main thread. It ensures that the storage is loaded before performing the check.\n"
      example: []
      syntax:
        content:
          CSharp: public static Task<bool> HasKeyAsync(String _Key)
          VB: Public Shared Function HasKeyAsync(_Key As String) As Task(Of Boolean)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key to check for existence.
        return:
          type: GUPS.AntiCheat.Task{System.Boolean}
          description: A task that represents the asynchronous operation. The result is true if the key exists, otherwise false.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKeyAsync*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,IProtected)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,IProtected)
      language: CSharp
      name:
        CSharp: Set(String, IProtected)
        VB: Set(String, IProtected)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.Set(String, IProtected)
        VB: ProtectedFileBasedPlayerPrefs.Set(String, IProtected)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String, IProtected)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String, IProtected)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Set
        path: ''
        startLine: 22412
      summary: "\nSaves a protected value to the Storage File.\n"
      remarks: "\nThis method stores the value by first retrieving the actual value of the IProtected object.\n"
      example: []
      syntax:
        content:
          CSharp: public static void Set(String _Key, IProtected _Value)
          VB: Public Shared Sub Set(_Key As String, _Value As IProtected)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the value is stored.
        - id: _Value
          type: GUPS.AntiCheat.IProtected
          description: The value to store, implementing IProtected.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,System.Object)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,System.Object)
      language: CSharp
      name:
        CSharp: Set(String, Object)
        VB: Set(String, Object)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.Set(String, Object)
        VB: ProtectedFileBasedPlayerPrefs.Set(String, Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String, System.Object)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String, System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Set
        path: ''
        startLine: 22426
      summary: "\nSaves an object to the Storage File with optional encryption. Supports all types of <see cref=\"!:EStorageType\"></see>.\n"
      remarks: "\nIf encryption is enabled in the global settings, the value is encrypted before being \nstored. The value is serialized into a binary format and then converted to a base64 string.\n"
      example: []
      syntax:
        content:
          CSharp: public static void Set(String _Key, object _Value)
          VB: Public Shared Sub Set(_Key As String, _Value As Object)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the value is stored.
        - id: _Value
          type: System.Object
          description: The value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(Type,String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(Type,String)
      language: CSharp
      name:
        CSharp: Get(Type, String)
        VB: Get(Type, String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.Get(Type, String)
        VB: ProtectedFileBasedPlayerPrefs.Get(Type, String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(Type, String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(Type, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Get
        path: ''
        startLine: 22466
      summary: "\nRetrieves a stored object from the Storage File by type. Supports all types of <see cref=\"!:EStorageType\"></see>.\n"
      remarks: "\nThe method checks for encryption, integrity, and ownership based on global settings.\n"
      example: []
      syntax:
        content:
          CSharp: public static object Get(Type _Type, String _Key)
          VB: Public Shared Function Get(_Type As Type, _Key As String) As Object
        parameters:
        - id: _Type
          type: GUPS.AntiCheat.Type
          description: The type of the stored object.
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the object is stored.
        return:
          type: System.Object
          description: The retrieved object, or the default value of the type if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get``1(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get``1(String)
      language: CSharp
      name:
        CSharp: Get<T>(String)
        VB: Get(Of T)(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.Get<T>(String)
        VB: ProtectedFileBasedPlayerPrefs.Get(Of T)(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get<T>(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(Of T)(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Get
        path: ''
        startLine: 22503
      summary: "\nRetrieves a stored object from the Storage File by generic type. Supports all types of <see cref=\"!:EStorageType\"></see>.\n"
      remarks: "\nThis method internally calls the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(Type%2cString)\" data-throw-if-not-resolved=\"false\"></xref> method but casts the result to the specified type.\n"
      example: []
      syntax:
        content:
          CSharp: public static T Get<T>(String _Key)
          VB: Public Shared Function Get(Of T)(_Key As String) As T
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the object is stored.
        typeParameters:
        - id: T
          description: The type of the stored object.
        return:
          type: '{T}'
          description: The retrieved object of type T, or the default value of T if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(Type,String): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(String)
      language: CSharp
      name:
        CSharp: Get(String)
        VB: Get(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.Get(String)
        VB: ProtectedFileBasedPlayerPrefs.Get(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Get
        path: ''
        startLine: 22520
      summary: "\nRetrieves a stored object from the Storage File without specifying the type. Supports all types of <see cref=\"!:EStorageType\"></see>.\n"
      remarks: "\nThis method retrieves the stored object as a generic System.Object and handles any decryption or verification.\n"
      example: []
      syntax:
        content:
          CSharp: public static object Get(String _Key)
          VB: Public Shared Function Get(_Key As String) As Object
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the object is stored.
        return:
          type: System.Object
          description: The retrieved object, or null if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetInt(String,System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetInt(String,System.Int32)
      language: CSharp
      name:
        CSharp: SetInt(String, Int32)
        VB: SetInt(String, Int32)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.SetInt(String, Int32)
        VB: ProtectedFileBasedPlayerPrefs.SetInt(String, Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetInt(String, System.Int32)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetInt(String, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetInt
        path: ''
        startLine: 22554
      summary: "\nSaves an integer value to the Storage File.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store an integer value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetInt(String _Key, int _Value)
          VB: Public Shared Sub SetInt(_Key As String, _Value As Integer)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the integer is stored.
        - id: _Value
          type: System.Int32
          description: The integer value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt(String,System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt(String,System.Int32)
      language: CSharp
      name:
        CSharp: GetInt(String, Int32)
        VB: GetInt(String, Int32)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetInt(String, Int32)
        VB: ProtectedFileBasedPlayerPrefs.GetInt(String, Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt(String, System.Int32)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt(String, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetInt
        path: ''
        startLine: 22569
      summary: "\nRetrieves an integer value from the Storage File, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the the Storage File. If it does not, the default value is returned. \nIt safely handles the retrieval of integer values, considering encryption and integrity checks if enabled.\n"
      example: []
      syntax:
        content:
          CSharp: public static int GetInt(String _Key, int _DefaultValue)
          VB: Public Shared Function GetInt(_Key As String, _DefaultValue As Integer) As Integer
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the integer is stored.
        - id: _DefaultValue
          type: System.Int32
          description: The default value to return if the key does not exist.
        return:
          type: System.Int32
          description: The stored integer value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt(String)
      language: CSharp
      name:
        CSharp: GetInt(String)
        VB: GetInt(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetInt(String)
        VB: ProtectedFileBasedPlayerPrefs.GetInt(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetInt
        path: ''
        startLine: 22586
      summary: "\nRetrieves an integer value from the Storage File, or 0 if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving integers with a default value of 0.\n"
      example: []
      syntax:
        content:
          CSharp: public static int GetInt(String _Key)
          VB: Public Shared Function GetInt(_Key As String) As Integer
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the integer is stored.
        return:
          type: System.Int32
          description: The stored integer value, or 0 if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetBool(String,System.Boolean)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetBool(String,System.Boolean)
      language: CSharp
      name:
        CSharp: SetBool(String, Boolean)
        VB: SetBool(String, Boolean)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.SetBool(String, Boolean)
        VB: ProtectedFileBasedPlayerPrefs.SetBool(String, Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetBool(String, System.Boolean)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetBool(String, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetBool
        path: ''
        startLine: 22603
      summary: "\nSaves a boolean value to the Storage File.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store a boolean value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetBool(String _Key, bool _Value)
          VB: Public Shared Sub SetBool(_Key As String, _Value As Boolean)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the boolean is stored.
        - id: _Value
          type: System.Boolean
          description: The boolean value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetBool*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool(String,System.Boolean)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool(String,System.Boolean)
      language: CSharp
      name:
        CSharp: GetBool(String, Boolean)
        VB: GetBool(String, Boolean)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetBool(String, Boolean)
        VB: ProtectedFileBasedPlayerPrefs.GetBool(String, Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool(String, System.Boolean)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool(String, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetBool
        path: ''
        startLine: 22617
      summary: "\nRetrieves a boolean value from the Storage File, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the the Storage File. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool GetBool(String _Key, bool _DefaultValue)
          VB: Public Shared Function GetBool(_Key As String, _DefaultValue As Boolean) As Boolean
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the boolean is stored.
        - id: _DefaultValue
          type: System.Boolean
          description: The default value to return if the key does not exist.
        return:
          type: System.Boolean
          description: The stored boolean value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool(String)
      language: CSharp
      name:
        CSharp: GetBool(String)
        VB: GetBool(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetBool(String)
        VB: ProtectedFileBasedPlayerPrefs.GetBool(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetBool
        path: ''
        startLine: 22634
      summary: "\nRetrieves a boolean value from the Storage File, or false if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving booleans with a default value of false.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool GetBool(String _Key)
          VB: Public Shared Function GetBool(_Key As String) As Boolean
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the boolean is stored.
        return:
          type: System.Boolean
          description: The stored boolean value, or false if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetFloat(String,System.Single)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetFloat(String,System.Single)
      language: CSharp
      name:
        CSharp: SetFloat(String, Single)
        VB: SetFloat(String, Single)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.SetFloat(String, Single)
        VB: ProtectedFileBasedPlayerPrefs.SetFloat(String, Single)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetFloat(String, System.Single)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetFloat(String, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetFloat
        path: ''
        startLine: 22651
      summary: "\nSaves a float value to the Storage File.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store a float value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetFloat(String _Key, float _Value)
          VB: Public Shared Sub SetFloat(_Key As String, _Value As Single)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the float is stored.
        - id: _Value
          type: System.Single
          description: The float value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat(String,System.Single)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat(String,System.Single)
      language: CSharp
      name:
        CSharp: GetFloat(String, Single)
        VB: GetFloat(String, Single)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetFloat(String, Single)
        VB: ProtectedFileBasedPlayerPrefs.GetFloat(String, Single)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat(String, System.Single)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat(String, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetFloat
        path: ''
        startLine: 22665
      summary: "\nRetrieves a float value from the Storage File, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the the Storage File. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static float GetFloat(String _Key, float _DefaultValue)
          VB: Public Shared Function GetFloat(_Key As String, _DefaultValue As Single) As Single
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the float is stored.
        - id: _DefaultValue
          type: System.Single
          description: The default value to return if the key does not exist.
        return:
          type: System.Single
          description: The stored float value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat(String)
      language: CSharp
      name:
        CSharp: GetFloat(String)
        VB: GetFloat(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetFloat(String)
        VB: ProtectedFileBasedPlayerPrefs.GetFloat(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetFloat
        path: ''
        startLine: 22682
      summary: "\nRetrieves a float value from the Storage File, or 0.0f if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving floats with a default value of 0.0f.\n"
      example: []
      syntax:
        content:
          CSharp: public static float GetFloat(String _Key)
          VB: Public Shared Function GetFloat(_Key As String) As Single
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the float is stored.
        return:
          type: System.Single
          description: The stored float value, or 0.0f if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetString(String,System.String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetString(String,System.String)
      language: CSharp
      name:
        CSharp: SetString(String, String)
        VB: SetString(String, String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.SetString(String, String)
        VB: ProtectedFileBasedPlayerPrefs.SetString(String, String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetString(String, System.String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetString(String, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetString
        path: ''
        startLine: 22699
      syntax:
        content:
          CSharp: public static void SetString(String _Key, string _Value)
          VB: Public Shared Sub SetString(_Key As String, _Value As String)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
        - id: _Value
          type: System.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString(String,System.String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString(String,System.String)
      language: CSharp
      name:
        CSharp: GetString(String, String)
        VB: GetString(String, String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetString(String, String)
        VB: ProtectedFileBasedPlayerPrefs.GetString(String, String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString(String, System.String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString(String, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetString
        path: ''
        startLine: 22713
      summary: "\nRetrieves a string value from the Storage File, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the the Storage File. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetString(String _Key, string _DefaultValue)
          VB: Public Shared Function GetString(_Key As String, _DefaultValue As String) As String
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the string is stored.
        - id: _DefaultValue
          type: System.String
          description: The default value to return if the key does not exist.
        return:
          type: System.String
          description: The stored string value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString(String)
      language: CSharp
      name:
        CSharp: GetString(String)
        VB: GetString(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetString(String)
        VB: ProtectedFileBasedPlayerPrefs.GetString(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetString
        path: ''
        startLine: 22730
      summary: "\nRetrieves a string value from the Storage File, or an empty string if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving strings with a default value of empty string.\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetString(String _Key)
          VB: Public Shared Function GetString(_Key As String) As String
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the string is stored.
        return:
          type: System.String
          description: The stored string value, or an empty string if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector2(String,Vector2)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector2(String,Vector2)
      language: CSharp
      name:
        CSharp: SetVector2(String, Vector2)
        VB: SetVector2(String, Vector2)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.SetVector2(String, Vector2)
        VB: ProtectedFileBasedPlayerPrefs.SetVector2(String, Vector2)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector2(String, Vector2)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector2(String, Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetVector2
        path: ''
        startLine: 22746
      summary: "\nSaves a Vector2 value to the Storage File.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store a Vector2 value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetVector2(String _Key, Vector2 _Value)
          VB: Public Shared Sub SetVector2(_Key As String, _Value As Vector2)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector2 is stored.
        - id: _Value
          type: GUPS.AntiCheat.Vector2
          description: The Vector2 value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2(String,Vector2)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2(String,Vector2)
      language: CSharp
      name:
        CSharp: GetVector2(String, Vector2)
        VB: GetVector2(String, Vector2)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetVector2(String, Vector2)
        VB: ProtectedFileBasedPlayerPrefs.GetVector2(String, Vector2)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2(String, Vector2)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2(String, Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetVector2
        path: ''
        startLine: 22760
      summary: "\nRetrieves a Vector2 value from the Storage File, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the the Storage File. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector2 GetVector2(String _Key, Vector2 _DefaultValue)
          VB: Public Shared Function GetVector2(_Key As String, _DefaultValue As Vector2) As Vector2
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector2 is stored.
        - id: _DefaultValue
          type: GUPS.AntiCheat.Vector2
          description: The default value to return if the key does not exist.
        return:
          type: GUPS.AntiCheat.Vector2
          description: The stored Vector2 value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2(String)
      language: CSharp
      name:
        CSharp: GetVector2(String)
        VB: GetVector2(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetVector2(String)
        VB: ProtectedFileBasedPlayerPrefs.GetVector2(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetVector2
        path: ''
        startLine: 22777
      summary: "\nRetrieves a Vector2 value from the Storage File, or Vector2.zero if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving Vector2 with a default value of Vector2.zero.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector2 GetVector2(String _Key)
          VB: Public Shared Function GetVector2(_Key As String) As Vector2
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector2 is stored.
        return:
          type: GUPS.AntiCheat.Vector2
          description: The stored Vector2 value, or Vector2.zero if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector3(String,Vector3)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector3(String,Vector3)
      language: CSharp
      name:
        CSharp: SetVector3(String, Vector3)
        VB: SetVector3(String, Vector3)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.SetVector3(String, Vector3)
        VB: ProtectedFileBasedPlayerPrefs.SetVector3(String, Vector3)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector3(String, Vector3)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector3(String, Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetVector3
        path: ''
        startLine: 22793
      summary: "\nSaves a Vector3 value to the Storage File.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store a Vector3 value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetVector3(String _Key, Vector3 _Value)
          VB: Public Shared Sub SetVector3(_Key As String, _Value As Vector3)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector3 is stored.
        - id: _Value
          type: GUPS.AntiCheat.Vector3
          description: The Vector3 value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector3*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3(String,Vector3)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3(String,Vector3)
      language: CSharp
      name:
        CSharp: GetVector3(String, Vector3)
        VB: GetVector3(String, Vector3)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetVector3(String, Vector3)
        VB: ProtectedFileBasedPlayerPrefs.GetVector3(String, Vector3)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3(String, Vector3)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3(String, Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetVector3
        path: ''
        startLine: 22807
      summary: "\nRetrieves a Vector3 value from the Storage File, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the the Storage File. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 GetVector3(String _Key, Vector3 _DefaultValue)
          VB: Public Shared Function GetVector3(_Key As String, _DefaultValue As Vector3) As Vector3
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector3 is stored.
        - id: _DefaultValue
          type: GUPS.AntiCheat.Vector3
          description: The default value to return if the key does not exist.
        return:
          type: GUPS.AntiCheat.Vector3
          description: The stored Vector3 value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3(String)
      language: CSharp
      name:
        CSharp: GetVector3(String)
        VB: GetVector3(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetVector3(String)
        VB: ProtectedFileBasedPlayerPrefs.GetVector3(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetVector3
        path: ''
        startLine: 22824
      summary: "\nRetrieves a Vector3 value from the Storage File, or Vector3.zero if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving Vector3 with a default value of Vector3.zero.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 GetVector3(String _Key)
          VB: Public Shared Function GetVector3(_Key As String) As Vector3
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector3 is stored.
        return:
          type: GUPS.AntiCheat.Vector3
          description: The stored Vector3 value, or Vector3.zero if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector4(String,Vector4)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector4(String,Vector4)
      language: CSharp
      name:
        CSharp: SetVector4(String, Vector4)
        VB: SetVector4(String, Vector4)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.SetVector4(String, Vector4)
        VB: ProtectedFileBasedPlayerPrefs.SetVector4(String, Vector4)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector4(String, Vector4)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector4(String, Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetVector4
        path: ''
        startLine: 22841
      summary: "\nSaves a Vector4 value to the Storage File.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store a Vector4 value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetVector4(String _Key, Vector4 _Value)
          VB: Public Shared Sub SetVector4(_Key As String, _Value As Vector4)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector4 is stored.
        - id: _Value
          type: GUPS.AntiCheat.Vector4
          description: The Vector4 value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector4*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4(String,Vector4)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4(String,Vector4)
      language: CSharp
      name:
        CSharp: GetVector4(String, Vector4)
        VB: GetVector4(String, Vector4)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetVector4(String, Vector4)
        VB: ProtectedFileBasedPlayerPrefs.GetVector4(String, Vector4)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4(String, Vector4)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4(String, Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetVector4
        path: ''
        startLine: 22855
      summary: "\nRetrieves a Vector4 value from the Storage File, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the the Storage File. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector4 GetVector4(String _Key, Vector4 _DefaultValue)
          VB: Public Shared Function GetVector4(_Key As String, _DefaultValue As Vector4) As Vector4
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector4 is stored.
        - id: _DefaultValue
          type: GUPS.AntiCheat.Vector4
          description: The default value to return if the key does not exist.
        return:
          type: GUPS.AntiCheat.Vector4
          description: The stored Vector4 value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4(String)
      language: CSharp
      name:
        CSharp: GetVector4(String)
        VB: GetVector4(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetVector4(String)
        VB: ProtectedFileBasedPlayerPrefs.GetVector4(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetVector4
        path: ''
        startLine: 22872
      summary: "\nRetrieves a Vector4 value from the Storage File, or Vector4.zero if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving Vector4 with a default value of Vector4.zero.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector4 GetVector4(String _Key)
          VB: Public Shared Function GetVector4(_Key As String) As Vector4
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector4 is stored.
        return:
          type: GUPS.AntiCheat.Vector4
          description: The stored Vector4 value, or Vector4.zero if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetQuaternion(String,Quaternion)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetQuaternion(String,Quaternion)
      language: CSharp
      name:
        CSharp: SetQuaternion(String, Quaternion)
        VB: SetQuaternion(String, Quaternion)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.SetQuaternion(String, Quaternion)
        VB: ProtectedFileBasedPlayerPrefs.SetQuaternion(String, Quaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetQuaternion(String, Quaternion)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetQuaternion(String, Quaternion)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetQuaternion
        path: ''
        startLine: 22889
      summary: "\nSaves a Quaternion value to the Storage File.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store a Quaternion value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetQuaternion(String _Key, Quaternion _Value)
          VB: Public Shared Sub SetQuaternion(_Key As String, _Value As Quaternion)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Quaternion is stored.
        - id: _Value
          type: GUPS.AntiCheat.Quaternion
          description: The Quaternion value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetQuaternion*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion(String,Quaternion)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion(String,Quaternion)
      language: CSharp
      name:
        CSharp: GetQuaternion(String, Quaternion)
        VB: GetQuaternion(String, Quaternion)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetQuaternion(String, Quaternion)
        VB: ProtectedFileBasedPlayerPrefs.GetQuaternion(String, Quaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion(String, Quaternion)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion(String, Quaternion)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetQuaternion
        path: ''
        startLine: 22903
      summary: "\nRetrieves a Quaternion value from the Storage File, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the the Storage File. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static Quaternion GetQuaternion(String _Key, Quaternion _DefaultValue)
          VB: Public Shared Function GetQuaternion(_Key As String, _DefaultValue As Quaternion) As Quaternion
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Quaternion is stored.
        - id: _DefaultValue
          type: GUPS.AntiCheat.Quaternion
          description: The default value to return if the key does not exist.
        return:
          type: GUPS.AntiCheat.Quaternion
          description: The stored Quaternion value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion(String)
      language: CSharp
      name:
        CSharp: GetQuaternion(String)
        VB: GetQuaternion(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.GetQuaternion(String)
        VB: ProtectedFileBasedPlayerPrefs.GetQuaternion(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetQuaternion
        path: ''
        startLine: 22920
      summary: "\nRetrieves a Quaternion value from the Storage File, or Quaternion.zero if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving Quaternion with a default value of Quaternion.zero.\n"
      example: []
      syntax:
        content:
          CSharp: public static Quaternion GetQuaternion(String _Key)
          VB: Public Shared Function GetQuaternion(_Key As String) As Quaternion
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Quaternion is stored.
        return:
          type: GUPS.AntiCheat.Quaternion
          description: The stored Quaternion value, or Quaternion.zero if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.DeleteKey(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.DeleteKey(String)
      language: CSharp
      name:
        CSharp: DeleteKey(String)
        VB: DeleteKey(String)
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.DeleteKey(String)
        VB: ProtectedFileBasedPlayerPrefs.DeleteKey(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.DeleteKey(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.DeleteKey(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: DeleteKey
        path: ''
        startLine: 22936
      summary: "\nRemoves a key and its corresponding value from the Storage.\n"
      remarks: "\nThis method removes the key-value pair from the Storage, ensuring that the key is processed (hashed if necessary) before removal.\n"
      example: []
      syntax:
        content:
          CSharp: public static void DeleteKey(String _Key)
          VB: Public Shared Sub DeleteKey(_Key As String)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key that should be removed.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.DeleteKey*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load
      language: CSharp
      name:
        CSharp: Load()
        VB: Load()
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.Load()
        VB: ProtectedFileBasedPlayerPrefs.Load()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load()
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Load
        path: ''
        startLine: 22967
      summary: "\nLoads the storage container from the file system, if not already loaded.\n"
      remarks: "\nThis method ensures that the storage container is initialized only once. If the storage file exists, \nit reads the data into the storage container. Additionally, it checks for ownership verification \nif the global setting `PlayerPreferences_Allow_Read_Any_Owner` is disabled.\n"
      example: []
      syntax:
        content:
          CSharp: public static void Load()
          VB: Public Shared Sub Load
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.LoadAsync
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.LoadAsync
      language: CSharp
      name:
        CSharp: LoadAsync()
        VB: LoadAsync()
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.LoadAsync()
        VB: ProtectedFileBasedPlayerPrefs.LoadAsync()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.LoadAsync()
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.LoadAsync()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: LoadAsync
        path: ''
        startLine: 23024
      summary: "\nAsynchronously loads the storage container from the file system, if not already loaded.\n"
      remarks: "\nThis method performs the same functionality as <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load\" data-throw-if-not-resolved=\"false\"></xref> but executes it asynchronously \nto avoid blocking the main thread. It ensures that the storage container is initialized only once \nand performs ownership verification if required.\n"
      example: []
      syntax:
        content:
          CSharp: public static async Task LoadAsync()
          VB: Public Shared Function LoadAsync As Task
        return:
          type: GUPS.AntiCheat.Task
          description: A task representing the asynchronous load operation.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.LoadAsync*
      modifiers:
        CSharp:
        - public
        - static
        - async
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load: 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save
      language: CSharp
      name:
        CSharp: Save()
        VB: Save()
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.Save()
        VB: ProtectedFileBasedPlayerPrefs.Save()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save()
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Save
        path: ''
        startLine: 23045
      summary: "\nSaves the current storage container to the file system.\n"
      remarks: "\nThis method writes the data in the storage container to a file at the specified <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath\" data-throw-if-not-resolved=\"false\"></xref>. \nIf no storage container is initialized, an exception is thrown. The method ensures thread safety by \nlocking during the save operation.\n"
      example: []
      syntax:
        content:
          CSharp: public static void Save()
          VB: Public Shared Sub Save
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath: 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SaveAsync
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SaveAsync
      language: CSharp
      name:
        CSharp: SaveAsync()
        VB: SaveAsync()
      nameWithType:
        CSharp: ProtectedFileBasedPlayerPrefs.SaveAsync()
        VB: ProtectedFileBasedPlayerPrefs.SaveAsync()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SaveAsync()
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SaveAsync()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SaveAsync
        path: ''
        startLine: 23072
      summary: "\nAsynchronously saves the current storage container to the file system.\n"
      remarks: "\nThis method performs the same functionality as <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save\" data-throw-if-not-resolved=\"false\"></xref> but executes it asynchronously \nto avoid blocking the main thread. The operation ensures thread safety during the save process.\n"
      example: []
      syntax:
        content:
          CSharp: public static async Task SaveAsync()
          VB: Public Shared Function SaveAsync As Task
        return:
          type: GUPS.AntiCheat.Task
          description: A task representing the asynchronous save operation.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SaveAsync*
      modifiers:
        CSharp:
        - public
        - static
        - async
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save: 
  - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref
    language: CSharp
    name:
      CSharp: ProtectedFloatPref
      VB: ProtectedFloatPref
    nameWithType:
      CSharp: ProtectedFloatPref
      VB: ProtectedFloatPref
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref
      VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Storage.Prefs
    source:
      id: ProtectedFloatPref
      path: ''
      startLine: 23096
    summary: "\nProvides an class for accessing protected float player preferences via properties, offering a more structured approach than \ninteracting directly with the static ProtectedPlayerPrefs class. Also allows to easily assign the protected player preferences\nin the unity inspector.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedFloatPref : IProtectedPref<Single>'
        VB: >-
          Public Class ProtectedFloatPref

              Implements IProtectedPref(Of Single)
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Single}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Key
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Key
      language: CSharp
      name:
        CSharp: Key
        VB: Key
      nameWithType:
        CSharp: ProtectedFloatPref.Key
        VB: ProtectedFloatPref.Key
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Key
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Key
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Key
        path: ''
        startLine: 23109
      summary: "\nGets the unique key associated with the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public String Key { get; }
          VB: Public ReadOnly Property Key As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Key*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Single}.Key
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Value
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedFloatPref.Value
        VB: ProtectedFloatPref.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Value
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Value
        path: ''
        startLine: 23121
      summary: "\nGets or sets the value of the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public Single Value { get; set; }
          VB: Public Property Value As Single
        parameters: []
        return:
          type: GUPS.AntiCheat.Single
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Value*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Single}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref
    language: CSharp
    name:
      CSharp: ProtectedIntPref
      VB: ProtectedIntPref
    nameWithType:
      CSharp: ProtectedIntPref
      VB: ProtectedIntPref
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref
      VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Storage.Prefs
    source:
      id: ProtectedIntPref
      path: ''
      startLine: 23148
    summary: "\nProvides an class for accessing protected int player preferences via properties, offering a more structured approach than \ninteracting directly with the static ProtectedPlayerPrefs class. Also allows to easily assign the protected player preferences\nin the unity inspector.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedIntPref : IProtectedPref<Int32>'
        VB: >-
          Public Class ProtectedIntPref

              Implements IProtectedPref(Of Int32)
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Int32}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Key
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Key
      language: CSharp
      name:
        CSharp: Key
        VB: Key
      nameWithType:
        CSharp: ProtectedIntPref.Key
        VB: ProtectedIntPref.Key
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Key
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Key
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Key
        path: ''
        startLine: 23161
      summary: "\nGets the unique key associated with the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public String Key { get; }
          VB: Public ReadOnly Property Key As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Key*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Int32}.Key
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Value
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedIntPref.Value
        VB: ProtectedIntPref.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Value
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Value
        path: ''
        startLine: 23173
      summary: "\nGets or sets the value of the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public Int32 Value { get; set; }
          VB: Public Property Value As Int32
        parameters: []
        return:
          type: GUPS.AntiCheat.Int32
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Value*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Int32}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs
    language: CSharp
    name:
      CSharp: ProtectedPlayerPrefs
      VB: ProtectedPlayerPrefs
    nameWithType:
      CSharp: ProtectedPlayerPrefs
      VB: ProtectedPlayerPrefs
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs
      VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Storage.Prefs
    source:
      id: ProtectedPlayerPrefs
      path: ''
      startLine: 23219
    summary: "\nProtected version of the Unity PlayerPrefs. Provides additional functionality for saving \nand loading custom types with added security features such as encryption, hashing, and \nownership verification.\n"
    remarks: "\nThis class wraps around Unity&apos;s PlayerPrefs and extends it to support more complex data \ntypes with encryption and integrity checks. It also ensures that only the device owner \ncan access certain saved data.\n"
    example: []
    syntax:
      content:
        CSharp: public sealed class ProtectedPlayerPrefs
        VB: Public NotInheritable Class ProtectedPlayerPrefs
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.HasKey(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.HasKey(String)
      language: CSharp
      name:
        CSharp: HasKey(String)
        VB: HasKey(String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.HasKey(String)
        VB: ProtectedPlayerPrefs.HasKey(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.HasKey(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.HasKey(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: HasKey
        path: ''
        startLine: 23265
      summary: "\nChecks if a given key exists in the PlayerPrefs.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool HasKey(String _Key)
          VB: Public Shared Function HasKey(_Key As String) As Boolean
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key to check.
        return:
          type: System.Boolean
          description: True if the key exists, false otherwise.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.HasKey*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,IProtected)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,IProtected)
      language: CSharp
      name:
        CSharp: Set(String, IProtected)
        VB: Set(String, IProtected)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.Set(String, IProtected)
        VB: ProtectedPlayerPrefs.Set(String, IProtected)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String, IProtected)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String, IProtected)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Set
        path: ''
        startLine: 23328
      summary: "\nSaves a protected value to PlayerPrefs.\n"
      remarks: "\nThis method stores the value by first retrieving the actual value of the IProtected object.\n"
      example: []
      syntax:
        content:
          CSharp: public static void Set(String _Key, IProtected _Value)
          VB: Public Shared Sub Set(_Key As String, _Value As IProtected)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the value is stored.
        - id: _Value
          type: GUPS.AntiCheat.IProtected
          description: The value to store, implementing IProtected.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,System.Object)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,System.Object)
      language: CSharp
      name:
        CSharp: Set(String, Object)
        VB: Set(String, Object)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.Set(String, Object)
        VB: ProtectedPlayerPrefs.Set(String, Object)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String, System.Object)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String, System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Set
        path: ''
        startLine: 23342
      summary: "\nSaves an object to PlayerPrefs with optional encryption. Supports all types of <see cref=\"!:EStorageType\"></see>.\n"
      remarks: "\nIf encryption is enabled in the global settings, the value is encrypted before being \nstored. The value is serialized into a binary format and then converted to a base64 string.\n"
      example: []
      syntax:
        content:
          CSharp: public static void Set(String _Key, object _Value)
          VB: Public Shared Sub Set(_Key As String, _Value As Object)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the value is stored.
        - id: _Value
          type: System.Object
          description: The value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(Type,String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(Type,String)
      language: CSharp
      name:
        CSharp: Get(Type, String)
        VB: Get(Type, String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.Get(Type, String)
        VB: ProtectedPlayerPrefs.Get(Type, String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(Type, String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(Type, String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Get
        path: ''
        startLine: 23449
      summary: "\nRetrieves a stored object from PlayerPrefs by type. Supports all types of <see cref=\"!:EStorageType\"></see>.\n"
      remarks: "\nThe method checks for encryption, integrity, and ownership based on global settings.\n"
      example: []
      syntax:
        content:
          CSharp: public static object Get(Type _Type, String _Key)
          VB: Public Shared Function Get(_Type As Type, _Key As String) As Object
        parameters:
        - id: _Type
          type: GUPS.AntiCheat.Type
          description: The type of the stored object.
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the object is stored.
        return:
          type: System.Object
          description: The retrieved object, or the default value of the type if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get``1(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get``1(String)
      language: CSharp
      name:
        CSharp: Get<T>(String)
        VB: Get(Of T)(String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.Get<T>(String)
        VB: ProtectedPlayerPrefs.Get(Of T)(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get<T>(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(Of T)(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Get
        path: ''
        startLine: 23534
      summary: "\nRetrieves a stored object from PlayerPrefs by generic type. Supports all types of <see cref=\"!:EStorageType\"></see>.\n"
      remarks: "\nThis method internally calls the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(Type%2cString)\" data-throw-if-not-resolved=\"false\"></xref> method but casts the result to the specified type.\n"
      example: []
      syntax:
        content:
          CSharp: public static T Get<T>(String _Key)
          VB: Public Shared Function Get(Of T)(_Key As String) As T
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the object is stored.
        typeParameters:
        - id: T
          description: The type of the stored object.
        return:
          type: '{T}'
          description: The retrieved object of type T, or the default value of T if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(Type,String): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(String)
      language: CSharp
      name:
        CSharp: Get(String)
        VB: Get(String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.Get(String)
        VB: ProtectedPlayerPrefs.Get(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Get
        path: ''
        startLine: 23551
      summary: "\nRetrieves a stored object from PlayerPrefs without specifying the type. Supports all types of <see cref=\"!:EStorageType\"></see>.\n"
      remarks: "\nThis method retrieves the stored object as a generic System.Object and handles any decryption or verification.\n"
      example: []
      syntax:
        content:
          CSharp: public static object Get(String _Key)
          VB: Public Shared Function Get(_Key As String) As Object
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the object is stored.
        return:
          type: System.Object
          description: The retrieved object, or null if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetInt(String,System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetInt(String,System.Int32)
      language: CSharp
      name:
        CSharp: SetInt(String, Int32)
        VB: SetInt(String, Int32)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.SetInt(String, Int32)
        VB: ProtectedPlayerPrefs.SetInt(String, Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetInt(String, System.Int32)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetInt(String, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetInt
        path: ''
        startLine: 23627
      summary: "\nSaves an integer value to PlayerPrefs.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store an integer value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetInt(String _Key, int _Value)
          VB: Public Shared Sub SetInt(_Key As String, _Value As Integer)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the integer is stored.
        - id: _Value
          type: System.Int32
          description: The integer value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt(String,System.Int32)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt(String,System.Int32)
      language: CSharp
      name:
        CSharp: GetInt(String, Int32)
        VB: GetInt(String, Int32)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetInt(String, Int32)
        VB: ProtectedPlayerPrefs.GetInt(String, Int32)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt(String, System.Int32)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt(String, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetInt
        path: ''
        startLine: 23642
      summary: "\nRetrieves an integer value from PlayerPrefs, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the PlayerPrefs. If it does not, the default value is returned. \nIt safely handles the retrieval of integer values, considering encryption and integrity checks if enabled.\n"
      example: []
      syntax:
        content:
          CSharp: public static int GetInt(String _Key, int _DefaultValue)
          VB: Public Shared Function GetInt(_Key As String, _DefaultValue As Integer) As Integer
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the integer is stored.
        - id: _DefaultValue
          type: System.Int32
          description: The default value to return if the key does not exist.
        return:
          type: System.Int32
          description: The stored integer value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt(String)
      language: CSharp
      name:
        CSharp: GetInt(String)
        VB: GetInt(String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetInt(String)
        VB: ProtectedPlayerPrefs.GetInt(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetInt
        path: ''
        startLine: 23660
      summary: "\nRetrieves an integer value from PlayerPrefs, or 0 if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving integers with a default value of 0.\n"
      example: []
      syntax:
        content:
          CSharp: public static int GetInt(String _Key)
          VB: Public Shared Function GetInt(_Key As String) As Integer
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the integer is stored.
        return:
          type: System.Int32
          description: The stored integer value, or 0 if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetBool(String,System.Boolean)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetBool(String,System.Boolean)
      language: CSharp
      name:
        CSharp: SetBool(String, Boolean)
        VB: SetBool(String, Boolean)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.SetBool(String, Boolean)
        VB: ProtectedPlayerPrefs.SetBool(String, Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetBool(String, System.Boolean)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetBool(String, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetBool
        path: ''
        startLine: 23677
      summary: "\nSaves a boolean value to PlayerPrefs.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store a boolean value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetBool(String _Key, bool _Value)
          VB: Public Shared Sub SetBool(_Key As String, _Value As Boolean)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the boolean is stored.
        - id: _Value
          type: System.Boolean
          description: The boolean value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetBool*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool(String,System.Boolean)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool(String,System.Boolean)
      language: CSharp
      name:
        CSharp: GetBool(String, Boolean)
        VB: GetBool(String, Boolean)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetBool(String, Boolean)
        VB: ProtectedPlayerPrefs.GetBool(String, Boolean)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool(String, System.Boolean)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool(String, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetBool
        path: ''
        startLine: 23691
      summary: "\nRetrieves a boolean value from PlayerPrefs, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the PlayerPrefs. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool GetBool(String _Key, bool _DefaultValue)
          VB: Public Shared Function GetBool(_Key As String, _DefaultValue As Boolean) As Boolean
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the boolean is stored.
        - id: _DefaultValue
          type: System.Boolean
          description: The default value to return if the key does not exist.
        return:
          type: System.Boolean
          description: The stored boolean value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool(String)
      language: CSharp
      name:
        CSharp: GetBool(String)
        VB: GetBool(String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetBool(String)
        VB: ProtectedPlayerPrefs.GetBool(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetBool
        path: ''
        startLine: 23708
      summary: "\nRetrieves a boolean value from PlayerPrefs, or false if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving booleans with a default value of false.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool GetBool(String _Key)
          VB: Public Shared Function GetBool(_Key As String) As Boolean
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the boolean is stored.
        return:
          type: System.Boolean
          description: The stored boolean value, or false if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetFloat(String,System.Single)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetFloat(String,System.Single)
      language: CSharp
      name:
        CSharp: SetFloat(String, Single)
        VB: SetFloat(String, Single)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.SetFloat(String, Single)
        VB: ProtectedPlayerPrefs.SetFloat(String, Single)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetFloat(String, System.Single)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetFloat(String, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetFloat
        path: ''
        startLine: 23725
      summary: "\nSaves a float value to PlayerPrefs.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store a float value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetFloat(String _Key, float _Value)
          VB: Public Shared Sub SetFloat(_Key As String, _Value As Single)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the float is stored.
        - id: _Value
          type: System.Single
          description: The float value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat(String,System.Single)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat(String,System.Single)
      language: CSharp
      name:
        CSharp: GetFloat(String, Single)
        VB: GetFloat(String, Single)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetFloat(String, Single)
        VB: ProtectedPlayerPrefs.GetFloat(String, Single)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat(String, System.Single)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat(String, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetFloat
        path: ''
        startLine: 23739
      summary: "\nRetrieves a float value from PlayerPrefs, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the PlayerPrefs. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static float GetFloat(String _Key, float _DefaultValue)
          VB: Public Shared Function GetFloat(_Key As String, _DefaultValue As Single) As Single
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the float is stored.
        - id: _DefaultValue
          type: System.Single
          description: The default value to return if the key does not exist.
        return:
          type: System.Single
          description: The stored float value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat(String)
      language: CSharp
      name:
        CSharp: GetFloat(String)
        VB: GetFloat(String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetFloat(String)
        VB: ProtectedPlayerPrefs.GetFloat(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetFloat
        path: ''
        startLine: 23756
      summary: "\nRetrieves a float value from PlayerPrefs, or 0.0f if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving floats with a default value of 0.0f.\n"
      example: []
      syntax:
        content:
          CSharp: public static float GetFloat(String _Key)
          VB: Public Shared Function GetFloat(_Key As String) As Single
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the float is stored.
        return:
          type: System.Single
          description: The stored float value, or 0.0f if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetString(String,System.String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetString(String,System.String)
      language: CSharp
      name:
        CSharp: SetString(String, String)
        VB: SetString(String, String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.SetString(String, String)
        VB: ProtectedPlayerPrefs.SetString(String, String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetString(String, System.String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetString(String, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetString
        path: ''
        startLine: 23773
      syntax:
        content:
          CSharp: public static void SetString(String _Key, string _Value)
          VB: Public Shared Sub SetString(_Key As String, _Value As String)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
        - id: _Value
          type: System.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString(String,System.String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString(String,System.String)
      language: CSharp
      name:
        CSharp: GetString(String, String)
        VB: GetString(String, String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetString(String, String)
        VB: ProtectedPlayerPrefs.GetString(String, String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString(String, System.String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString(String, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetString
        path: ''
        startLine: 23787
      summary: "\nRetrieves a string value from PlayerPrefs, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the PlayerPrefs. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetString(String _Key, string _DefaultValue)
          VB: Public Shared Function GetString(_Key As String, _DefaultValue As String) As String
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the string is stored.
        - id: _DefaultValue
          type: System.String
          description: The default value to return if the key does not exist.
        return:
          type: System.String
          description: The stored string value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString(String)
      language: CSharp
      name:
        CSharp: GetString(String)
        VB: GetString(String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetString(String)
        VB: ProtectedPlayerPrefs.GetString(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetString
        path: ''
        startLine: 23804
      summary: "\nRetrieves a string value from PlayerPrefs, or an empty string if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving strings with a default value of empty string.\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetString(String _Key)
          VB: Public Shared Function GetString(_Key As String) As String
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the string is stored.
        return:
          type: System.String
          description: The stored string value, or an empty string if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector2(String,Vector2)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector2(String,Vector2)
      language: CSharp
      name:
        CSharp: SetVector2(String, Vector2)
        VB: SetVector2(String, Vector2)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.SetVector2(String, Vector2)
        VB: ProtectedPlayerPrefs.SetVector2(String, Vector2)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector2(String, Vector2)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector2(String, Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetVector2
        path: ''
        startLine: 23820
      summary: "\nSaves a Vector2 value to PlayerPrefs.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store a Vector2 value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetVector2(String _Key, Vector2 _Value)
          VB: Public Shared Sub SetVector2(_Key As String, _Value As Vector2)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector2 is stored.
        - id: _Value
          type: GUPS.AntiCheat.Vector2
          description: The Vector2 value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2(String,Vector2)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2(String,Vector2)
      language: CSharp
      name:
        CSharp: GetVector2(String, Vector2)
        VB: GetVector2(String, Vector2)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetVector2(String, Vector2)
        VB: ProtectedPlayerPrefs.GetVector2(String, Vector2)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2(String, Vector2)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2(String, Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetVector2
        path: ''
        startLine: 23834
      summary: "\nRetrieves a Vector2 value from PlayerPrefs, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the PlayerPrefs. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector2 GetVector2(String _Key, Vector2 _DefaultValue)
          VB: Public Shared Function GetVector2(_Key As String, _DefaultValue As Vector2) As Vector2
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector2 is stored.
        - id: _DefaultValue
          type: GUPS.AntiCheat.Vector2
          description: The default value to return if the key does not exist.
        return:
          type: GUPS.AntiCheat.Vector2
          description: The stored Vector2 value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2(String)
      language: CSharp
      name:
        CSharp: GetVector2(String)
        VB: GetVector2(String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetVector2(String)
        VB: ProtectedPlayerPrefs.GetVector2(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetVector2
        path: ''
        startLine: 23851
      summary: "\nRetrieves a Vector2 value from PlayerPrefs, or Vector2.zero if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving Vector2 with a default value of Vector2.zero.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector2 GetVector2(String _Key)
          VB: Public Shared Function GetVector2(_Key As String) As Vector2
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector2 is stored.
        return:
          type: GUPS.AntiCheat.Vector2
          description: The stored Vector2 value, or Vector2.zero if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector3(String,Vector3)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector3(String,Vector3)
      language: CSharp
      name:
        CSharp: SetVector3(String, Vector3)
        VB: SetVector3(String, Vector3)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.SetVector3(String, Vector3)
        VB: ProtectedPlayerPrefs.SetVector3(String, Vector3)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector3(String, Vector3)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector3(String, Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetVector3
        path: ''
        startLine: 23867
      summary: "\nSaves a Vector3 value to PlayerPrefs.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store a Vector3 value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetVector3(String _Key, Vector3 _Value)
          VB: Public Shared Sub SetVector3(_Key As String, _Value As Vector3)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector3 is stored.
        - id: _Value
          type: GUPS.AntiCheat.Vector3
          description: The Vector3 value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector3*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3(String,Vector3)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3(String,Vector3)
      language: CSharp
      name:
        CSharp: GetVector3(String, Vector3)
        VB: GetVector3(String, Vector3)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetVector3(String, Vector3)
        VB: ProtectedPlayerPrefs.GetVector3(String, Vector3)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3(String, Vector3)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3(String, Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetVector3
        path: ''
        startLine: 23881
      summary: "\nRetrieves a Vector3 value from PlayerPrefs, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the PlayerPrefs. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 GetVector3(String _Key, Vector3 _DefaultValue)
          VB: Public Shared Function GetVector3(_Key As String, _DefaultValue As Vector3) As Vector3
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector3 is stored.
        - id: _DefaultValue
          type: GUPS.AntiCheat.Vector3
          description: The default value to return if the key does not exist.
        return:
          type: GUPS.AntiCheat.Vector3
          description: The stored Vector3 value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3(String)
      language: CSharp
      name:
        CSharp: GetVector3(String)
        VB: GetVector3(String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetVector3(String)
        VB: ProtectedPlayerPrefs.GetVector3(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetVector3
        path: ''
        startLine: 23898
      summary: "\nRetrieves a Vector3 value from PlayerPrefs, or Vector3.zero if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving Vector3 with a default value of Vector3.zero.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 GetVector3(String _Key)
          VB: Public Shared Function GetVector3(_Key As String) As Vector3
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector3 is stored.
        return:
          type: GUPS.AntiCheat.Vector3
          description: The stored Vector3 value, or Vector3.zero if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector4(String,Vector4)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector4(String,Vector4)
      language: CSharp
      name:
        CSharp: SetVector4(String, Vector4)
        VB: SetVector4(String, Vector4)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.SetVector4(String, Vector4)
        VB: ProtectedPlayerPrefs.SetVector4(String, Vector4)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector4(String, Vector4)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector4(String, Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetVector4
        path: ''
        startLine: 23915
      summary: "\nSaves a Vector4 value to PlayerPrefs.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store a Vector4 value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetVector4(String _Key, Vector4 _Value)
          VB: Public Shared Sub SetVector4(_Key As String, _Value As Vector4)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector4 is stored.
        - id: _Value
          type: GUPS.AntiCheat.Vector4
          description: The Vector4 value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector4*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4(String,Vector4)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4(String,Vector4)
      language: CSharp
      name:
        CSharp: GetVector4(String, Vector4)
        VB: GetVector4(String, Vector4)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetVector4(String, Vector4)
        VB: ProtectedPlayerPrefs.GetVector4(String, Vector4)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4(String, Vector4)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4(String, Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetVector4
        path: ''
        startLine: 23929
      summary: "\nRetrieves a Vector4 value from PlayerPrefs, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the PlayerPrefs. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector4 GetVector4(String _Key, Vector4 _DefaultValue)
          VB: Public Shared Function GetVector4(_Key As String, _DefaultValue As Vector4) As Vector4
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector4 is stored.
        - id: _DefaultValue
          type: GUPS.AntiCheat.Vector4
          description: The default value to return if the key does not exist.
        return:
          type: GUPS.AntiCheat.Vector4
          description: The stored Vector4 value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4(String)
      language: CSharp
      name:
        CSharp: GetVector4(String)
        VB: GetVector4(String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetVector4(String)
        VB: ProtectedPlayerPrefs.GetVector4(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetVector4
        path: ''
        startLine: 23946
      summary: "\nRetrieves a Vector4 value from PlayerPrefs, or Vector4.zero if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving Vector4 with a default value of Vector4.zero.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector4 GetVector4(String _Key)
          VB: Public Shared Function GetVector4(_Key As String) As Vector4
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Vector4 is stored.
        return:
          type: GUPS.AntiCheat.Vector4
          description: The stored Vector4 value, or Vector4.zero if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetQuaternion(String,Quaternion)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetQuaternion(String,Quaternion)
      language: CSharp
      name:
        CSharp: SetQuaternion(String, Quaternion)
        VB: SetQuaternion(String, Quaternion)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.SetQuaternion(String, Quaternion)
        VB: ProtectedPlayerPrefs.SetQuaternion(String, Quaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetQuaternion(String, Quaternion)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetQuaternion(String, Quaternion)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: SetQuaternion
        path: ''
        startLine: 23963
      summary: "\nSaves a Quaternion value to PlayerPrefs.\n"
      remarks: "\nThis method wraps the <xref href=\"GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to store a Quaternion value.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SetQuaternion(String _Key, Quaternion _Value)
          VB: Public Shared Sub SetQuaternion(_Key As String, _Value As Quaternion)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Quaternion is stored.
        - id: _Value
          type: GUPS.AntiCheat.Quaternion
          description: The Quaternion value to store.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetQuaternion*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,System.Object): 
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion(String,Quaternion)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion(String,Quaternion)
      language: CSharp
      name:
        CSharp: GetQuaternion(String, Quaternion)
        VB: GetQuaternion(String, Quaternion)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetQuaternion(String, Quaternion)
        VB: ProtectedPlayerPrefs.GetQuaternion(String, Quaternion)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion(String, Quaternion)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion(String, Quaternion)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetQuaternion
        path: ''
        startLine: 23977
      summary: "\nRetrieves a Quaternion value from PlayerPrefs, or a default value if the key does not exist.\n"
      remarks: "\nThis method first checks if the key exists in the PlayerPrefs. If it does not, the default value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: public static Quaternion GetQuaternion(String _Key, Quaternion _DefaultValue)
          VB: Public Shared Function GetQuaternion(_Key As String, _DefaultValue As Quaternion) As Quaternion
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Quaternion is stored.
        - id: _DefaultValue
          type: GUPS.AntiCheat.Quaternion
          description: The default value to return if the key does not exist.
        return:
          type: GUPS.AntiCheat.Quaternion
          description: The stored Quaternion value, or the default value if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion(String)
      language: CSharp
      name:
        CSharp: GetQuaternion(String)
        VB: GetQuaternion(String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.GetQuaternion(String)
        VB: ProtectedPlayerPrefs.GetQuaternion(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: GetQuaternion
        path: ''
        startLine: 23994
      summary: "\nRetrieves a Quaternion value from PlayerPrefs, or Quaternion.zero if the key does not exist.\n"
      remarks: "\nThis method is a shortcut for retrieving Quaternion with a default value of Quaternion.zero.\n"
      example: []
      syntax:
        content:
          CSharp: public static Quaternion GetQuaternion(String _Key)
          VB: Public Shared Function GetQuaternion(_Key As String) As Quaternion
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key under which the Quaternion is stored.
        return:
          type: GUPS.AntiCheat.Quaternion
          description: The stored Quaternion value, or Quaternion.zero if the key does not exist.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.AutoSave
      commentId: F:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.AutoSave
      language: CSharp
      name:
        CSharp: AutoSave
        VB: AutoSave
      nameWithType:
        CSharp: ProtectedPlayerPrefs.AutoSave
        VB: ProtectedPlayerPrefs.AutoSave
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.AutoSave
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.AutoSave
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: AutoSave
        path: ''
        startLine: 24009
      summary: "\nIndicates whether automatic saving of preferences to disk is enabled.\n"
      remarks: "\nWhen set to true, preferences are automatically saved to disk after each modification.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool AutoSave
          VB: Public Shared AutoSave As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Save
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Save
      language: CSharp
      name:
        CSharp: Save()
        VB: Save()
      nameWithType:
        CSharp: ProtectedPlayerPrefs.Save()
        VB: ProtectedPlayerPrefs.Save()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Save()
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Save()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Save
        path: ''
        startLine: 24017
      summary: "\nWrites all modified PlayerPrefs data to disk.\n"
      remarks: "\nThis method ensures that any modified preferences are persisted to the disk immediately. It wraps the Unity `PlayerPrefs.Save` method.\n"
      example: []
      syntax:
        content:
          CSharp: public static void Save()
          VB: Public Shared Sub Save
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Save*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.DeleteKey(String)
      commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.DeleteKey(String)
      language: CSharp
      name:
        CSharp: DeleteKey(String)
        VB: DeleteKey(String)
      nameWithType:
        CSharp: ProtectedPlayerPrefs.DeleteKey(String)
        VB: ProtectedPlayerPrefs.DeleteKey(String)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.DeleteKey(String)
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.DeleteKey(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: DeleteKey
        path: ''
        startLine: 24033
      summary: "\nRemoves a key and its corresponding value from PlayerPrefs.\n"
      remarks: "\nThis method removes the key-value pair from PlayerPrefs, ensuring that the key is processed (hashed if necessary) before removal.\n"
      example: []
      syntax:
        content:
          CSharp: public static void DeleteKey(String _Key)
          VB: Public Shared Sub DeleteKey(_Key As String)
        parameters:
        - id: _Key
          type: GUPS.AntiCheat.String
          description: The key that should be removed.
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.DeleteKey*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref
    language: CSharp
    name:
      CSharp: ProtectedQuaternionPref
      VB: ProtectedQuaternionPref
    nameWithType:
      CSharp: ProtectedQuaternionPref
      VB: ProtectedQuaternionPref
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref
      VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Storage.Prefs
    source:
      id: ProtectedQuaternionPref
      path: ''
      startLine: 24059
    summary: "\nProvides an class for accessing protected quaternion player preferences via properties, offering a more structured approach than \ninteracting directly with the static ProtectedPlayerPrefs class. Also allows to easily assign the protected player preferences\nin the unity inspector.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedQuaternionPref : IProtectedPref<Quaternion>'
        VB: >-
          Public Class ProtectedQuaternionPref

              Implements IProtectedPref(Of Quaternion)
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Quaternion}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Key
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Key
      language: CSharp
      name:
        CSharp: Key
        VB: Key
      nameWithType:
        CSharp: ProtectedQuaternionPref.Key
        VB: ProtectedQuaternionPref.Key
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Key
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Key
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Key
        path: ''
        startLine: 24072
      summary: "\nGets the unique key associated with the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public String Key { get; }
          VB: Public ReadOnly Property Key As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Key*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Quaternion}.Key
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Value
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedQuaternionPref.Value
        VB: ProtectedQuaternionPref.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Value
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Value
        path: ''
        startLine: 24084
      summary: "\nGets or sets the value of the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public Quaternion Value { get; set; }
          VB: Public Property Value As Quaternion
        parameters: []
        return:
          type: GUPS.AntiCheat.Quaternion
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Value*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Quaternion}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref
    language: CSharp
    name:
      CSharp: ProtectedStringPref
      VB: ProtectedStringPref
    nameWithType:
      CSharp: ProtectedStringPref
      VB: ProtectedStringPref
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref
      VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Storage.Prefs
    source:
      id: ProtectedStringPref
      path: ''
      startLine: 24111
    summary: "\nProvides an class for accessing protected string player preferences via properties, offering a more structured approach than \ninteracting directly with the static ProtectedPlayerPrefs class. Also allows to easily assign the protected player preferences\nin the unity inspector.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedStringPref : IProtectedPref<String>'
        VB: >-
          Public Class ProtectedStringPref

              Implements IProtectedPref(Of String)
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{String}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Key
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Key
      language: CSharp
      name:
        CSharp: Key
        VB: Key
      nameWithType:
        CSharp: ProtectedStringPref.Key
        VB: ProtectedStringPref.Key
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Key
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Key
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Key
        path: ''
        startLine: 24124
      summary: "\nGets the unique key associated with the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public String Key { get; }
          VB: Public ReadOnly Property Key As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Key*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{String}.Key
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Value
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedStringPref.Value
        VB: ProtectedStringPref.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Value
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Value
        path: ''
        startLine: 24136
      summary: "\nGets or sets the value of the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public String Value { get; set; }
          VB: Public Property Value As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Value*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{String}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref
    language: CSharp
    name:
      CSharp: ProtectedVector2Pref
      VB: ProtectedVector2Pref
    nameWithType:
      CSharp: ProtectedVector2Pref
      VB: ProtectedVector2Pref
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref
      VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Storage.Prefs
    source:
      id: ProtectedVector2Pref
      path: ''
      startLine: 24163
    summary: "\nProvides an class for accessing protected vector2 player preferences via properties, offering a more structured approach than \ninteracting directly with the static ProtectedPlayerPrefs class. Also allows to easily assign the protected player preferences\nin the unity inspector.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedVector2Pref : IProtectedPref<Vector2>'
        VB: >-
          Public Class ProtectedVector2Pref

              Implements IProtectedPref(Of Vector2)
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector2}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Key
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Key
      language: CSharp
      name:
        CSharp: Key
        VB: Key
      nameWithType:
        CSharp: ProtectedVector2Pref.Key
        VB: ProtectedVector2Pref.Key
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Key
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Key
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Key
        path: ''
        startLine: 24176
      summary: "\nGets the unique key associated with the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public String Key { get; }
          VB: Public ReadOnly Property Key As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Key*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector2}.Key
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Value
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedVector2Pref.Value
        VB: ProtectedVector2Pref.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Value
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Value
        path: ''
        startLine: 24188
      summary: "\nGets or sets the value of the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector2 Value { get; set; }
          VB: Public Property Value As Vector2
        parameters: []
        return:
          type: GUPS.AntiCheat.Vector2
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Value*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector2}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref
    language: CSharp
    name:
      CSharp: ProtectedVector3Pref
      VB: ProtectedVector3Pref
    nameWithType:
      CSharp: ProtectedVector3Pref
      VB: ProtectedVector3Pref
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref
      VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Storage.Prefs
    source:
      id: ProtectedVector3Pref
      path: ''
      startLine: 24215
    summary: "\nProvides an class for accessing protected vector3 player preferences via properties, offering a more structured approach than \ninteracting directly with the static ProtectedPlayerPrefs class. Also allows to easily assign the protected player preferences\nin the unity inspector.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedVector3Pref : IProtectedPref<Vector3>'
        VB: >-
          Public Class ProtectedVector3Pref

              Implements IProtectedPref(Of Vector3)
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector3}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Key
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Key
      language: CSharp
      name:
        CSharp: Key
        VB: Key
      nameWithType:
        CSharp: ProtectedVector3Pref.Key
        VB: ProtectedVector3Pref.Key
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Key
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Key
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Key
        path: ''
        startLine: 24228
      summary: "\nGets the unique key associated with the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public String Key { get; }
          VB: Public ReadOnly Property Key As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Key*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector3}.Key
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Value
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedVector3Pref.Value
        VB: ProtectedVector3Pref.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Value
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Value
        path: ''
        startLine: 24240
      summary: "\nGets or sets the value of the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 Value { get; set; }
          VB: Public Property Value As Vector3
        parameters: []
        return:
          type: GUPS.AntiCheat.Vector3
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Value*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector3}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref
    language: CSharp
    name:
      CSharp: ProtectedVector4Pref
      VB: ProtectedVector4Pref
    nameWithType:
      CSharp: ProtectedVector4Pref
      VB: ProtectedVector4Pref
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref
      VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Storage.Prefs
    source:
      id: ProtectedVector4Pref
      path: ''
      startLine: 24267
    summary: "\nProvides an class for accessing protected vector4 player preferences via properties, offering a more structured approach than \ninteracting directly with the static ProtectedPlayerPrefs class. Also allows to easily assign the protected player preferences\nin the unity inspector.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProtectedVector4Pref : IProtectedPref<Vector4>'
        VB: >-
          Public Class ProtectedVector4Pref

              Implements IProtectedPref(Of Vector4)
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector4}
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Key
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Key
      language: CSharp
      name:
        CSharp: Key
        VB: Key
      nameWithType:
        CSharp: ProtectedVector4Pref.Key
        VB: ProtectedVector4Pref.Key
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Key
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Key
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Key
        path: ''
        startLine: 24280
      summary: "\nGets the unique key associated with the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public String Key { get; }
          VB: Public ReadOnly Property Key As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Key*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector4}.Key
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Value
      commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: ProtectedVector4Pref.Value
        VB: ProtectedVector4Pref.Value
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Value
        VB: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Storage.Prefs
      source:
        id: Value
        path: ''
        startLine: 24292
      summary: "\nGets or sets the value of the player preference.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector4 Value { get; set; }
          VB: Public Property Value As Vector4
        parameters: []
        return:
          type: GUPS.AntiCheat.Vector4
      overload: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Value*
      implements:
      - GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector4}.Value
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
- id: GUPS.AntiCheat.Protected.Time
  commentId: N:GUPS.AntiCheat.Protected.Time
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Protected.Time
    VB: GUPS.AntiCheat.Protected.Time
  nameWithType:
    CSharp: GUPS.AntiCheat.Protected.Time
    VB: GUPS.AntiCheat.Protected.Time
  qualifiedName:
    CSharp: GUPS.AntiCheat.Protected.Time
    VB: GUPS.AntiCheat.Protected.Time
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Protected.Time.ProtectedTime
    commentId: T:GUPS.AntiCheat.Protected.Time.ProtectedTime
    language: CSharp
    name:
      CSharp: ProtectedTime
      VB: ProtectedTime
    nameWithType:
      CSharp: ProtectedTime
      VB: ProtectedTime
    qualifiedName:
      CSharp: GUPS.AntiCheat.Protected.Time.ProtectedTime
      VB: GUPS.AntiCheat.Protected.Time.ProtectedTime
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Protected.Time
    source:
      id: ProtectedTime
      path: ''
      startLine: 24332
    summary: "\nRepresents a set of protected time-related properties and methods, safeguarded against cheating. Use this ProtectedTime class instead of UnityEngine.Time \nor System.DateTime to access time-related values while protecting against cheating.\n"
    remarks: "\n<p>\nThe <xref href=\"GUPS.AntiCheat.Protected.Time.ProtectedTime\" data-throw-if-not-resolved=\"false\"></xref> class provides access to various time-related properties while protecting against cheating. It incorporates detection \nmechanisms to ensure the integrity of time-related values and prevents manipulation by external tools or hacks.\n</p>\n<p>\nThe class includes properties for accessing delta time, unscaled delta time, time scale, time, unscaled time, time since level load, realtime since \nstartup, and Coordinated Universal Time (UTC). These properties are backed by detectors from the <xref href=\"GUPS.AntiCheat.AntiCheatMonitor\" data-throw-if-not-resolved=\"false\"></xref> to detect and mitigate \ncheating attempts.\n</p>\n"
    example: []
    syntax:
      content:
        CSharp: public sealed class ProtectedTime
        VB: Public NotInheritable Class ProtectedTime
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.deltaTime
      commentId: P:GUPS.AntiCheat.Protected.Time.ProtectedTime.deltaTime
      language: CSharp
      name:
        CSharp: deltaTime
        VB: deltaTime
      nameWithType:
        CSharp: ProtectedTime.deltaTime
        VB: ProtectedTime.deltaTime
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Time.ProtectedTime.deltaTime
        VB: GUPS.AntiCheat.Protected.Time.ProtectedTime.deltaTime
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Time
      source:
        id: deltaTime
        path: ''
        startLine: 24347
      summary: "\nThe protected time in seconds it took to complete the last frame (Read Only).\n"
      example: []
      syntax:
        content:
          CSharp: public static float deltaTime { get; }
          VB: Public Shared ReadOnly Property deltaTime As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Protected.Time.ProtectedTime.deltaTime*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledDeltaTime
      commentId: P:GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledDeltaTime
      language: CSharp
      name:
        CSharp: unscaledDeltaTime
        VB: unscaledDeltaTime
      nameWithType:
        CSharp: ProtectedTime.unscaledDeltaTime
        VB: ProtectedTime.unscaledDeltaTime
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledDeltaTime
        VB: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledDeltaTime
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Time
      source:
        id: unscaledDeltaTime
        path: ''
        startLine: 24371
      summary: "\nThe protected timeScale-independent interval in seconds from the last frame to the current one (Read Only).\n"
      example: []
      syntax:
        content:
          CSharp: public static float unscaledDeltaTime { get; }
          VB: Public Shared ReadOnly Property unscaledDeltaTime As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledDeltaTime*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeScale
      commentId: P:GUPS.AntiCheat.Protected.Time.ProtectedTime.timeScale
      language: CSharp
      name:
        CSharp: timeScale
        VB: timeScale
      nameWithType:
        CSharp: ProtectedTime.timeScale
        VB: ProtectedTime.timeScale
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeScale
        VB: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeScale
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Time
      source:
        id: timeScale
        path: ''
        startLine: 24395
      summary: "\nThe protected scale at which the time is passing. This can be used for slow motion effects.\n"
      example: []
      syntax:
        content:
          CSharp: public static float timeScale { get; set; }
          VB: Public Shared Property timeScale As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeScale*
      modifiers:
        CSharp:
        - public
        - static
        - get
        - set
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.time
      commentId: P:GUPS.AntiCheat.Protected.Time.ProtectedTime.time
      language: CSharp
      name:
        CSharp: time
        VB: time
      nameWithType:
        CSharp: ProtectedTime.time
        VB: ProtectedTime.time
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Time.ProtectedTime.time
        VB: GUPS.AntiCheat.Protected.Time.ProtectedTime.time
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Time
      source:
        id: time
        path: ''
        startLine: 24410
      summary: "\nThe protected time at the beginning of this frame (Read Only). This is the time in seconds since the start of the game.\n"
      example: []
      syntax:
        content:
          CSharp: public static float time { get; }
          VB: Public Shared ReadOnly Property time As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Protected.Time.ProtectedTime.time*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledTime
      commentId: P:GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledTime
      language: CSharp
      name:
        CSharp: unscaledTime
        VB: unscaledTime
      nameWithType:
        CSharp: ProtectedTime.unscaledTime
        VB: ProtectedTime.unscaledTime
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledTime
        VB: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledTime
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Time
      source:
        id: unscaledTime
        path: ''
        startLine: 24434
      summary: "\nThe protected timeScale-independent time for this frame (Read Only). This is the time in seconds since the start of the game.\n"
      example: []
      syntax:
        content:
          CSharp: public static float unscaledTime { get; }
          VB: Public Shared ReadOnly Property unscaledTime As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledTime*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeSinceLevelLoad
      commentId: P:GUPS.AntiCheat.Protected.Time.ProtectedTime.timeSinceLevelLoad
      language: CSharp
      name:
        CSharp: timeSinceLevelLoad
        VB: timeSinceLevelLoad
      nameWithType:
        CSharp: ProtectedTime.timeSinceLevelLoad
        VB: ProtectedTime.timeSinceLevelLoad
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeSinceLevelLoad
        VB: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeSinceLevelLoad
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Time
      source:
        id: timeSinceLevelLoad
        path: ''
        startLine: 24458
      summary: "\nThe protected time this frame has started (Read Only). This is the time in seconds since the last level has been loaded.\n"
      example: []
      syntax:
        content:
          CSharp: public static float timeSinceLevelLoad { get; }
          VB: Public Shared ReadOnly Property timeSinceLevelLoad As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeSinceLevelLoad*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.realtimeSinceStartup
      commentId: P:GUPS.AntiCheat.Protected.Time.ProtectedTime.realtimeSinceStartup
      language: CSharp
      name:
        CSharp: realtimeSinceStartup
        VB: realtimeSinceStartup
      nameWithType:
        CSharp: ProtectedTime.realtimeSinceStartup
        VB: ProtectedTime.realtimeSinceStartup
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Time.ProtectedTime.realtimeSinceStartup
        VB: GUPS.AntiCheat.Protected.Time.ProtectedTime.realtimeSinceStartup
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Time
      source:
        id: realtimeSinceStartup
        path: ''
        startLine: 24482
      summary: "\nThe protected real time in seconds since the game started (Read Only).\n"
      example: []
      syntax:
        content:
          CSharp: public static float realtimeSinceStartup { get; }
          VB: Public Shared ReadOnly Property realtimeSinceStartup As Single
        parameters: []
        return:
          type: System.Single
      overload: GUPS.AntiCheat.Protected.Time.ProtectedTime.realtimeSinceStartup*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.UtcNow
      commentId: P:GUPS.AntiCheat.Protected.Time.ProtectedTime.UtcNow
      language: CSharp
      name:
        CSharp: UtcNow
        VB: UtcNow
      nameWithType:
        CSharp: ProtectedTime.UtcNow
        VB: ProtectedTime.UtcNow
      qualifiedName:
        CSharp: GUPS.AntiCheat.Protected.Time.ProtectedTime.UtcNow
        VB: GUPS.AntiCheat.Protected.Time.ProtectedTime.UtcNow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Protected.Time
      source:
        id: UtcNow
        path: ''
        startLine: 24507
      summary: "\nThe protected Coordinated Universal Time (UTC) DateTime (Read Only). The calculated utc time, which may differs from the original DateTime.UtcNow \nbecause it is calculated to be secure and trustable as possible.\n"
      example: []
      syntax:
        content:
          CSharp: public static DateTime UtcNow { get; }
          VB: Public Shared ReadOnly Property UtcNow As DateTime
        parameters: []
        return:
          type: GUPS.AntiCheat.DateTime
      overload: GUPS.AntiCheat.Protected.Time.ProtectedTime.UtcNow*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    references:
      GUPS.AntiCheat.Protected.Time.ProtectedTime: 
      GUPS.AntiCheat.AntiCheatMonitor: 
- id: GUPS.AntiCheat.Punisher
  commentId: N:GUPS.AntiCheat.Punisher
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Punisher
    VB: GUPS.AntiCheat.Punisher
  nameWithType:
    CSharp: GUPS.AntiCheat.Punisher
    VB: GUPS.AntiCheat.Punisher
  qualifiedName:
    CSharp: GUPS.AntiCheat.Punisher
    VB: GUPS.AntiCheat.Punisher
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Punisher.ExitGamePunisher
    commentId: T:GUPS.AntiCheat.Punisher.ExitGamePunisher
    language: CSharp
    name:
      CSharp: ExitGamePunisher
      VB: ExitGamePunisher
    nameWithType:
      CSharp: ExitGamePunisher
      VB: ExitGamePunisher
    qualifiedName:
      CSharp: GUPS.AntiCheat.Punisher.ExitGamePunisher
      VB: GUPS.AntiCheat.Punisher.ExitGamePunisher
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Punisher
    source:
      id: ExitGamePunisher
      path: ''
      startLine: 24544
    summary: "\nThe exit game punisher is a very drastic punishment. It closes the game.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ExitGamePunisher : MonoBehaviour'
        VB: >-
          Public Class ExitGamePunisher

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.IPunisher
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.Name
      commentId: P:GUPS.AntiCheat.Punisher.ExitGamePunisher.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: ExitGamePunisher.Name
        VB: ExitGamePunisher.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ExitGamePunisher.Name
        VB: GUPS.AntiCheat.Punisher.ExitGamePunisher.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: Name
        path: ''
        startLine: 24554
      summary: "\nThe name of the punisher.\n"
      example: []
      syntax:
        content:
          CSharp: public String Name { get; }
          VB: Public ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Punisher.ExitGamePunisher.Name*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsSupported
      commentId: P:GUPS.AntiCheat.Punisher.ExitGamePunisher.IsSupported
      language: CSharp
      name:
        CSharp: IsSupported
        VB: IsSupported
      nameWithType:
        CSharp: ExitGamePunisher.IsSupported
        VB: ExitGamePunisher.IsSupported
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsSupported
        VB: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsSupported
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: IsSupported
        path: ''
        startLine: 24564
      summary: "\nIs supported on all platforms.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsSupported { get; }
          VB: Public ReadOnly Property IsSupported As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsSupported*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsActive
      commentId: P:GUPS.AntiCheat.Punisher.ExitGamePunisher.IsActive
      language: CSharp
      name:
        CSharp: IsActive
        VB: IsActive
      nameWithType:
        CSharp: ExitGamePunisher.IsActive
        VB: ExitGamePunisher.IsActive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsActive
        VB: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsActive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: IsActive
        path: ''
        startLine: 24577
      summary: "\nGets or sets whether the punisher is active and can administer punitive actions (Default: true).\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsActive { get; set; }
          VB: Public Property IsActive As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsActive*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.ThreatRating
      commentId: P:GUPS.AntiCheat.Punisher.ExitGamePunisher.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: ExitGamePunisher.ThreatRating
        VB: ExitGamePunisher.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ExitGamePunisher.ThreatRating
        VB: GUPS.AntiCheat.Punisher.ExitGamePunisher.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: ThreatRating
        path: ''
        startLine: 24594
      summary: "\nIs a very drastic punishment, so the threat rating is set to a high value (Default: 850).\n"
      example: []
      syntax:
        content:
          CSharp: public uint ThreatRating { get; }
          VB: Public ReadOnly Property ThreatRating As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: GUPS.AntiCheat.Punisher.ExitGamePunisher.ThreatRating*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.PunishOnce
      commentId: P:GUPS.AntiCheat.Punisher.ExitGamePunisher.PunishOnce
      language: CSharp
      name:
        CSharp: PunishOnce
        VB: PunishOnce
      nameWithType:
        CSharp: ExitGamePunisher.PunishOnce
        VB: ExitGamePunisher.PunishOnce
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ExitGamePunisher.PunishOnce
        VB: GUPS.AntiCheat.Punisher.ExitGamePunisher.PunishOnce
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: PunishOnce
        path: ''
        startLine: 24604
      summary: "\nReturns if the punisher should only administer punitive actions once or any time the threat level exceeds the threat rating.\n"
      example: []
      syntax:
        content:
          CSharp: public bool PunishOnce { get; }
          VB: Public ReadOnly Property PunishOnce As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Punisher.ExitGamePunisher.PunishOnce*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.HasPunished
      commentId: P:GUPS.AntiCheat.Punisher.ExitGamePunisher.HasPunished
      language: CSharp
      name:
        CSharp: HasPunished
        VB: HasPunished
      nameWithType:
        CSharp: ExitGamePunisher.HasPunished
        VB: ExitGamePunisher.HasPunished
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ExitGamePunisher.HasPunished
        VB: GUPS.AntiCheat.Punisher.ExitGamePunisher.HasPunished
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: HasPunished
        path: ''
        startLine: 24609
      summary: "\nReturns if the punisher has administered punitive actions.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasPunished { get; }
          VB: Public ReadOnly Property HasPunished As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Punisher.ExitGamePunisher.HasPunished*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.Punish
      commentId: M:GUPS.AntiCheat.Punisher.ExitGamePunisher.Punish
      language: CSharp
      name:
        CSharp: Punish()
        VB: Punish()
      nameWithType:
        CSharp: ExitGamePunisher.Punish()
        VB: ExitGamePunisher.Punish()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ExitGamePunisher.Punish()
        VB: GUPS.AntiCheat.Punisher.ExitGamePunisher.Punish()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: Punish
        path: ''
        startLine: 24614
      summary: "\nAs the name says, close the game!\n"
      example: []
      syntax:
        content:
          CSharp: public void Punish()
          VB: Public Sub Punish
      overload: GUPS.AntiCheat.Punisher.ExitGamePunisher.Punish*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher
    commentId: T:GUPS.AntiCheat.Punisher.FlipCameraPunisher
    language: CSharp
    name:
      CSharp: FlipCameraPunisher
      VB: FlipCameraPunisher
    nameWithType:
      CSharp: FlipCameraPunisher
      VB: FlipCameraPunisher
    qualifiedName:
      CSharp: GUPS.AntiCheat.Punisher.FlipCameraPunisher
      VB: GUPS.AntiCheat.Punisher.FlipCameraPunisher
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Punisher
    source:
      id: FlipCameraPunisher
      path: ''
      startLine: 24641
    summary: "\nThe flip camera punisher flips the camera view horizontally or vertically. Can be very annoying for cheaters in first person shooters.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class FlipCameraPunisher : MonoBehaviour'
        VB: >-
          Public Class FlipCameraPunisher

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.IPunisher
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Name
      commentId: P:GUPS.AntiCheat.Punisher.FlipCameraPunisher.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: FlipCameraPunisher.Name
        VB: FlipCameraPunisher.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Name
        VB: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: Name
        path: ''
        startLine: 24651
      summary: "\nThe name of the punisher.\n"
      example: []
      syntax:
        content:
          CSharp: public String Name { get; }
          VB: Public ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Name*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsSupported
      commentId: P:GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsSupported
      language: CSharp
      name:
        CSharp: IsSupported
        VB: IsSupported
      nameWithType:
        CSharp: FlipCameraPunisher.IsSupported
        VB: FlipCameraPunisher.IsSupported
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsSupported
        VB: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsSupported
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: IsSupported
        path: ''
        startLine: 24661
      summary: "\nIs supported on all platforms.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsSupported { get; }
          VB: Public ReadOnly Property IsSupported As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsSupported*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsActive
      commentId: P:GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsActive
      language: CSharp
      name:
        CSharp: IsActive
        VB: IsActive
      nameWithType:
        CSharp: FlipCameraPunisher.IsActive
        VB: FlipCameraPunisher.IsActive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsActive
        VB: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsActive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: IsActive
        path: ''
        startLine: 24674
      summary: "\nGets or sets whether the punisher is active and can administer punitive actions (Default: true).\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsActive { get; set; }
          VB: Public Property IsActive As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsActive*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.ThreatRating
      commentId: P:GUPS.AntiCheat.Punisher.FlipCameraPunisher.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: FlipCameraPunisher.ThreatRating
        VB: FlipCameraPunisher.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.FlipCameraPunisher.ThreatRating
        VB: GUPS.AntiCheat.Punisher.FlipCameraPunisher.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: ThreatRating
        path: ''
        startLine: 24691
      summary: "\nIs a funny punishment, and can in first persion shooters be very annoying for cheaters (Default: 450).\n"
      example: []
      syntax:
        content:
          CSharp: public uint ThreatRating { get; }
          VB: Public ReadOnly Property ThreatRating As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: GUPS.AntiCheat.Punisher.FlipCameraPunisher.ThreatRating*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.PunishOnce
      commentId: P:GUPS.AntiCheat.Punisher.FlipCameraPunisher.PunishOnce
      language: CSharp
      name:
        CSharp: PunishOnce
        VB: PunishOnce
      nameWithType:
        CSharp: FlipCameraPunisher.PunishOnce
        VB: FlipCameraPunisher.PunishOnce
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.FlipCameraPunisher.PunishOnce
        VB: GUPS.AntiCheat.Punisher.FlipCameraPunisher.PunishOnce
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: PunishOnce
        path: ''
        startLine: 24713
      summary: "\nReturns if the punisher should only administer punitive actions once or any time the threat level exceeds the threat rating.\n"
      example: []
      syntax:
        content:
          CSharp: public bool PunishOnce { get; }
          VB: Public ReadOnly Property PunishOnce As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Punisher.FlipCameraPunisher.PunishOnce*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.HasPunished
      commentId: P:GUPS.AntiCheat.Punisher.FlipCameraPunisher.HasPunished
      language: CSharp
      name:
        CSharp: HasPunished
        VB: HasPunished
      nameWithType:
        CSharp: FlipCameraPunisher.HasPunished
        VB: FlipCameraPunisher.HasPunished
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.FlipCameraPunisher.HasPunished
        VB: GUPS.AntiCheat.Punisher.FlipCameraPunisher.HasPunished
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: HasPunished
        path: ''
        startLine: 24718
      summary: "\nReturns if the punisher has administered punitive actions.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasPunished { get; }
          VB: Public ReadOnly Property HasPunished As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Punisher.FlipCameraPunisher.HasPunished*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Punish
      commentId: M:GUPS.AntiCheat.Punisher.FlipCameraPunisher.Punish
      language: CSharp
      name:
        CSharp: Punish()
        VB: Punish()
      nameWithType:
        CSharp: FlipCameraPunisher.Punish()
        VB: FlipCameraPunisher.Punish()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Punish()
        VB: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Punish()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: Punish
        path: ''
        startLine: 24723
      summary: "\nFlip / mirror the camera view horizontally or vertically.\n"
      example: []
      syntax:
        content:
          CSharp: public void Punish()
          VB: Public Sub Punish
      overload: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Punish*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher
    commentId: T:GUPS.AntiCheat.Punisher.ReduceFpsPunisher
    language: CSharp
    name:
      CSharp: ReduceFpsPunisher
      VB: ReduceFpsPunisher
    nameWithType:
      CSharp: ReduceFpsPunisher
      VB: ReduceFpsPunisher
    qualifiedName:
      CSharp: GUPS.AntiCheat.Punisher.ReduceFpsPunisher
      VB: GUPS.AntiCheat.Punisher.ReduceFpsPunisher
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Punisher
    source:
      id: ReduceFpsPunisher
      path: ''
      startLine: 24776
    summary: "\nThe reduce fps punisher reduces the max frame rate to a custom low value. Can be very annoying for cheaters.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ReduceFpsPunisher : MonoBehaviour'
        VB: >-
          Public Class ReduceFpsPunisher

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    implements:
    - GUPS.AntiCheat.IPunisher
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Name
      commentId: P:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: ReduceFpsPunisher.Name
        VB: ReduceFpsPunisher.Name
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Name
        VB: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: Name
        path: ''
        startLine: 24786
      summary: "\nThe name of the punisher.\n"
      example: []
      syntax:
        content:
          CSharp: public String Name { get; }
          VB: Public ReadOnly Property Name As String
        parameters: []
        return:
          type: GUPS.AntiCheat.String
      overload: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Name*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsSupported
      commentId: P:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsSupported
      language: CSharp
      name:
        CSharp: IsSupported
        VB: IsSupported
      nameWithType:
        CSharp: ReduceFpsPunisher.IsSupported
        VB: ReduceFpsPunisher.IsSupported
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsSupported
        VB: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsSupported
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: IsSupported
        path: ''
        startLine: 24796
      summary: "\nIs supported on all platforms.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsSupported { get; }
          VB: Public ReadOnly Property IsSupported As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsSupported*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsActive
      commentId: P:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsActive
      language: CSharp
      name:
        CSharp: IsActive
        VB: IsActive
      nameWithType:
        CSharp: ReduceFpsPunisher.IsActive
        VB: ReduceFpsPunisher.IsActive
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsActive
        VB: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsActive
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: IsActive
        path: ''
        startLine: 24809
      summary: "\nGets or sets whether the punisher is active and can administer punitive actions (Default: true).\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsActive { get; set; }
          VB: Public Property IsActive As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsActive*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.ThreatRating
      commentId: P:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.ThreatRating
      language: CSharp
      name:
        CSharp: ThreatRating
        VB: ThreatRating
      nameWithType:
        CSharp: ReduceFpsPunisher.ThreatRating
        VB: ReduceFpsPunisher.ThreatRating
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.ThreatRating
        VB: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.ThreatRating
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: ThreatRating
        path: ''
        startLine: 24826
      summary: "\nIs a funny punishment, and can be very annoying for cheaters (Default: 550).\n"
      example: []
      syntax:
        content:
          CSharp: public uint ThreatRating { get; }
          VB: Public ReadOnly Property ThreatRating As UInteger
        parameters: []
        return:
          type: System.UInt32
      overload: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.ThreatRating*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.PunishOnce
      commentId: P:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.PunishOnce
      language: CSharp
      name:
        CSharp: PunishOnce
        VB: PunishOnce
      nameWithType:
        CSharp: ReduceFpsPunisher.PunishOnce
        VB: ReduceFpsPunisher.PunishOnce
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.PunishOnce
        VB: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.PunishOnce
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: PunishOnce
        path: ''
        startLine: 24843
      summary: "\nReturns if the punisher should only administer punitive actions once or any time the threat level exceeds the threat rating.\n"
      example: []
      syntax:
        content:
          CSharp: public bool PunishOnce { get; }
          VB: Public ReadOnly Property PunishOnce As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.PunishOnce*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.HasPunished
      commentId: P:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.HasPunished
      language: CSharp
      name:
        CSharp: HasPunished
        VB: HasPunished
      nameWithType:
        CSharp: ReduceFpsPunisher.HasPunished
        VB: ReduceFpsPunisher.HasPunished
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.HasPunished
        VB: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.HasPunished
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: HasPunished
        path: ''
        startLine: 24848
      summary: "\nReturns if the punisher has administered punitive actions.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasPunished { get; }
          VB: Public ReadOnly Property HasPunished As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.HasPunished*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Punish
      commentId: M:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Punish
      language: CSharp
      name:
        CSharp: Punish()
        VB: Punish()
      nameWithType:
        CSharp: ReduceFpsPunisher.Punish()
        VB: ReduceFpsPunisher.Punish()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Punish()
        VB: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Punish()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Punisher
      source:
        id: Punish
        path: ''
        startLine: 24853
      summary: "\nReduce the max frame rate as punishment.\n"
      example: []
      syntax:
        content:
          CSharp: public void Punish()
          VB: Public Sub Punish
      overload: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Punish*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: GUPS.AntiCheat.Settings
  commentId: N:GUPS.AntiCheat.Settings
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Settings
    VB: GUPS.AntiCheat.Settings
  nameWithType:
    CSharp: GUPS.AntiCheat.Settings
    VB: GUPS.AntiCheat.Settings
  qualifiedName:
    CSharp: GUPS.AntiCheat.Settings
    VB: GUPS.AntiCheat.Settings
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Settings.GlobalSettings
    commentId: T:GUPS.AntiCheat.Settings.GlobalSettings
    language: CSharp
    name:
      CSharp: GlobalSettings
      VB: GlobalSettings
    nameWithType:
      CSharp: GlobalSettings
      VB: GlobalSettings
    qualifiedName:
      CSharp: GUPS.AntiCheat.Settings.GlobalSettings
      VB: GUPS.AntiCheat.Settings.GlobalSettings
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Settings
    source:
      id: GlobalSettings
      path: ''
      startLine: 24885
    summary: "\nThe global settings for the anti cheat monitor.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GlobalSettings : ScriptableObject'
        VB: >-
          Public Class GlobalSettings

              Inherits ScriptableObject
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Settings.GlobalSettings.RELATIVE_SETTINGS_PATH
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.RELATIVE_SETTINGS_PATH
      language: CSharp
      name:
        CSharp: RELATIVE_SETTINGS_PATH
        VB: RELATIVE_SETTINGS_PATH
      nameWithType:
        CSharp: GlobalSettings.RELATIVE_SETTINGS_PATH
        VB: GlobalSettings.RELATIVE_SETTINGS_PATH
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.RELATIVE_SETTINGS_PATH
        VB: GUPS.AntiCheat.Settings.GlobalSettings.RELATIVE_SETTINGS_PATH
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: RELATIVE_SETTINGS_PATH
        path: ''
        startLine: 24893
      summary: "\nThe relative unity resource path to the settings file.\n"
      example: []
      syntax:
        content:
          CSharp: public const String RELATIVE_SETTINGS_PATH = null
          VB: Public Const RELATIVE_SETTINGS_PATH As String = Nothing
        return:
          type: GUPS.AntiCheat.String
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Settings.GlobalSettings.SETTINGS_PATH
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.SETTINGS_PATH
      language: CSharp
      name:
        CSharp: SETTINGS_PATH
        VB: SETTINGS_PATH
      nameWithType:
        CSharp: GlobalSettings.SETTINGS_PATH
        VB: GlobalSettings.SETTINGS_PATH
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.SETTINGS_PATH
        VB: GUPS.AntiCheat.Settings.GlobalSettings.SETTINGS_PATH
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: SETTINGS_PATH
        path: ''
        startLine: 24898
      summary: "\nThe absolute unity resource path in the project to the settings file.\n"
      example: []
      syntax:
        content:
          CSharp: public const String SETTINGS_PATH = null
          VB: Public Const SETTINGS_PATH As String = Nothing
        return:
          type: GUPS.AntiCheat.String
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Instance
      commentId: P:GUPS.AntiCheat.Settings.GlobalSettings.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: GlobalSettings.Instance
        VB: GlobalSettings.Instance
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Instance
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Instance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Instance
        path: ''
        startLine: 24908
      summary: "\nGet or load the runtime settings singleton instance.\n"
      example: []
      syntax:
        content:
          CSharp: public static GlobalSettings Instance { get; }
          VB: Public Shared ReadOnly Property Instance As GlobalSettings
        parameters: []
        return:
          type: GUPS.AntiCheat.Settings.GlobalSettings
      overload: GUPS.AntiCheat.Settings.GlobalSettings.Instance*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: GUPS.AntiCheat.Settings.GlobalSettings.LoadAsset
      commentId: M:GUPS.AntiCheat.Settings.GlobalSettings.LoadAsset
      language: CSharp
      name:
        CSharp: LoadAsset()
        VB: LoadAsset()
      nameWithType:
        CSharp: GlobalSettings.LoadAsset()
        VB: GlobalSettings.LoadAsset()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.LoadAsset()
        VB: GUPS.AntiCheat.Settings.GlobalSettings.LoadAsset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: LoadAsset
        path: ''
        startLine: 24925
      summary: "\nLoad the settings asset from the resources.\n"
      example: []
      syntax:
        content:
          CSharp: public static GlobalSettings LoadAsset()
          VB: Public Shared Function LoadAsset As GlobalSettings
        return:
          type: GUPS.AntiCheat.Settings.GlobalSettings
          description: ''
      overload: GUPS.AntiCheat.Settings.GlobalSettings.LoadAsset*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: GUPS.AntiCheat.Settings.GlobalSettings.RandomProvider
      commentId: P:GUPS.AntiCheat.Settings.GlobalSettings.RandomProvider
      language: CSharp
      name:
        CSharp: RandomProvider
        VB: RandomProvider
      nameWithType:
        CSharp: GlobalSettings.RandomProvider
        VB: GlobalSettings.RandomProvider
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.RandomProvider
        VB: GUPS.AntiCheat.Settings.GlobalSettings.RandomProvider
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: RandomProvider
        path: ''
        startLine: 24938
      summary: "\nA shared random provider used to generate random values.\n"
      example: []
      syntax:
        content:
          CSharp: public static IRandomProvider RandomProvider { get; }
          VB: Public Shared ReadOnly Property RandomProvider As IRandomProvider
        parameters: []
        return:
          type: GUPS.AntiCheat.IRandomProvider
      overload: GUPS.AntiCheat.Settings.GlobalSettings.RandomProvider*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Verify_Integrity
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Verify_Integrity
      language: CSharp
      name:
        CSharp: PlayerPreferences_Verify_Integrity
        VB: PlayerPreferences_Verify_Integrity
      nameWithType:
        CSharp: GlobalSettings.PlayerPreferences_Verify_Integrity
        VB: GlobalSettings.PlayerPreferences_Verify_Integrity
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Verify_Integrity
        VB: GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Verify_Integrity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: PlayerPreferences_Verify_Integrity
        path: ''
        startLine: 24950
      summary: "\nSet this property to true to enable verification of the integrity of the player preferences. Set it to false if you do not wish to verify \nintegrity. The integrity check relies on a hash that is calculated from the data type, value, and owner, and is stored in the signature.\n"
      example: []
      syntax:
        content:
          CSharp: public bool PlayerPreferences_Verify_Integrity
          VB: Public PlayerPreferences_Verify_Integrity As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Hash_Key
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Hash_Key
      language: CSharp
      name:
        CSharp: PlayerPreferences_Hash_Key
        VB: PlayerPreferences_Hash_Key
      nameWithType:
        CSharp: GlobalSettings.PlayerPreferences_Hash_Key
        VB: GlobalSettings.PlayerPreferences_Hash_Key
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Hash_Key
        VB: GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Hash_Key
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: PlayerPreferences_Hash_Key
        path: ''
        startLine: 24957
      summary: "\nSet this property to true to encrypt the player preference key. If set to false, the key will not be encrypted. When encryption is enabled, \nthe key is stored as a hash instead of its original name.\n"
      example: []
      syntax:
        content:
          CSharp: public bool PlayerPreferences_Hash_Key
          VB: Public PlayerPreferences_Hash_Key As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Value_Encryption_Key
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Value_Encryption_Key
      language: CSharp
      name:
        CSharp: PlayerPreferences_Value_Encryption_Key
        VB: PlayerPreferences_Value_Encryption_Key
      nameWithType:
        CSharp: GlobalSettings.PlayerPreferences_Value_Encryption_Key
        VB: GlobalSettings.PlayerPreferences_Value_Encryption_Key
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Value_Encryption_Key
        VB: GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Value_Encryption_Key
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: PlayerPreferences_Value_Encryption_Key
        path: ''
        startLine: 24964
      summary: "\nAssign a key to encrypt the player preference value. This key will be used for encryption. If a key is not assigned, the value will remain unencrypted.\nIf you change the key, the already written values will not be readable anymore, keep that in mind.\n"
      example: []
      syntax:
        content:
          CSharp: public String PlayerPreferences_Value_Encryption_Key
          VB: Public PlayerPreferences_Value_Encryption_Key As String
        return:
          type: GUPS.AntiCheat.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Allow_Read_Any_Owner
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Allow_Read_Any_Owner
      language: CSharp
      name:
        CSharp: PlayerPreferences_Allow_Read_Any_Owner
        VB: PlayerPreferences_Allow_Read_Any_Owner
      nameWithType:
        CSharp: GlobalSettings.PlayerPreferences_Allow_Read_Any_Owner
        VB: GlobalSettings.PlayerPreferences_Allow_Read_Any_Owner
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Allow_Read_Any_Owner
        VB: GUPS.AntiCheat.Settings.GlobalSettings.PlayerPreferences_Allow_Read_Any_Owner
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: PlayerPreferences_Allow_Read_Any_Owner
        path: ''
        startLine: 24972
      summary: "\nSet this property to true to permit anybody to read the stored player preference. If set to false, only the owner who created the player preference can \naccess it. By default, the owner is identified using the device&apos;s unique identifier from Unity, accessed via <see cref=\"!:UnityEngine.SystemInfo.deviceUniqueIdentifier\"></see>. \nThis feature is useful for sharing player preferences between different users or restricting access to them. For example if a user copy and paste it between devices.\n"
      example: []
      syntax:
        content:
          CSharp: public bool PlayerPreferences_Allow_Read_Any_Owner
          VB: Public PlayerPreferences_Allow_Read_Any_Owner As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_Enable_Development
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_Enable_Development
      language: CSharp
      name:
        CSharp: Android_Enable_Development
        VB: Android_Enable_Development
      nameWithType:
        CSharp: GlobalSettings.Android_Enable_Development
        VB: GlobalSettings.Android_Enable_Development
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_Enable_Development
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_Enable_Development
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_Enable_Development
        path: ''
        startLine: 24984
      summary: "\nSet to true to validate (Appstore, Libraries, Applications, Signature, ...) the android app on development builds too. Set to false to not \nvalidate the android app on development builds. Recommended: false.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Android_Enable_Development
          VB: Public Android_Enable_Development As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_AllowAllAppStores
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_AllowAllAppStores
      language: CSharp
      name:
        CSharp: Android_AllowAllAppStores
        VB: Android_AllowAllAppStores
      nameWithType:
        CSharp: GlobalSettings.Android_AllowAllAppStores
        VB: GlobalSettings.Android_AllowAllAppStores
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_AllowAllAppStores
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_AllowAllAppStores
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_AllowAllAppStores
        path: ''
        startLine: 24991
      summary: "\nSet true to allow all package installation sources for your app. Set to false to allow only the package installation sources in the list \nof allowed app stores.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Android_AllowAllAppStores
          VB: Public Android_AllowAllAppStores As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_AllowedAppStores
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_AllowedAppStores
      language: CSharp
      name:
        CSharp: Android_AllowedAppStores
        VB: Android_AllowedAppStores
      nameWithType:
        CSharp: GlobalSettings.Android_AllowedAppStores
        VB: GlobalSettings.Android_AllowedAppStores
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_AllowedAppStores
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_AllowedAppStores
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_AllowedAppStores
        path: ''
        startLine: 24998
      summary: "\nA list of allowed package installation sources for the application. If the app is installed from a source not in the list, you will get a\nnotification. You can react to those notifications and decide what you want to do from there.\n"
      example: []
      syntax:
        content:
          CSharp: public List<EAppStore> Android_AllowedAppStores
          VB: Public Android_AllowedAppStores As List(Of EAppStore)
        return:
          type: GUPS.AntiCheat.List{EAppStore}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_AllowedCustomAppStores
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_AllowedCustomAppStores
      language: CSharp
      name:
        CSharp: Android_AllowedCustomAppStores
        VB: Android_AllowedCustomAppStores
      nameWithType:
        CSharp: GlobalSettings.Android_AllowedCustomAppStores
        VB: GlobalSettings.Android_AllowedCustomAppStores
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_AllowedCustomAppStores
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_AllowedCustomAppStores
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_AllowedCustomAppStores
        path: ''
        startLine: 25005
      summary: "\nA list of allowed custom package installation sources for the application, if the store you wish to allow installation from is not in the \nlist of allowed app stores. Enter here the package names. For example for GooglePlayStore it is com.android.vending.\n"
      example: []
      syntax:
        content:
          CSharp: public List<String> Android_AllowedCustomAppStores
          VB: Public Android_AllowedCustomAppStores As List(Of String)
        return:
          type: GUPS.AntiCheat.List{String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_VerifyAppHash
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_VerifyAppHash
      language: CSharp
      name:
        CSharp: Android_VerifyAppHash
        VB: Android_VerifyAppHash
      nameWithType:
        CSharp: GlobalSettings.Android_VerifyAppHash
        VB: GlobalSettings.Android_VerifyAppHash
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_VerifyAppHash
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_VerifyAppHash
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_VerifyAppHash
        path: ''
        startLine: 25014
      summary: "\nSet to true to verify the hash of the app with a remote source. Set to false to not verify the app hash. After you have built your app, calculate \nthe hash of the whole app (apk / aab). Store this hash somewhere on a server in the web, but accessible to your app. When the app starts, it can\ndownload the hash from the server and compares it with the hash of the app. If the hashes do not match, the app is not the original app and you \ncan react.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Android_VerifyAppHash
          VB: Public Android_VerifyAppHash As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_AppHashAlgorithm
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_AppHashAlgorithm
      language: CSharp
      name:
        CSharp: Android_AppHashAlgorithm
        VB: Android_AppHashAlgorithm
      nameWithType:
        CSharp: GlobalSettings.Android_AppHashAlgorithm
        VB: GlobalSettings.Android_AppHashAlgorithm
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_AppHashAlgorithm
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_AppHashAlgorithm
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_AppHashAlgorithm
        path: ''
        startLine: 25020
      summary: "\nThe algorithm used to generate and validate the app hash. Recommend: SHA-256.\n"
      example: []
      syntax:
        content:
          CSharp: public EHashAlgorithm Android_AppHashAlgorithm
          VB: Public Android_AppHashAlgorithm As EHashAlgorithm
        return:
          type: GUPS.AntiCheat.EHashAlgorithm
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_AppHashEndpoint
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_AppHashEndpoint
      language: CSharp
      name:
        CSharp: Android_AppHashEndpoint
        VB: Android_AppHashEndpoint
      nameWithType:
        CSharp: GlobalSettings.Android_AppHashEndpoint
        VB: GlobalSettings.Android_AppHashEndpoint
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_AppHashEndpoint
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_AppHashEndpoint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_AppHashEndpoint
        path: ''
        startLine: 25030
      summary: "\nThe server get endpoint to read the app hash from. The server should return the hash of the whole app (apk / aab) as string to verify the app&apos;s \nidentity and ensure that it is not tampered with or shipped through an unauthorized source. The path can contain a placeholder &apos;{version}&apos; which will be\nreplaced with the Application.version. For example: https://yourserver.com/yourapp/hash/{version} or https://yourserver.com/yourapp/hash?version={version}.\nApplication.version returns the current version of the Application. To set the version number in Unity, go to Edit > Project Settings > Player. This is the \nsame as PlayerSettings.bundleVersion.\n"
      example: []
      syntax:
        content:
          CSharp: public String Android_AppHashEndpoint
          VB: Public Android_AppHashEndpoint As String
        return:
          type: GUPS.AntiCheat.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_VerifyAppFingerprint
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_VerifyAppFingerprint
      language: CSharp
      name:
        CSharp: Android_VerifyAppFingerprint
        VB: Android_VerifyAppFingerprint
      nameWithType:
        CSharp: GlobalSettings.Android_VerifyAppFingerprint
        VB: GlobalSettings.Android_VerifyAppFingerprint
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_VerifyAppFingerprint
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_VerifyAppFingerprint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_VerifyAppFingerprint
        path: ''
        startLine: 25038
      summary: "\nSet to true to verify the app fingerprint. Set to false to not check the app fingerprint. The fingerprint or signature of the app is a unique \nidentifier. It is used to verify the app&apos;s identity and ensure that it is not tampered with. You can get the fingerprint directly from the app\nor you can use the following command on your keystore to get the fingerprint: keytool -list -v -keystore yourapp.keystore -alias youralias.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Android_VerifyAppFingerprint
          VB: Public Android_VerifyAppFingerprint As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_AppFingerprintAlgorithm
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_AppFingerprintAlgorithm
      language: CSharp
      name:
        CSharp: Android_AppFingerprintAlgorithm
        VB: Android_AppFingerprintAlgorithm
      nameWithType:
        CSharp: GlobalSettings.Android_AppFingerprintAlgorithm
        VB: GlobalSettings.Android_AppFingerprintAlgorithm
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_AppFingerprintAlgorithm
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_AppFingerprintAlgorithm
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_AppFingerprintAlgorithm
        path: ''
        startLine: 25044
      summary: "\nThe algorithm used to generate and validate the app fingerprint. Recommend: SHA-256.\n"
      example: []
      syntax:
        content:
          CSharp: public EHashAlgorithm Android_AppFingerprintAlgorithm
          VB: Public Android_AppFingerprintAlgorithm As EHashAlgorithm
        return:
          type: GUPS.AntiCheat.EHashAlgorithm
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_AppFingerprint
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_AppFingerprint
      language: CSharp
      name:
        CSharp: Android_AppFingerprint
        VB: Android_AppFingerprint
      nameWithType:
        CSharp: GlobalSettings.Android_AppFingerprint
        VB: GlobalSettings.Android_AppFingerprint
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_AppFingerprint
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_AppFingerprint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_AppFingerprint
        path: ''
        startLine: 25050
      summary: "\nThe actual app fingerprint used to verify the app&apos;s identity and ensure that it is not tampered with or shipped through an unauthorized source.\n"
      example: []
      syntax:
        content:
          CSharp: public String Android_AppFingerprint
          VB: Public Android_AppFingerprint As String
        return:
          type: GUPS.AntiCheat.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_UseWhitelistingForLibraries
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_UseWhitelistingForLibraries
      language: CSharp
      name:
        CSharp: Android_UseWhitelistingForLibraries
        VB: Android_UseWhitelistingForLibraries
      nameWithType:
        CSharp: GlobalSettings.Android_UseWhitelistingForLibraries
        VB: GlobalSettings.Android_UseWhitelistingForLibraries
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_UseWhitelistingForLibraries
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_UseWhitelistingForLibraries
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_UseWhitelistingForLibraries
        path: ''
        startLine: 25056
      summary: "\nSet true to use whitelisting and blacklisting for libraries. Set to false to allow all libraries to be used in the application.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Android_UseWhitelistingForLibraries
          VB: Public Android_UseWhitelistingForLibraries As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_WhitelistedLibraries
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_WhitelistedLibraries
      language: CSharp
      name:
        CSharp: Android_WhitelistedLibraries
        VB: Android_WhitelistedLibraries
      nameWithType:
        CSharp: GlobalSettings.Android_WhitelistedLibraries
        VB: GlobalSettings.Android_WhitelistedLibraries
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_WhitelistedLibraries
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_WhitelistedLibraries
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_WhitelistedLibraries
        path: ''
        startLine: 25064
      summary: "\nA list of whitelisted libraries that are allowed to be used in the application. If the application uses a library that is not in the list,\nyou will get a notification. You can react to those notifications and decide what you want to do from there. A very common modding process\nis to add libraries to the application, which contain cheats.\n"
      example: []
      syntax:
        content:
          CSharp: public List<String> Android_WhitelistedLibraries
          VB: Public Android_WhitelistedLibraries As List(Of String)
        return:
          type: GUPS.AntiCheat.List{String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_BlacklistedLibraries
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_BlacklistedLibraries
      language: CSharp
      name:
        CSharp: Android_BlacklistedLibraries
        VB: Android_BlacklistedLibraries
      nameWithType:
        CSharp: GlobalSettings.Android_BlacklistedLibraries
        VB: GlobalSettings.Android_BlacklistedLibraries
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_BlacklistedLibraries
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_BlacklistedLibraries
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_BlacklistedLibraries
        path: ''
        startLine: 25072
      summary: "\nA list of blacklisted libraries that are not allowed to be used in the application. If the application uses a library that is in the list,\nyou will get a notification. You can react to those notifications and decide what you want to do from there. A very common modding process\nis to add libraries to the application, which contain cheats.\n"
      example: []
      syntax:
        content:
          CSharp: public List<String> Android_BlacklistedLibraries
          VB: Public Android_BlacklistedLibraries As List(Of String)
        return:
          type: GUPS.AntiCheat.List{String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_UseBlacklistingforApplication
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_UseBlacklistingforApplication
      language: CSharp
      name:
        CSharp: Android_UseBlacklistingforApplication
        VB: Android_UseBlacklistingforApplication
      nameWithType:
        CSharp: GlobalSettings.Android_UseBlacklistingforApplication
        VB: GlobalSettings.Android_UseBlacklistingforApplication
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_UseBlacklistingforApplication
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_UseBlacklistingforApplication
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_UseBlacklistingforApplication
        path: ''
        startLine: 25080
      summary: "\nSet to true to use blacklisting for apps on the device. Set to false to allow all apps to be used on the device. If the user as an app on\ntheir device that is blacklisted, you will get a notification. You can react to those notifications and decide what you want to do from\nthere.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Android_UseBlacklistingforApplication
          VB: Public Android_UseBlacklistingforApplication As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Settings.GlobalSettings.Android_BlacklistedApplications
      commentId: F:GUPS.AntiCheat.Settings.GlobalSettings.Android_BlacklistedApplications
      language: CSharp
      name:
        CSharp: Android_BlacklistedApplications
        VB: Android_BlacklistedApplications
      nameWithType:
        CSharp: GlobalSettings.Android_BlacklistedApplications
        VB: GlobalSettings.Android_BlacklistedApplications
      qualifiedName:
        CSharp: GUPS.AntiCheat.Settings.GlobalSettings.Android_BlacklistedApplications
        VB: GUPS.AntiCheat.Settings.GlobalSettings.Android_BlacklistedApplications
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Settings
      source:
        id: Android_BlacklistedApplications
        path: ''
        startLine: 25087
      summary: "\nA list of blacklisted applications that are not allowed to be used on the device. If the user as an app on their device that is blacklisted,\nyou will get a notification. You can react to those notifications and decide what you want to do from there.\n"
      example: []
      syntax:
        content:
          CSharp: public List<String> Android_BlacklistedApplications
          VB: Public Android_BlacklistedApplications As List(Of String)
        return:
          type: GUPS.AntiCheat.List{String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: GUPS.AntiCheat.Singleton
  commentId: N:GUPS.AntiCheat.Singleton
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Singleton
    VB: GUPS.AntiCheat.Singleton
  nameWithType:
    CSharp: GUPS.AntiCheat.Singleton
    VB: GUPS.AntiCheat.Singleton
  qualifiedName:
    CSharp: GUPS.AntiCheat.Singleton
    VB: GUPS.AntiCheat.Singleton
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Singleton.Singleton`1
    commentId: T:GUPS.AntiCheat.Singleton.Singleton`1
    language: CSharp
    name:
      CSharp: Singleton<T>
      VB: Singleton(Of T)
    nameWithType:
      CSharp: Singleton<T>
      VB: Singleton(Of T)
    qualifiedName:
      CSharp: GUPS.AntiCheat.Singleton.Singleton<T>
      VB: GUPS.AntiCheat.Singleton.Singleton(Of T)
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Singleton
    source:
      id: Singleton
      path: ''
      startLine: 25169
    summary: "\nA thread-safe singleton either active throughout the whole application or scene only.\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>'
        VB: >-
          Public MustInherit Class Singleton(Of T As Singleton(Of T))

              Inherits MonoBehaviour
      typeParameters:
      - id: T
        description: The type of the singleton.
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: GUPS.AntiCheat.Singleton.Singleton`1.IsPersistent
      commentId: P:GUPS.AntiCheat.Singleton.Singleton`1.IsPersistent
      language: CSharp
      name:
        CSharp: IsPersistent
        VB: IsPersistent
      nameWithType:
        CSharp: Singleton<T>.IsPersistent
        VB: Singleton(Of T).IsPersistent
      qualifiedName:
        CSharp: GUPS.AntiCheat.Singleton.Singleton<T>.IsPersistent
        VB: GUPS.AntiCheat.Singleton.Singleton(Of T).IsPersistent
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Singleton
      source:
        id: IsPersistent
        path: ''
        startLine: 25185
      summary: "\nReturns true if the singleton is persistent.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract bool IsPersistent { get; }
          VB: Public MustOverride ReadOnly Property IsPersistent As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Singleton.Singleton`1.IsPersistent*
      modifiers:
        CSharp:
        - public
        - abstract
        - get
        VB:
        - Public
        - MustOverride
        - ReadOnly
    - id: GUPS.AntiCheat.Singleton.Singleton`1.Instance
      commentId: P:GUPS.AntiCheat.Singleton.Singleton`1.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: Singleton<T>.Instance
        VB: Singleton(Of T).Instance
      qualifiedName:
        CSharp: GUPS.AntiCheat.Singleton.Singleton<T>.Instance
        VB: GUPS.AntiCheat.Singleton.Singleton(Of T).Instance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Singleton
      source:
        id: Instance
        path: ''
        startLine: 25195
      summary: "\nReturns an active singleton of this instance or creates a new one.\n"
      example: []
      syntax:
        content:
          CSharp: public static T Instance { get; }
          VB: Public Shared ReadOnly Property Instance As T
        parameters: []
        return:
          type: '{T}'
      overload: GUPS.AntiCheat.Singleton.Singleton`1.Instance*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: GUPS.AntiCheat.Singleton.Singleton`1.Exists
      commentId: P:GUPS.AntiCheat.Singleton.Singleton`1.Exists
      language: CSharp
      name:
        CSharp: Exists
        VB: Exists
      nameWithType:
        CSharp: Singleton<T>.Exists
        VB: Singleton(Of T).Exists
      qualifiedName:
        CSharp: GUPS.AntiCheat.Singleton.Singleton<T>.Exists
        VB: GUPS.AntiCheat.Singleton.Singleton(Of T).Exists
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Singleton
      source:
        id: Exists
        path: ''
        startLine: 25238
      summary: "\nReturns true if a singleton exists.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool Exists { get; }
          VB: Public Shared ReadOnly Property Exists As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: GUPS.AntiCheat.Singleton.Singleton`1.Exists*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: GUPS.AntiCheat.Singleton.Singleton`1.Awake
      commentId: M:GUPS.AntiCheat.Singleton.Singleton`1.Awake
      language: CSharp
      name:
        CSharp: Awake()
        VB: Awake()
      nameWithType:
        CSharp: Singleton<T>.Awake()
        VB: Singleton(Of T).Awake()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Singleton.Singleton<T>.Awake()
        VB: GUPS.AntiCheat.Singleton.Singleton(Of T).Awake()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Singleton
      source:
        id: Awake
        path: ''
        startLine: 25250
      summary: "\nOn awake, check if there is already a singleton.\nIf there is one and it is not this, destroy the GameObject.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void Awake()
          VB: Protected Overridable Sub Awake
      overload: GUPS.AntiCheat.Singleton.Singleton`1.Awake*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: GUPS.AntiCheat.Singleton.Singleton`1.OnApplicationQuit
      commentId: M:GUPS.AntiCheat.Singleton.Singleton`1.OnApplicationQuit
      language: CSharp
      name:
        CSharp: OnApplicationQuit()
        VB: OnApplicationQuit()
      nameWithType:
        CSharp: Singleton<T>.OnApplicationQuit()
        VB: Singleton(Of T).OnApplicationQuit()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Singleton.Singleton<T>.OnApplicationQuit()
        VB: GUPS.AntiCheat.Singleton.Singleton(Of T).OnApplicationQuit()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Singleton
      source:
        id: OnApplicationQuit
        path: ''
        startLine: 25325
      summary: "\nCalled when the application quits. Prevents the singleton from being recreated on quit.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void OnApplicationQuit()
          VB: Protected Overridable Sub OnApplicationQuit
      overload: GUPS.AntiCheat.Singleton.Singleton`1.OnApplicationQuit*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
- id: GUPS.AntiCheat.Tests
  commentId: N:GUPS.AntiCheat.Tests
  language: CSharp
  name:
    CSharp: GUPS.AntiCheat.Tests
    VB: GUPS.AntiCheat.Tests
  nameWithType:
    CSharp: GUPS.AntiCheat.Tests
    VB: GUPS.AntiCheat.Tests
  qualifiedName:
    CSharp: GUPS.AntiCheat.Tests
    VB: GUPS.AntiCheat.Tests
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: GUPS.AntiCheat.Tests.ReaderWriter_Test
    commentId: T:GUPS.AntiCheat.Tests.ReaderWriter_Test
    language: CSharp
    name:
      CSharp: ReaderWriter_Test
      VB: ReaderWriter_Test
    nameWithType:
      CSharp: ReaderWriter_Test
      VB: ReaderWriter_Test
    qualifiedName:
      CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test
      VB: GUPS.AntiCheat.Tests.ReaderWriter_Test
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Tests
    source:
      id: ReaderWriter_Test
      path: ''
      startLine: 25354
    summary: "\nTest fixture for testing binary reading and writing operations.\n"
    remarks: "\nContains tests for various data types including primitives and Unity-specific structures.\n"
    example: []
    syntax:
      content:
        CSharp: public class ReaderWriter_Test
        VB: Public Class ReaderWriter_Test
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Setup
      commentId: M:GUPS.AntiCheat.Tests.ReaderWriter_Test.Setup
      language: CSharp
      name:
        CSharp: Setup()
        VB: Setup()
      nameWithType:
        CSharp: ReaderWriter_Test.Setup()
        VB: ReaderWriter_Test.Setup()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test.Setup()
        VB: GUPS.AntiCheat.Tests.ReaderWriter_Test.Setup()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Setup
        path: ''
        startLine: 25373
      summary: "\nInitializes the test environment.\n"
      remarks: "\nCreates new instances of binary reader and writer before each test.\n"
      example: []
      syntax:
        content:
          CSharp: public void Setup()
          VB: Public Sub Setup
      overload: GUPS.AntiCheat.Tests.ReaderWriter_Test.Setup*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.PrimitiveTypes_Test``1(``0)
      commentId: M:GUPS.AntiCheat.Tests.ReaderWriter_Test.PrimitiveTypes_Test``1(``0)
      language: CSharp
      name:
        CSharp: PrimitiveTypes_Test<T>(T)
        VB: PrimitiveTypes_Test(Of T)(T)
      nameWithType:
        CSharp: ReaderWriter_Test.PrimitiveTypes_Test<T>(T)
        VB: ReaderWriter_Test.PrimitiveTypes_Test(Of T)(T)
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test.PrimitiveTypes_Test<T>(T)
        VB: GUPS.AntiCheat.Tests.ReaderWriter_Test.PrimitiveTypes_Test(Of T)(T)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: PrimitiveTypes_Test
        path: ''
        startLine: 25387
      summary: "\nTests reading and writing of primitive data types.\n"
      remarks: "\nCovers byte, bool, short, int, long, ushort, uint, ulong, float, double, char, and string types..\n"
      example: []
      syntax:
        content:
          CSharp: public void PrimitiveTypes_Test<T>(T _Value)
          VB: Public Sub PrimitiveTypes_Test(Of T)(_Value As T)
        parameters:
        - id: _Value
          type: '{T}'
          description: The test value to write and read.
        typeParameters:
        - id: T
          description: The type of primitive value to test.
      overload: GUPS.AntiCheat.Tests.ReaderWriter_Test.PrimitiveTypes_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color_Test
      commentId: M:GUPS.AntiCheat.Tests.ReaderWriter_Test.Color_Test
      language: CSharp
      name:
        CSharp: Color_Test()
        VB: Color_Test()
      nameWithType:
        CSharp: ReaderWriter_Test.Color_Test()
        VB: ReaderWriter_Test.Color_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color_Test()
        VB: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Color_Test
        path: ''
        startLine: 25411
      summary: "\nTests reading and writing of Color structure.\n"
      example: []
      syntax:
        content:
          CSharp: public void Color_Test()
          VB: Public Sub Color_Test
      overload: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color32_Test
      commentId: M:GUPS.AntiCheat.Tests.ReaderWriter_Test.Color32_Test
      language: CSharp
      name:
        CSharp: Color32_Test()
        VB: Color32_Test()
      nameWithType:
        CSharp: ReaderWriter_Test.Color32_Test()
        VB: ReaderWriter_Test.Color32_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color32_Test()
        VB: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color32_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Color32_Test
        path: ''
        startLine: 25424
      summary: "\nTests reading and writing of Color32 structure.\n"
      example: []
      syntax:
        content:
          CSharp: public void Color32_Test()
          VB: Public Sub Color32_Test
      overload: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color32_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector2_Test
      commentId: M:GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector2_Test
      language: CSharp
      name:
        CSharp: Vector2_Test()
        VB: Vector2_Test()
      nameWithType:
        CSharp: ReaderWriter_Test.Vector2_Test()
        VB: ReaderWriter_Test.Vector2_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector2_Test()
        VB: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector2_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Vector2_Test
        path: ''
        startLine: 25437
      summary: "\nTests reading and writing of Vector2 structure.\n"
      example: []
      syntax:
        content:
          CSharp: public void Vector2_Test()
          VB: Public Sub Vector2_Test
      overload: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector2_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector3_Test
      commentId: M:GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector3_Test
      language: CSharp
      name:
        CSharp: Vector3_Test()
        VB: Vector3_Test()
      nameWithType:
        CSharp: ReaderWriter_Test.Vector3_Test()
        VB: ReaderWriter_Test.Vector3_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector3_Test()
        VB: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector3_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Vector3_Test
        path: ''
        startLine: 25450
      summary: "\nTests reading and writing of Vector3 structure.\n"
      example: []
      syntax:
        content:
          CSharp: public void Vector3_Test()
          VB: Public Sub Vector3_Test
      overload: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector3_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector4_Test
      commentId: M:GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector4_Test
      language: CSharp
      name:
        CSharp: Vector4_Test()
        VB: Vector4_Test()
      nameWithType:
        CSharp: ReaderWriter_Test.Vector4_Test()
        VB: ReaderWriter_Test.Vector4_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector4_Test()
        VB: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector4_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Vector4_Test
        path: ''
        startLine: 25463
      summary: "\nTests reading and writing of Vector4 structure.\n"
      example: []
      syntax:
        content:
          CSharp: public void Vector4_Test()
          VB: Public Sub Vector4_Test
      overload: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector4_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Quaternion_Test
      commentId: M:GUPS.AntiCheat.Tests.ReaderWriter_Test.Quaternion_Test
      language: CSharp
      name:
        CSharp: Quaternion_Test()
        VB: Quaternion_Test()
      nameWithType:
        CSharp: ReaderWriter_Test.Quaternion_Test()
        VB: ReaderWriter_Test.Quaternion_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test.Quaternion_Test()
        VB: GUPS.AntiCheat.Tests.ReaderWriter_Test.Quaternion_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Quaternion_Test
        path: ''
        startLine: 25476
      summary: "\nTests reading and writing of Quaternion structure.\n"
      example: []
      syntax:
        content:
          CSharp: public void Quaternion_Test()
          VB: Public Sub Quaternion_Test
      overload: GUPS.AntiCheat.Tests.ReaderWriter_Test.Quaternion_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Rect_Test
      commentId: M:GUPS.AntiCheat.Tests.ReaderWriter_Test.Rect_Test
      language: CSharp
      name:
        CSharp: Rect_Test()
        VB: Rect_Test()
      nameWithType:
        CSharp: ReaderWriter_Test.Rect_Test()
        VB: ReaderWriter_Test.Rect_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test.Rect_Test()
        VB: GUPS.AntiCheat.Tests.ReaderWriter_Test.Rect_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Rect_Test
        path: ''
        startLine: 25489
      summary: "\nTests reading and writing of Rect structure.\n"
      example: []
      syntax:
        content:
          CSharp: public void Rect_Test()
          VB: Public Sub Rect_Test
      overload: GUPS.AntiCheat.Tests.ReaderWriter_Test.Rect_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Plane_Test
      commentId: M:GUPS.AntiCheat.Tests.ReaderWriter_Test.Plane_Test
      language: CSharp
      name:
        CSharp: Plane_Test()
        VB: Plane_Test()
      nameWithType:
        CSharp: ReaderWriter_Test.Plane_Test()
        VB: ReaderWriter_Test.Plane_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test.Plane_Test()
        VB: GUPS.AntiCheat.Tests.ReaderWriter_Test.Plane_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Plane_Test
        path: ''
        startLine: 25502
      summary: "\nTests reading and writing of Plane structure.\n"
      example: []
      syntax:
        content:
          CSharp: public void Plane_Test()
          VB: Public Sub Plane_Test
      overload: GUPS.AntiCheat.Tests.ReaderWriter_Test.Plane_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Ray_Test
      commentId: M:GUPS.AntiCheat.Tests.ReaderWriter_Test.Ray_Test
      language: CSharp
      name:
        CSharp: Ray_Test()
        VB: Ray_Test()
      nameWithType:
        CSharp: ReaderWriter_Test.Ray_Test()
        VB: ReaderWriter_Test.Ray_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test.Ray_Test()
        VB: GUPS.AntiCheat.Tests.ReaderWriter_Test.Ray_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Ray_Test
        path: ''
        startLine: 25515
      summary: "\nTests reading and writing of Ray structure.\n"
      example: []
      syntax:
        content:
          CSharp: public void Ray_Test()
          VB: Public Sub Ray_Test
      overload: GUPS.AntiCheat.Tests.ReaderWriter_Test.Ray_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Matrix4x4_Test
      commentId: M:GUPS.AntiCheat.Tests.ReaderWriter_Test.Matrix4x4_Test
      language: CSharp
      name:
        CSharp: Matrix4x4_Test()
        VB: Matrix4x4_Test()
      nameWithType:
        CSharp: ReaderWriter_Test.Matrix4x4_Test()
        VB: ReaderWriter_Test.Matrix4x4_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.ReaderWriter_Test.Matrix4x4_Test()
        VB: GUPS.AntiCheat.Tests.ReaderWriter_Test.Matrix4x4_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Matrix4x4_Test
        path: ''
        startLine: 25528
      summary: "\nTests reading and writing of Matrix4x4 structure.\n"
      example: []
      syntax:
        content:
          CSharp: public void Matrix4x4_Test()
          VB: Public Sub Matrix4x4_Test
      overload: GUPS.AntiCheat.Tests.ReaderWriter_Test.Matrix4x4_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests
    commentId: T:GUPS.AntiCheat.Tests.Protected_BlockChain_Tests
    language: CSharp
    name:
      CSharp: Protected_BlockChain_Tests
      VB: Protected_BlockChain_Tests
    nameWithType:
      CSharp: Protected_BlockChain_Tests
      VB: Protected_BlockChain_Tests
    qualifiedName:
      CSharp: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests
      VB: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Tests
    source:
      id: Protected_BlockChain_Tests
      path: ''
      startLine: 25560
    syntax:
      content:
        CSharp: public class Protected_BlockChain_Tests
        VB: Public Class Protected_BlockChain_Tests
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test
      language: CSharp
      name:
        CSharp: Protected_BlockChain_Local_Int32_Test()
        VB: Protected_BlockChain_Local_Int32_Test()
      nameWithType:
        CSharp: Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test()
        VB: Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test()
        VB: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_BlockChain_Local_Int32_Test
        path: ''
        startLine: 25573
      syntax:
        content:
          CSharp: public void Protected_BlockChain_Local_Int32_Test()
          VB: Public Sub Protected_BlockChain_Local_Int32_Test
      overload: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test
      language: CSharp
      name:
        CSharp: Protected_BlockChain_Local_Int32_Multiple_Blocks_Test()
        VB: Protected_BlockChain_Local_Int32_Multiple_Blocks_Test()
      nameWithType:
        CSharp: Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test()
        VB: Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test()
        VB: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_BlockChain_Local_Int32_Multiple_Blocks_Test
        path: ''
        startLine: 25597
      syntax:
        content:
          CSharp: public void Protected_BlockChain_Local_Int32_Multiple_Blocks_Test()
          VB: Public Sub Protected_BlockChain_Local_Int32_Multiple_Blocks_Test
      overload: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test
      language: CSharp
      name:
        CSharp: Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test()
        VB: Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test()
      nameWithType:
        CSharp: Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test()
        VB: Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test()
        VB: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test
        path: ''
        startLine: 25624
      syntax:
        content:
          CSharp: public void Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test()
          VB: Public Sub Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test
      overload: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test
      language: CSharp
      name:
        CSharp: Protected_BlockChain_File_Int32_Test()
        VB: Protected_BlockChain_File_Int32_Test()
      nameWithType:
        CSharp: Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test()
        VB: Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test()
        VB: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_BlockChain_File_Int32_Test
        path: ''
        startLine: 25655
      syntax:
        content:
          CSharp: public async void Protected_BlockChain_File_Int32_Test()
          VB: Public Sub Protected_BlockChain_File_Int32_Test
      overload: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test*
      modifiers:
        CSharp:
        - public
        - async
        VB:
        - Public
  - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests
    commentId: T:GUPS.AntiCheat.Tests.Protected_Collection_Tests
    language: CSharp
    name:
      CSharp: Protected_Collection_Tests
      VB: Protected_Collection_Tests
    nameWithType:
      CSharp: Protected_Collection_Tests
      VB: Protected_Collection_Tests
    qualifiedName:
      CSharp: GUPS.AntiCheat.Tests.Protected_Collection_Tests
      VB: GUPS.AntiCheat.Tests.Protected_Collection_Tests
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Tests
    source:
      id: Protected_Collection_Tests
      path: ''
      startLine: 25726
    syntax:
      content:
        CSharp: public class Protected_Collection_Tests
        VB: Public Class Protected_Collection_Tests
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_Test
      language: CSharp
      name:
        CSharp: Protected_List_Int32_Test()
        VB: Protected_List_Int32_Test()
      nameWithType:
        CSharp: Protected_Collection_Tests.Protected_List_Int32_Test()
        VB: Protected_Collection_Tests.Protected_List_Int32_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_List_Int32_Test
        path: ''
        startLine: 25739
      syntax:
        content:
          CSharp: public void Protected_List_Int32_Test()
          VB: Public Sub Protected_List_Int32_Test
      overload: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test
      language: CSharp
      name:
        CSharp: Protected_List_Int32_CheckIntegrity_Test()
        VB: Protected_List_Int32_CheckIntegrity_Test()
      nameWithType:
        CSharp: Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test()
        VB: Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_List_Int32_CheckIntegrity_Test
        path: ''
        startLine: 25799
      syntax:
        content:
          CSharp: public void Protected_List_Int32_CheckIntegrity_Test()
          VB: Public Sub Protected_List_Int32_CheckIntegrity_Test
      overload: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_Test
      language: CSharp
      name:
        CSharp: Protected_Queue_Int32_Test()
        VB: Protected_Queue_Int32_Test()
      nameWithType:
        CSharp: Protected_Collection_Tests.Protected_Queue_Int32_Test()
        VB: Protected_Collection_Tests.Protected_Queue_Int32_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Queue_Int32_Test
        path: ''
        startLine: 25829
      syntax:
        content:
          CSharp: public void Protected_Queue_Int32_Test()
          VB: Public Sub Protected_Queue_Int32_Test
      overload: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test
      language: CSharp
      name:
        CSharp: Protected_Queue_Int32_CheckIntegrity_Test()
        VB: Protected_Queue_Int32_CheckIntegrity_Test()
      nameWithType:
        CSharp: Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test()
        VB: Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Queue_Int32_CheckIntegrity_Test
        path: ''
        startLine: 25860
      syntax:
        content:
          CSharp: public void Protected_Queue_Int32_CheckIntegrity_Test()
          VB: Public Sub Protected_Queue_Int32_CheckIntegrity_Test
      overload: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_Test
      language: CSharp
      name:
        CSharp: Protected_Stack_Int32_Test()
        VB: Protected_Stack_Int32_Test()
      nameWithType:
        CSharp: Protected_Collection_Tests.Protected_Stack_Int32_Test()
        VB: Protected_Collection_Tests.Protected_Stack_Int32_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Stack_Int32_Test
        path: ''
        startLine: 25890
      syntax:
        content:
          CSharp: public void Protected_Stack_Int32_Test()
          VB: Public Sub Protected_Stack_Int32_Test
      overload: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test
      language: CSharp
      name:
        CSharp: Protected_Stack_Int32_CheckIntegrity_Test()
        VB: Protected_Stack_Int32_CheckIntegrity_Test()
      nameWithType:
        CSharp: Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test()
        VB: Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Stack_Int32_CheckIntegrity_Test
        path: ''
        startLine: 25921
      syntax:
        content:
          CSharp: public void Protected_Stack_Int32_CheckIntegrity_Test()
          VB: Public Sub Protected_Stack_Int32_CheckIntegrity_Test
      overload: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: GUPS.AntiCheat.Tests.Protected_DataChain_Tests
    commentId: T:GUPS.AntiCheat.Tests.Protected_DataChain_Tests
    language: CSharp
    name:
      CSharp: Protected_DataChain_Tests
      VB: Protected_DataChain_Tests
    nameWithType:
      CSharp: Protected_DataChain_Tests
      VB: Protected_DataChain_Tests
    qualifiedName:
      CSharp: GUPS.AntiCheat.Tests.Protected_DataChain_Tests
      VB: GUPS.AntiCheat.Tests.Protected_DataChain_Tests
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Tests
    source:
      id: Protected_DataChain_Tests
      path: ''
      startLine: 25971
    syntax:
      content:
        CSharp: public class Protected_DataChain_Tests
        VB: Public Class Protected_DataChain_Tests
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_Test
      language: CSharp
      name:
        CSharp: Protected_DataChain_Int32_Test()
        VB: Protected_DataChain_Int32_Test()
      nameWithType:
        CSharp: Protected_DataChain_Tests.Protected_DataChain_Int32_Test()
        VB: Protected_DataChain_Tests.Protected_DataChain_Int32_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_Test()
        VB: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_DataChain_Int32_Test
        path: ''
        startLine: 25984
      syntax:
        content:
          CSharp: public void Protected_DataChain_Int32_Test()
          VB: Public Sub Protected_DataChain_Int32_Test
      overload: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test
      language: CSharp
      name:
        CSharp: Protected_DataChain_Int32_CheckIntegrity_Test()
        VB: Protected_DataChain_Int32_CheckIntegrity_Test()
      nameWithType:
        CSharp: Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test()
        VB: Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test()
        VB: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_DataChain_Int32_CheckIntegrity_Test
        path: ''
        startLine: 26000
      syntax:
        content:
          CSharp: public void Protected_DataChain_Int32_CheckIntegrity_Test()
          VB: Public Sub Protected_DataChain_Int32_CheckIntegrity_Test
      overload: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests
    commentId: T:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests
    language: CSharp
    name:
      CSharp: Protected_PlayerPrefs_File_Tests
      VB: Protected_PlayerPrefs_File_Tests
    nameWithType:
      CSharp: Protected_PlayerPrefs_File_Tests
      VB: Protected_PlayerPrefs_File_Tests
    qualifiedName:
      CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests
      VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Tests
    source:
      id: Protected_PlayerPrefs_File_Tests
      path: ''
      startLine: 26058
    summary: "\nTest fixture for testing the protected player file preferences.\n"
    example: []
    syntax:
      content:
        CSharp: public class Protected_PlayerPrefs_File_Tests
        VB: Public Class Protected_PlayerPrefs_File_Tests
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.TearDown
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.TearDown
      language: CSharp
      name:
        CSharp: TearDown()
        VB: TearDown()
      nameWithType:
        CSharp: Protected_PlayerPrefs_File_Tests.TearDown()
        VB: Protected_PlayerPrefs_File_Tests.TearDown()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.TearDown()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.TearDown()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: TearDown
        path: ''
        startLine: 26074
      syntax:
        content:
          CSharp: public void TearDown()
          VB: Public Sub TearDown
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.TearDown*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test
      language: CSharp
      name:
        CSharp: HasKey_Exists_Test()
        VB: HasKey_Exists_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test()
        VB: Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: HasKey_Exists_Test
        path: ''
        startLine: 26084
      syntax:
        content:
          CSharp: public void HasKey_Exists_Test()
          VB: Public Sub HasKey_Exists_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test
      language: CSharp
      name:
        CSharp: HasKey_Not_Exists_Test()
        VB: HasKey_Not_Exists_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test()
        VB: Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: HasKey_Not_Exists_Test
        path: ''
        startLine: 26097
      syntax:
        content:
          CSharp: public void HasKey_Not_Exists_Test()
          VB: Public Sub HasKey_Not_Exists_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test
      language: CSharp
      name:
        CSharp: HasKey_Hashed_Exists_Test()
        VB: HasKey_Hashed_Exists_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test()
        VB: Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: HasKey_Hashed_Exists_Test
        path: ''
        startLine: 26108
      syntax:
        content:
          CSharp: public void HasKey_Hashed_Exists_Test()
          VB: Public Sub HasKey_Hashed_Exists_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test
      language: CSharp
      name:
        CSharp: Set_Get_Protected_Test()
        VB: Set_Get_Protected_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test()
        VB: Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Set_Get_Protected_Test
        path: ''
        startLine: 26124
      syntax:
        content:
          CSharp: public void Set_Get_Protected_Test()
          VB: Public Sub Set_Get_Protected_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test
      language: CSharp
      name:
        CSharp: Set_Get_Object_Test()
        VB: Set_Get_Object_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test()
        VB: Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Set_Get_Object_Test
        path: ''
        startLine: 26139
      syntax:
        content:
          CSharp: public void Set_Get_Object_Test()
          VB: Public Sub Set_Get_Object_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Test
      language: CSharp
      name:
        CSharp: Save_Test()
        VB: Save_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_File_Tests.Save_Test()
        VB: Protected_PlayerPrefs_File_Tests.Save_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Save_Test
        path: ''
        startLine: 26154
      syntax:
        content:
          CSharp: public void Save_Test()
          VB: Public Sub Save_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test
      language: CSharp
      name:
        CSharp: Save_Encrypted_Test()
        VB: Save_Encrypted_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test()
        VB: Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Save_Encrypted_Test
        path: ''
        startLine: 26167
      syntax:
        content:
          CSharp: public void Save_Encrypted_Test()
          VB: Public Sub Save_Encrypted_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Test
      language: CSharp
      name:
        CSharp: Load_Test()
        VB: Load_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_File_Tests.Load_Test()
        VB: Protected_PlayerPrefs_File_Tests.Load_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Load_Test
        path: ''
        startLine: 26183
      syntax:
        content:
          CSharp: public void Load_Test()
          VB: Public Sub Load_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test
      language: CSharp
      name:
        CSharp: Load_Encrypted_Test()
        VB: Load_Encrypted_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test()
        VB: Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Load_Encrypted_Test
        path: ''
        startLine: 26190
      syntax:
        content:
          CSharp: public void Load_Encrypted_Test()
          VB: Public Sub Load_Encrypted_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests
    commentId: T:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests
    language: CSharp
    name:
      CSharp: Protected_PlayerPrefs_Tests
      VB: Protected_PlayerPrefs_Tests
    nameWithType:
      CSharp: Protected_PlayerPrefs_Tests
      VB: Protected_PlayerPrefs_Tests
    qualifiedName:
      CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests
      VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Tests
    source:
      id: Protected_PlayerPrefs_Tests
      path: ''
      startLine: 26224
    summary: "\nTest fixture for testing the protected player preferences.\n"
    example: []
    syntax:
      content:
        CSharp: public class Protected_PlayerPrefs_Tests
        VB: Public Class Protected_PlayerPrefs_Tests
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.TearDown
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.TearDown
      language: CSharp
      name:
        CSharp: TearDown()
        VB: TearDown()
      nameWithType:
        CSharp: Protected_PlayerPrefs_Tests.TearDown()
        VB: Protected_PlayerPrefs_Tests.TearDown()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.TearDown()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.TearDown()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: TearDown
        path: ''
        startLine: 26240
      syntax:
        content:
          CSharp: public void TearDown()
          VB: Public Sub TearDown
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.TearDown*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Exists_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Exists_Test
      language: CSharp
      name:
        CSharp: HasKey_Exists_Test()
        VB: HasKey_Exists_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_Tests.HasKey_Exists_Test()
        VB: Protected_PlayerPrefs_Tests.HasKey_Exists_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Exists_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Exists_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: HasKey_Exists_Test
        path: ''
        startLine: 26250
      syntax:
        content:
          CSharp: public void HasKey_Exists_Test()
          VB: Public Sub HasKey_Exists_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Exists_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test
      language: CSharp
      name:
        CSharp: HasKey_Not_Exists_Test()
        VB: HasKey_Not_Exists_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test()
        VB: Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: HasKey_Not_Exists_Test
        path: ''
        startLine: 26263
      syntax:
        content:
          CSharp: public void HasKey_Not_Exists_Test()
          VB: Public Sub HasKey_Not_Exists_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test
      language: CSharp
      name:
        CSharp: HasKey_Hashed_Exists_Test()
        VB: HasKey_Hashed_Exists_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test()
        VB: Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: HasKey_Hashed_Exists_Test
        path: ''
        startLine: 26274
      syntax:
        content:
          CSharp: public void HasKey_Hashed_Exists_Test()
          VB: Public Sub HasKey_Hashed_Exists_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Protected_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Protected_Test
      language: CSharp
      name:
        CSharp: Set_Get_Protected_Test()
        VB: Set_Get_Protected_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_Tests.Set_Get_Protected_Test()
        VB: Protected_PlayerPrefs_Tests.Set_Get_Protected_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Protected_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Protected_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Set_Get_Protected_Test
        path: ''
        startLine: 26290
      syntax:
        content:
          CSharp: public void Set_Get_Protected_Test()
          VB: Public Sub Set_Get_Protected_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Protected_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Object_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Object_Test
      language: CSharp
      name:
        CSharp: Set_Get_Object_Test()
        VB: Set_Get_Object_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_Tests.Set_Get_Object_Test()
        VB: Protected_PlayerPrefs_Tests.Set_Get_Object_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Object_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Object_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Set_Get_Object_Test
        path: ''
        startLine: 26305
      syntax:
        content:
          CSharp: public void Set_Get_Object_Test()
          VB: Public Sub Set_Get_Object_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Object_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test
      language: CSharp
      name:
        CSharp: Set_Get_Encrypted_Object_Test()
        VB: Set_Get_Encrypted_Object_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test()
        VB: Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Set_Get_Encrypted_Object_Test
        path: ''
        startLine: 26320
      syntax:
        content:
          CSharp: public void Set_Get_Encrypted_Object_Test()
          VB: Public Sub Set_Get_Encrypted_Object_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test
      language: CSharp
      name:
        CSharp: Set_Get_InvalidOwner_Object_ShouldThrowException_Test()
        VB: Set_Get_InvalidOwner_Object_ShouldThrowException_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test()
        VB: Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Set_Get_InvalidOwner_Object_ShouldThrowException_Test
        path: ''
        startLine: 26338
      syntax:
        content:
          CSharp: public void Set_Get_InvalidOwner_Object_ShouldThrowException_Test()
          VB: Public Sub Set_Get_InvalidOwner_Object_ShouldThrowException_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test
      language: CSharp
      name:
        CSharp: Set_Get_AnyOwner_Object_Test()
        VB: Set_Get_AnyOwner_Object_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test()
        VB: Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Set_Get_AnyOwner_Object_Test
        path: ''
        startLine: 26361
      syntax:
        content:
          CSharp: public void Set_Get_AnyOwner_Object_Test()
          VB: Public Sub Set_Get_AnyOwner_Object_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test
      language: CSharp
      name:
        CSharp: Set_Get_InvalidSignature_Object_ShouldThrowException_Test()
        VB: Set_Get_InvalidSignature_Object_ShouldThrowException_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test()
        VB: Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Set_Get_InvalidSignature_Object_ShouldThrowException_Test
        path: ''
        startLine: 26384
      syntax:
        content:
          CSharp: public void Set_Get_InvalidSignature_Object_ShouldThrowException_Test()
          VB: Public Sub Set_Get_InvalidSignature_Object_ShouldThrowException_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test
      language: CSharp
      name:
        CSharp: Set_Get_InvalidType_Object_ShouldThrowException_Test()
        VB: Set_Get_InvalidType_Object_ShouldThrowException_Test()
      nameWithType:
        CSharp: Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test()
        VB: Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test()
        VB: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Set_Get_InvalidType_Object_ShouldThrowException_Test
        path: ''
        startLine: 26411
      syntax:
        content:
          CSharp: public void Set_Get_InvalidType_Object_ShouldThrowException_Test()
          VB: Public Sub Set_Get_InvalidType_Object_ShouldThrowException_Test
      overload: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests
    commentId: T:GUPS.AntiCheat.Tests.Protected_Primitives_Tests
    language: CSharp
    name:
      CSharp: Protected_Primitives_Tests
      VB: Protected_Primitives_Tests
    nameWithType:
      CSharp: Protected_Primitives_Tests
      VB: Protected_Primitives_Tests
    qualifiedName:
      CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests
      VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Tests
    source:
      id: Protected_Primitives_Tests
      path: ''
      startLine: 26455
    syntax:
      content:
        CSharp: public class Protected_Primitives_Tests
        VB: Public Class Protected_Primitives_Tests
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int16_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int16_Test
      language: CSharp
      name:
        CSharp: Protected_Int16_Test()
        VB: Protected_Int16_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Int16_Test()
        VB: Protected_Primitives_Tests.Protected_Int16_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int16_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int16_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Int16_Test
        path: ''
        startLine: 26468
      syntax:
        content:
          CSharp: public void Protected_Int16_Test()
          VB: Public Sub Protected_Int16_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int16_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int32_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int32_Test
      language: CSharp
      name:
        CSharp: Protected_Int32_Test()
        VB: Protected_Int32_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Int32_Test()
        VB: Protected_Primitives_Tests.Protected_Int32_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int32_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int32_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Int32_Test
        path: ''
        startLine: 26499
      syntax:
        content:
          CSharp: public void Protected_Int32_Test()
          VB: Public Sub Protected_Int32_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int32_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int64_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int64_Test
      language: CSharp
      name:
        CSharp: Protected_Int64_Test()
        VB: Protected_Int64_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Int64_Test()
        VB: Protected_Primitives_Tests.Protected_Int64_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int64_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int64_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Int64_Test
        path: ''
        startLine: 26530
      syntax:
        content:
          CSharp: public void Protected_Int64_Test()
          VB: Public Sub Protected_Int64_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int64_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt16_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt16_Test
      language: CSharp
      name:
        CSharp: Protected_UInt16_Test()
        VB: Protected_UInt16_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_UInt16_Test()
        VB: Protected_Primitives_Tests.Protected_UInt16_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt16_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt16_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_UInt16_Test
        path: ''
        startLine: 26561
      syntax:
        content:
          CSharp: public void Protected_UInt16_Test()
          VB: Public Sub Protected_UInt16_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt16_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt32_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt32_Test
      language: CSharp
      name:
        CSharp: Protected_UInt32_Test()
        VB: Protected_UInt32_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_UInt32_Test()
        VB: Protected_Primitives_Tests.Protected_UInt32_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt32_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt32_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_UInt32_Test
        path: ''
        startLine: 26592
      syntax:
        content:
          CSharp: public void Protected_UInt32_Test()
          VB: Public Sub Protected_UInt32_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt32_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt64_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt64_Test
      language: CSharp
      name:
        CSharp: Protected_UInt64_Test()
        VB: Protected_UInt64_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_UInt64_Test()
        VB: Protected_Primitives_Tests.Protected_UInt64_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt64_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt64_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_UInt64_Test
        path: ''
        startLine: 26623
      syntax:
        content:
          CSharp: public void Protected_UInt64_Test()
          VB: Public Sub Protected_UInt64_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt64_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Float_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Float_Test
      language: CSharp
      name:
        CSharp: Protected_Float_Test()
        VB: Protected_Float_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Float_Test()
        VB: Protected_Primitives_Tests.Protected_Float_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Float_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Float_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Float_Test
        path: ''
        startLine: 26654
      syntax:
        content:
          CSharp: public void Protected_Float_Test()
          VB: Public Sub Protected_Float_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Float_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Double_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Double_Test
      language: CSharp
      name:
        CSharp: Protected_Double_Test()
        VB: Protected_Double_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Double_Test()
        VB: Protected_Primitives_Tests.Protected_Double_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Double_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Double_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Double_Test
        path: ''
        startLine: 26685
      syntax:
        content:
          CSharp: public void Protected_Double_Test()
          VB: Public Sub Protected_Double_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Double_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Decimal_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Decimal_Test
      language: CSharp
      name:
        CSharp: Protected_Decimal_Test()
        VB: Protected_Decimal_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Decimal_Test()
        VB: Protected_Primitives_Tests.Protected_Decimal_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Decimal_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Decimal_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Decimal_Test
        path: ''
        startLine: 26716
      syntax:
        content:
          CSharp: public void Protected_Decimal_Test()
          VB: Public Sub Protected_Decimal_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Decimal_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Bool_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Bool_Test
      language: CSharp
      name:
        CSharp: Protected_Bool_Test()
        VB: Protected_Bool_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Bool_Test()
        VB: Protected_Primitives_Tests.Protected_Bool_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Bool_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Bool_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Bool_Test
        path: ''
        startLine: 26747
      syntax:
        content:
          CSharp: public void Protected_Bool_Test()
          VB: Public Sub Protected_Bool_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Bool_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_String_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_String_Test
      language: CSharp
      name:
        CSharp: Protected_String_Test()
        VB: Protected_String_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_String_Test()
        VB: Protected_Primitives_Tests.Protected_String_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_String_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_String_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_String_Test
        path: ''
        startLine: 26766
      syntax:
        content:
          CSharp: public void Protected_String_Test()
          VB: Public Sub Protected_String_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_String_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2_Test
      language: CSharp
      name:
        CSharp: Protected_Vector2_Test()
        VB: Protected_Vector2_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Vector2_Test()
        VB: Protected_Primitives_Tests.Protected_Vector2_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Vector2_Test
        path: ''
        startLine: 26785
      syntax:
        content:
          CSharp: public void Protected_Vector2_Test()
          VB: Public Sub Protected_Vector2_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2Int_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2Int_Test
      language: CSharp
      name:
        CSharp: Protected_Vector2Int_Test()
        VB: Protected_Vector2Int_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Vector2Int_Test()
        VB: Protected_Primitives_Tests.Protected_Vector2Int_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2Int_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2Int_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Vector2Int_Test
        path: ''
        startLine: 26804
      syntax:
        content:
          CSharp: public void Protected_Vector2Int_Test()
          VB: Public Sub Protected_Vector2Int_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2Int_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3_Test
      language: CSharp
      name:
        CSharp: Protected_Vector3_Test()
        VB: Protected_Vector3_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Vector3_Test()
        VB: Protected_Primitives_Tests.Protected_Vector3_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Vector3_Test
        path: ''
        startLine: 26823
      syntax:
        content:
          CSharp: public void Protected_Vector3_Test()
          VB: Public Sub Protected_Vector3_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3Int_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3Int_Test
      language: CSharp
      name:
        CSharp: Protected_Vector3Int_Test()
        VB: Protected_Vector3Int_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Vector3Int_Test()
        VB: Protected_Primitives_Tests.Protected_Vector3Int_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3Int_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3Int_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Vector3Int_Test
        path: ''
        startLine: 26842
      syntax:
        content:
          CSharp: public void Protected_Vector3Int_Test()
          VB: Public Sub Protected_Vector3Int_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3Int_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4_Test
      language: CSharp
      name:
        CSharp: Protected_Vector4_Test()
        VB: Protected_Vector4_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Vector4_Test()
        VB: Protected_Primitives_Tests.Protected_Vector4_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Vector4_Test
        path: ''
        startLine: 26861
      syntax:
        content:
          CSharp: public void Protected_Vector4_Test()
          VB: Public Sub Protected_Vector4_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4Int_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4Int_Test
      language: CSharp
      name:
        CSharp: Protected_Vector4Int_Test()
        VB: Protected_Vector4Int_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Vector4Int_Test()
        VB: Protected_Primitives_Tests.Protected_Vector4Int_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4Int_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4Int_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Vector4Int_Test
        path: ''
        startLine: 26880
      syntax:
        content:
          CSharp: public void Protected_Vector4Int_Test()
          VB: Public Sub Protected_Vector4Int_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4Int_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Quaternion_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Quaternion_Test
      language: CSharp
      name:
        CSharp: Protected_Quaternion_Test()
        VB: Protected_Quaternion_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_Quaternion_Test()
        VB: Protected_Primitives_Tests.Protected_Quaternion_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Quaternion_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Quaternion_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_Quaternion_Test
        path: ''
        startLine: 26899
      syntax:
        content:
          CSharp: public void Protected_Quaternion_Test()
          VB: Public Sub Protected_Quaternion_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Quaternion_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_DateTime_Test
      commentId: M:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_DateTime_Test
      language: CSharp
      name:
        CSharp: Protected_DateTime_Test()
        VB: Protected_DateTime_Test()
      nameWithType:
        CSharp: Protected_Primitives_Tests.Protected_DateTime_Test()
        VB: Protected_Primitives_Tests.Protected_DateTime_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_DateTime_Test()
        VB: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_DateTime_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Protected_DateTime_Test
        path: ''
        startLine: 26918
      syntax:
        content:
          CSharp: public void Protected_DateTime_Test()
          VB: Public Sub Protected_DateTime_Test
      overload: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_DateTime_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: GUPS.AntiCheat.Tests.StorageContainer_Tests
    commentId: T:GUPS.AntiCheat.Tests.StorageContainer_Tests
    language: CSharp
    name:
      CSharp: StorageContainer_Tests
      VB: StorageContainer_Tests
    nameWithType:
      CSharp: StorageContainer_Tests
      VB: StorageContainer_Tests
    qualifiedName:
      CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests
      VB: GUPS.AntiCheat.Tests.StorageContainer_Tests
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Tests
    source:
      id: StorageContainer_Tests
      path: ''
      startLine: 26959
    summary: "\nTest fixture for testing storage container operations.\n"
    example: []
    syntax:
      content:
        CSharp: public class StorageContainer_Tests
        VB: Public Class StorageContainer_Tests
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.SetUp
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.SetUp
      language: CSharp
      name:
        CSharp: SetUp()
        VB: SetUp()
      nameWithType:
        CSharp: StorageContainer_Tests.SetUp()
        VB: StorageContainer_Tests.SetUp()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.SetUp()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.SetUp()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: SetUp
        path: ''
        startLine: 26964
      syntax:
        content:
          CSharp: public void SetUp()
          VB: Public Sub SetUp
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.SetUp*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_Item_ShouldAddItemToContainer
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_Item_ShouldAddItemToContainer
      language: CSharp
      name:
        CSharp: Add_Item_ShouldAddItemToContainer()
        VB: Add_Item_ShouldAddItemToContainer()
      nameWithType:
        CSharp: StorageContainer_Tests.Add_Item_ShouldAddItemToContainer()
        VB: StorageContainer_Tests.Add_Item_ShouldAddItemToContainer()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_Item_ShouldAddItemToContainer()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_Item_ShouldAddItemToContainer()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Add_Item_ShouldAddItemToContainer
        path: ''
        startLine: 26970
      syntax:
        content:
          CSharp: public void Add_Item_ShouldAddItemToContainer()
          VB: Public Sub Add_Item_ShouldAddItemToContainer
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_Item_ShouldAddItemToContainer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer
      language: CSharp
      name:
        CSharp: Set_Item_ShouldUpdateExistingItemInContainer()
        VB: Set_Item_ShouldUpdateExistingItemInContainer()
      nameWithType:
        CSharp: StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer()
        VB: StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Set_Item_ShouldUpdateExistingItemInContainer
        path: ''
        startLine: 26984
      syntax:
        content:
          CSharp: public void Set_Item_ShouldUpdateExistingItemInContainer()
          VB: Public Sub Set_Item_ShouldUpdateExistingItemInContainer
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer
      language: CSharp
      name:
        CSharp: Remove_Item_ShouldRemoveItemFromContainer()
        VB: Remove_Item_ShouldRemoveItemFromContainer()
      nameWithType:
        CSharp: StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer()
        VB: StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Remove_Item_ShouldRemoveItemFromContainer
        path: ''
        startLine: 27000
      syntax:
        content:
          CSharp: public void Remove_Item_ShouldRemoveItemFromContainer()
          VB: Public Sub Remove_Item_ShouldRemoveItemFromContainer
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue
      language: CSharp
      name:
        CSharp: Get_Item_ShouldReturnCorrectValue()
        VB: Get_Item_ShouldReturnCorrectValue()
      nameWithType:
        CSharp: StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue()
        VB: StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Get_Item_ShouldReturnCorrectValue
        path: ''
        startLine: 27015
      syntax:
        content:
          CSharp: public void Get_Item_ShouldReturnCorrectValue()
          VB: Public Sub Get_Item_ShouldReturnCorrectValue
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue
      language: CSharp
      name:
        CSharp: Get_GenericItem_ShouldReturnCorrectTypedValue()
        VB: Get_GenericItem_ShouldReturnCorrectTypedValue()
      nameWithType:
        CSharp: StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue()
        VB: StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Get_GenericItem_ShouldReturnCorrectTypedValue
        path: ''
        startLine: 27030
      syntax:
        content:
          CSharp: public void Get_GenericItem_ShouldReturnCorrectTypedValue()
          VB: Public Sub Get_GenericItem_ShouldReturnCorrectTypedValue
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner
      language: CSharp
      name:
        CSharp: Owner_SetAndGet_ShouldReturnCorrectOwner()
        VB: Owner_SetAndGet_ShouldReturnCorrectOwner()
      nameWithType:
        CSharp: StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner()
        VB: StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Owner_SetAndGet_ShouldReturnCorrectOwner
        path: ''
        startLine: 27045
      syntax:
        content:
          CSharp: public void Owner_SetAndGet_ShouldReturnCorrectOwner()
          VB: Public Sub Owner_SetAndGet_ShouldReturnCorrectOwner
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity
      language: CSharp
      name:
        CSharp: Write_And_Read_ShouldMaintainDataIntegrity()
        VB: Write_And_Read_ShouldMaintainDataIntegrity()
      nameWithType:
        CSharp: StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity()
        VB: StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Write_And_Read_ShouldMaintainDataIntegrity
        path: ''
        startLine: 27058
      syntax:
        content:
          CSharp: public void Write_And_Read_ShouldMaintainDataIntegrity()
          VB: Public Sub Write_And_Read_ShouldMaintainDataIntegrity
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_ShouldGenerateSignature
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_ShouldGenerateSignature
      language: CSharp
      name:
        CSharp: Write_ShouldGenerateSignature()
        VB: Write_ShouldGenerateSignature()
      nameWithType:
        CSharp: StorageContainer_Tests.Write_ShouldGenerateSignature()
        VB: StorageContainer_Tests.Write_ShouldGenerateSignature()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_ShouldGenerateSignature()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_ShouldGenerateSignature()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Write_ShouldGenerateSignature
        path: ''
        startLine: 27082
      syntax:
        content:
          CSharp: public void Write_ShouldGenerateSignature()
          VB: Public Sub Write_ShouldGenerateSignature
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_ShouldGenerateSignature*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException
      language: CSharp
      name:
        CSharp: Read_InvalidSignature_ShouldThrowException()
        VB: Read_InvalidSignature_ShouldThrowException()
      nameWithType:
        CSharp: StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException()
        VB: StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Read_InvalidSignature_ShouldThrowException
        path: ''
        startLine: 27102
      syntax:
        content:
          CSharp: public void Read_InvalidSignature_ShouldThrowException()
          VB: Public Sub Read_InvalidSignature_ShouldThrowException
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException
      language: CSharp
      name:
        CSharp: Add_DuplicateKey_ShouldThrowException()
        VB: Add_DuplicateKey_ShouldThrowException()
      nameWithType:
        CSharp: StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException()
        VB: StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Add_DuplicateKey_ShouldThrowException
        path: ''
        startLine: 27130
      syntax:
        content:
          CSharp: public void Add_DuplicateKey_ShouldThrowException()
          VB: Public Sub Add_DuplicateKey_ShouldThrowException
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException
      language: CSharp
      name:
        CSharp: Get_NonExistentKey_ShouldThrowKeyNotFoundException()
        VB: Get_NonExistentKey_ShouldThrowKeyNotFoundException()
      nameWithType:
        CSharp: StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException()
        VB: StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Get_NonExistentKey_ShouldThrowKeyNotFoundException
        path: ''
        startLine: 27142
      syntax:
        content:
          CSharp: public void Get_NonExistentKey_ShouldThrowKeyNotFoundException()
          VB: Public Sub Get_NonExistentKey_ShouldThrowKeyNotFoundException
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException
      commentId: M:GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException
      language: CSharp
      name:
        CSharp: Remove_NonExistentKey_ShouldNotThrowException()
        VB: Remove_NonExistentKey_ShouldNotThrowException()
      nameWithType:
        CSharp: StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException()
        VB: StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException()
        VB: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Remove_NonExistentKey_ShouldNotThrowException
        path: ''
        startLine: 27152
      syntax:
        content:
          CSharp: public void Remove_NonExistentKey_ShouldNotThrowException()
          VB: Public Sub Remove_NonExistentKey_ShouldNotThrowException
      overload: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: GUPS.AntiCheat.Tests.StorageItem_Tests
    commentId: T:GUPS.AntiCheat.Tests.StorageItem_Tests
    language: CSharp
    name:
      CSharp: StorageItem_Tests
      VB: StorageItem_Tests
    nameWithType:
      CSharp: StorageItem_Tests
      VB: StorageItem_Tests
    qualifiedName:
      CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests
      VB: GUPS.AntiCheat.Tests.StorageItem_Tests
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: GUPS.AntiCheat.Tests
    source:
      id: StorageItem_Tests
      path: ''
      startLine: 27186
    summary: "\nTest fixture for testing storage item operations.\n"
    remarks: "\nContains tests for various data types including primitives and Unity-specific structures.\n"
    example: []
    syntax:
      content:
        CSharp: public class StorageItem_Tests
        VB: Public Class StorageItem_Tests
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.PrimitiveTypes_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.PrimitiveTypes_Test
      language: CSharp
      name:
        CSharp: PrimitiveTypes_Test()
        VB: PrimitiveTypes_Test()
      nameWithType:
        CSharp: StorageItem_Tests.PrimitiveTypes_Test()
        VB: StorageItem_Tests.PrimitiveTypes_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.PrimitiveTypes_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.PrimitiveTypes_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: PrimitiveTypes_Test
        path: ''
        startLine: 27189
      syntax:
        content:
          CSharp: public void PrimitiveTypes_Test()
          VB: Public Sub PrimitiveTypes_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.PrimitiveTypes_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.UnityTypes_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.UnityTypes_Test
      language: CSharp
      name:
        CSharp: UnityTypes_Test()
        VB: UnityTypes_Test()
      nameWithType:
        CSharp: StorageItem_Tests.UnityTypes_Test()
        VB: StorageItem_Tests.UnityTypes_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.UnityTypes_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.UnityTypes_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: UnityTypes_Test
        path: ''
        startLine: 27259
      syntax:
        content:
          CSharp: public void UnityTypes_Test()
          VB: Public Sub UnityTypes_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.UnityTypes_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.ReadWrite_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.ReadWrite_Test
      language: CSharp
      name:
        CSharp: ReadWrite_Test()
        VB: ReadWrite_Test()
      nameWithType:
        CSharp: StorageItem_Tests.ReadWrite_Test()
        VB: StorageItem_Tests.ReadWrite_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.ReadWrite_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.ReadWrite_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: ReadWrite_Test
        path: ''
        startLine: 27323
      syntax:
        content:
          CSharp: public void ReadWrite_Test()
          VB: Public Sub ReadWrite_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.ReadWrite_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.ByteArray_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.ByteArray_Test
      language: CSharp
      name:
        CSharp: ByteArray_Test()
        VB: ByteArray_Test()
      nameWithType:
        CSharp: StorageItem_Tests.ByteArray_Test()
        VB: StorageItem_Tests.ByteArray_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.ByteArray_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.ByteArray_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: ByteArray_Test
        path: ''
        startLine: 27346
      syntax:
        content:
          CSharp: public void ByteArray_Test()
          VB: Public Sub ByteArray_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.ByteArray_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.String_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.String_Test
      language: CSharp
      name:
        CSharp: String_Test()
        VB: String_Test()
      nameWithType:
        CSharp: StorageItem_Tests.String_Test()
        VB: StorageItem_Tests.String_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.String_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.String_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: String_Test
        path: ''
        startLine: 27378
      syntax:
        content:
          CSharp: public void String_Test()
          VB: Public Sub String_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.String_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Boolean_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Boolean_Test
      language: CSharp
      name:
        CSharp: Boolean_Test()
        VB: Boolean_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Boolean_Test()
        VB: StorageItem_Tests.Boolean_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Boolean_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Boolean_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Boolean_Test
        path: ''
        startLine: 27410
      syntax:
        content:
          CSharp: public void Boolean_Test()
          VB: Public Sub Boolean_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Boolean_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Int16_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Int16_Test
      language: CSharp
      name:
        CSharp: Int16_Test()
        VB: Int16_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Int16_Test()
        VB: StorageItem_Tests.Int16_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Int16_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Int16_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Int16_Test
        path: ''
        startLine: 27442
      syntax:
        content:
          CSharp: public void Int16_Test()
          VB: Public Sub Int16_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Int16_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Int32_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Int32_Test
      language: CSharp
      name:
        CSharp: Int32_Test()
        VB: Int32_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Int32_Test()
        VB: StorageItem_Tests.Int32_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Int32_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Int32_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Int32_Test
        path: ''
        startLine: 27474
      syntax:
        content:
          CSharp: public void Int32_Test()
          VB: Public Sub Int32_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Int32_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Int64_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Int64_Test
      language: CSharp
      name:
        CSharp: Int64_Test()
        VB: Int64_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Int64_Test()
        VB: StorageItem_Tests.Int64_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Int64_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Int64_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Int64_Test
        path: ''
        startLine: 27506
      syntax:
        content:
          CSharp: public void Int64_Test()
          VB: Public Sub Int64_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Int64_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt16_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.UInt16_Test
      language: CSharp
      name:
        CSharp: UInt16_Test()
        VB: UInt16_Test()
      nameWithType:
        CSharp: StorageItem_Tests.UInt16_Test()
        VB: StorageItem_Tests.UInt16_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt16_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt16_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: UInt16_Test
        path: ''
        startLine: 27538
      syntax:
        content:
          CSharp: public void UInt16_Test()
          VB: Public Sub UInt16_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt16_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt32_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.UInt32_Test
      language: CSharp
      name:
        CSharp: UInt32_Test()
        VB: UInt32_Test()
      nameWithType:
        CSharp: StorageItem_Tests.UInt32_Test()
        VB: StorageItem_Tests.UInt32_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt32_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt32_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: UInt32_Test
        path: ''
        startLine: 27570
      syntax:
        content:
          CSharp: public void UInt32_Test()
          VB: Public Sub UInt32_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt32_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt64_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.UInt64_Test
      language: CSharp
      name:
        CSharp: UInt64_Test()
        VB: UInt64_Test()
      nameWithType:
        CSharp: StorageItem_Tests.UInt64_Test()
        VB: StorageItem_Tests.UInt64_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt64_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt64_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: UInt64_Test
        path: ''
        startLine: 27602
      syntax:
        content:
          CSharp: public void UInt64_Test()
          VB: Public Sub UInt64_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt64_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Single_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Single_Test
      language: CSharp
      name:
        CSharp: Single_Test()
        VB: Single_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Single_Test()
        VB: StorageItem_Tests.Single_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Single_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Single_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Single_Test
        path: ''
        startLine: 27634
      syntax:
        content:
          CSharp: public void Single_Test()
          VB: Public Sub Single_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Single_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Double_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Double_Test
      language: CSharp
      name:
        CSharp: Double_Test()
        VB: Double_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Double_Test()
        VB: StorageItem_Tests.Double_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Double_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Double_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Double_Test
        path: ''
        startLine: 27666
      syntax:
        content:
          CSharp: public void Double_Test()
          VB: Public Sub Double_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Double_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Decimal_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Decimal_Test
      language: CSharp
      name:
        CSharp: Decimal_Test()
        VB: Decimal_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Decimal_Test()
        VB: StorageItem_Tests.Decimal_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Decimal_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Decimal_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Decimal_Test
        path: ''
        startLine: 27698
      syntax:
        content:
          CSharp: public void Decimal_Test()
          VB: Public Sub Decimal_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Decimal_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Char_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Char_Test
      language: CSharp
      name:
        CSharp: Char_Test()
        VB: Char_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Char_Test()
        VB: StorageItem_Tests.Char_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Char_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Char_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Char_Test
        path: ''
        startLine: 27730
      syntax:
        content:
          CSharp: public void Char_Test()
          VB: Public Sub Char_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Char_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Color_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Color_Test
      language: CSharp
      name:
        CSharp: Color_Test()
        VB: Color_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Color_Test()
        VB: StorageItem_Tests.Color_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Color_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Color_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Color_Test
        path: ''
        startLine: 27762
      syntax:
        content:
          CSharp: public void Color_Test()
          VB: Public Sub Color_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Color_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Color32_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Color32_Test
      language: CSharp
      name:
        CSharp: Color32_Test()
        VB: Color32_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Color32_Test()
        VB: StorageItem_Tests.Color32_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Color32_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Color32_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Color32_Test
        path: ''
        startLine: 27794
      syntax:
        content:
          CSharp: public void Color32_Test()
          VB: Public Sub Color32_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Color32_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2_Test
      language: CSharp
      name:
        CSharp: Vector2_Test()
        VB: Vector2_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Vector2_Test()
        VB: StorageItem_Tests.Vector2_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Vector2_Test
        path: ''
        startLine: 27826
      syntax:
        content:
          CSharp: public void Vector2_Test()
          VB: Public Sub Vector2_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2Int_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2Int_Test
      language: CSharp
      name:
        CSharp: Vector2Int_Test()
        VB: Vector2Int_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Vector2Int_Test()
        VB: StorageItem_Tests.Vector2Int_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2Int_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2Int_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Vector2Int_Test
        path: ''
        startLine: 27858
      syntax:
        content:
          CSharp: public void Vector2Int_Test()
          VB: Public Sub Vector2Int_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2Int_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3_Test
      language: CSharp
      name:
        CSharp: Vector3_Test()
        VB: Vector3_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Vector3_Test()
        VB: StorageItem_Tests.Vector3_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Vector3_Test
        path: ''
        startLine: 27890
      syntax:
        content:
          CSharp: public void Vector3_Test()
          VB: Public Sub Vector3_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3Int_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3Int_Test
      language: CSharp
      name:
        CSharp: Vector3Int_Test()
        VB: Vector3Int_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Vector3Int_Test()
        VB: StorageItem_Tests.Vector3Int_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3Int_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3Int_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Vector3Int_Test
        path: ''
        startLine: 27922
      syntax:
        content:
          CSharp: public void Vector3Int_Test()
          VB: Public Sub Vector3Int_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3Int_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector4_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Vector4_Test
      language: CSharp
      name:
        CSharp: Vector4_Test()
        VB: Vector4_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Vector4_Test()
        VB: StorageItem_Tests.Vector4_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector4_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector4_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Vector4_Test
        path: ''
        startLine: 27954
      syntax:
        content:
          CSharp: public void Vector4_Test()
          VB: Public Sub Vector4_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector4_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Quaternion_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Quaternion_Test
      language: CSharp
      name:
        CSharp: Quaternion_Test()
        VB: Quaternion_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Quaternion_Test()
        VB: StorageItem_Tests.Quaternion_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Quaternion_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Quaternion_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Quaternion_Test
        path: ''
        startLine: 27986
      syntax:
        content:
          CSharp: public void Quaternion_Test()
          VB: Public Sub Quaternion_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Quaternion_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Rect_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Rect_Test
      language: CSharp
      name:
        CSharp: Rect_Test()
        VB: Rect_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Rect_Test()
        VB: StorageItem_Tests.Rect_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Rect_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Rect_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Rect_Test
        path: ''
        startLine: 28018
      syntax:
        content:
          CSharp: public void Rect_Test()
          VB: Public Sub Rect_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Rect_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Plane_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Plane_Test
      language: CSharp
      name:
        CSharp: Plane_Test()
        VB: Plane_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Plane_Test()
        VB: StorageItem_Tests.Plane_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Plane_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Plane_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Plane_Test
        path: ''
        startLine: 28050
      syntax:
        content:
          CSharp: public void Plane_Test()
          VB: Public Sub Plane_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Plane_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Ray_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Ray_Test
      language: CSharp
      name:
        CSharp: Ray_Test()
        VB: Ray_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Ray_Test()
        VB: StorageItem_Tests.Ray_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Ray_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Ray_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Ray_Test
        path: ''
        startLine: 28082
      syntax:
        content:
          CSharp: public void Ray_Test()
          VB: Public Sub Ray_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Ray_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Matrix4x4_Test
      commentId: M:GUPS.AntiCheat.Tests.StorageItem_Tests.Matrix4x4_Test
      language: CSharp
      name:
        CSharp: Matrix4x4_Test()
        VB: Matrix4x4_Test()
      nameWithType:
        CSharp: StorageItem_Tests.Matrix4x4_Test()
        VB: StorageItem_Tests.Matrix4x4_Test()
      qualifiedName:
        CSharp: GUPS.AntiCheat.Tests.StorageItem_Tests.Matrix4x4_Test()
        VB: GUPS.AntiCheat.Tests.StorageItem_Tests.Matrix4x4_Test()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: GUPS.AntiCheat.Tests
      source:
        id: Matrix4x4_Test
        path: ''
        startLine: 28114
      syntax:
        content:
          CSharp: public void Matrix4x4_Test()
          VB: Public Sub Matrix4x4_Test
      overload: GUPS.AntiCheat.Tests.StorageItem_Tests.Matrix4x4_Test*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  GUPS.AntiCheat.IWatcher`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IWatcher`1
        name: IWatcher
        nameWithType: IWatcher
        qualifiedName: IWatcher
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.IWatcher`1
        name: IWatcher
        nameWithType: IWatcher
        qualifiedName: IWatcher
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:GUPS.AntiCheat.IWatcher`1'
  GUPS.AntiCheat.IWatcher{IDetectorStatus}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IWatcher`1
        name: IWatcher
        nameWithType: IWatcher
        qualifiedName: IWatcher
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.IDetectorStatus
        name: IDetectorStatus
        nameWithType: IDetectorStatus
        qualifiedName: IDetectorStatus
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.IWatcher`1
        name: IWatcher
        nameWithType: IWatcher
        qualifiedName: IWatcher
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.IDetectorStatus
        name: IDetectorStatus
        nameWithType: IDetectorStatus
        qualifiedName: IDetectorStatus
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.IWatcher`1
    commentId: '!:GUPS.AntiCheat.IWatcher{IDetectorStatus}'
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  GUPS.AntiCheat.AntiCheatMonitor.IsPersistent*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.AntiCheatMonitor.IsPersistent*
        name: IsPersistent
        nameWithType: AntiCheatMonitor.IsPersistent
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.IsPersistent
      VB:
      - id: GUPS.AntiCheat.AntiCheatMonitor.IsPersistent*
        name: IsPersistent
        nameWithType: AntiCheatMonitor.IsPersistent
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.IsPersistent
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.AntiCheatMonitor.IsPersistent
  GUPS.AntiCheat:
    name:
      CSharp:
      - name: GUPS.AntiCheat
        nameWithType: GUPS.AntiCheat
        qualifiedName: GUPS.AntiCheat
      VB:
      - name: GUPS.AntiCheat
        nameWithType: GUPS.AntiCheat
        qualifiedName: GUPS.AntiCheat
    isDefinition: true
    commentId: N:GUPS.AntiCheat
  GUPS.AntiCheat.ESensitiveLevel:
    name:
      CSharp:
      - id: GUPS.AntiCheat.ESensitiveLevel
        name: ESensitiveLevel
        nameWithType: ESensitiveLevel
        qualifiedName: GUPS.AntiCheat.ESensitiveLevel
      VB:
      - id: GUPS.AntiCheat.ESensitiveLevel
        name: ESensitiveLevel
        nameWithType: ESensitiveLevel
        qualifiedName: GUPS.AntiCheat.ESensitiveLevel
    isDefinition: true
    parent: GUPS.AntiCheat
    commentId: T:GUPS.AntiCheat.ESensitiveLevel
  GUPS.AntiCheat.AntiCheatMonitor.SensitiveLevel*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.AntiCheatMonitor.SensitiveLevel*
        name: SensitiveLevel
        nameWithType: AntiCheatMonitor.SensitiveLevel
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.SensitiveLevel
      VB:
      - id: GUPS.AntiCheat.AntiCheatMonitor.SensitiveLevel*
        name: SensitiveLevel
        nameWithType: AntiCheatMonitor.SensitiveLevel
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.SensitiveLevel
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.AntiCheatMonitor.SensitiveLevel
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  GUPS.AntiCheat.AntiCheatMonitor.ThreatLevel*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.AntiCheatMonitor.ThreatLevel*
        name: ThreatLevel
        nameWithType: AntiCheatMonitor.ThreatLevel
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.ThreatLevel
      VB:
      - id: GUPS.AntiCheat.AntiCheatMonitor.ThreatLevel*
        name: ThreatLevel
        nameWithType: AntiCheatMonitor.ThreatLevel
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.ThreatLevel
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.AntiCheatMonitor.ThreatLevel
  TDetector:
    name:
      CSharp:
      - name: TDetector
        nameWithType: TDetector
        qualifiedName: TDetector
      VB:
      - name: TDetector
        nameWithType: TDetector
        qualifiedName: TDetector
    isDefinition: true
    commentId: '!:TDetector'
  '{TDetector}':
    name:
      CSharp:
      - name: TDetector
        nameWithType: TDetector
        qualifiedName: TDetector
      VB:
      - name: TDetector
        nameWithType: TDetector
        qualifiedName: TDetector
    isDefinition: false
    definition: TDetector
    commentId: '!:TDetector'
  GUPS.AntiCheat.AntiCheatMonitor.GetDetector*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.AntiCheatMonitor.GetDetector*
        name: GetDetector
        nameWithType: AntiCheatMonitor.GetDetector
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.GetDetector
      VB:
      - id: GUPS.AntiCheat.AntiCheatMonitor.GetDetector*
        name: GetDetector
        nameWithType: AntiCheatMonitor.GetDetector
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.GetDetector
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.AntiCheatMonitor.GetDetector
  GUPS.AntiCheat.IDetectorStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IDetectorStatus
        name: IDetectorStatus
        nameWithType: IDetectorStatus
        qualifiedName: IDetectorStatus
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.IDetectorStatus
        name: IDetectorStatus
        nameWithType: IDetectorStatus
        qualifiedName: IDetectorStatus
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.AntiCheatMonitor.OnNext*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.AntiCheatMonitor.OnNext*
        name: OnNext
        nameWithType: AntiCheatMonitor.OnNext
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.OnNext
      VB:
      - id: GUPS.AntiCheat.AntiCheatMonitor.OnNext*
        name: OnNext
        nameWithType: AntiCheatMonitor.OnNext
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.OnNext
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.AntiCheatMonitor.OnNext
  GUPS.AntiCheat.Exception:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: Exception
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: Exception
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.AntiCheatMonitor.OnError*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.AntiCheatMonitor.OnError*
        name: OnError
        nameWithType: AntiCheatMonitor.OnError
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.OnError
      VB:
      - id: GUPS.AntiCheat.AntiCheatMonitor.OnError*
        name: OnError
        nameWithType: AntiCheatMonitor.OnError
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.OnError
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.AntiCheatMonitor.OnError
  GUPS.AntiCheat.AntiCheatMonitor.OnCompleted*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.AntiCheatMonitor.OnCompleted*
        name: OnCompleted
        nameWithType: AntiCheatMonitor.OnCompleted
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.OnCompleted
      VB:
      - id: GUPS.AntiCheat.AntiCheatMonitor.OnCompleted*
        name: OnCompleted
        nameWithType: AntiCheatMonitor.OnCompleted
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.OnCompleted
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.AntiCheatMonitor.OnCompleted
  GUPS.AntiCheat.AntiCheatMonitor.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.AntiCheatMonitor.Dispose*
        name: Dispose
        nameWithType: AntiCheatMonitor.Dispose
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.Dispose
      VB:
      - id: GUPS.AntiCheat.AntiCheatMonitor.Dispose*
        name: Dispose
        nameWithType: AntiCheatMonitor.Dispose
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.AntiCheatMonitor.Dispose
  GUPS.AntiCheat.List`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  GUPS.AntiCheat.List{IPunisher}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.IPunisher
        name: IPunisher
        nameWithType: IPunisher
        qualifiedName: IPunisher
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.IPunisher
        name: IPunisher
        nameWithType: IPunisher
        qualifiedName: IPunisher
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.List`1
    commentId: '!:GUPS.AntiCheat.List{IPunisher}'
  GUPS.AntiCheat.UInt32:
    name:
      CSharp:
      - id: GUPS.AntiCheat.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: UInt32
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: UInt32
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.AntiCheatMonitor.GetPunisher*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.AntiCheatMonitor.GetPunisher*
        name: GetPunisher
        nameWithType: AntiCheatMonitor.GetPunisher
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.GetPunisher
      VB:
      - id: GUPS.AntiCheat.AntiCheatMonitor.GetPunisher*
        name: GetPunisher
        nameWithType: AntiCheatMonitor.GetPunisher
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.GetPunisher
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.AntiCheatMonitor.GetPunisher
  GUPS.AntiCheat.AntiCheatMonitor.Awake*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.AntiCheatMonitor.Awake*
        name: Awake
        nameWithType: AntiCheatMonitor.Awake
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.Awake
      VB:
      - id: GUPS.AntiCheat.AntiCheatMonitor.Awake*
        name: Awake
        nameWithType: AntiCheatMonitor.Awake
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.Awake
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.AntiCheatMonitor.Awake
  GUPS.AntiCheat.AntiCheatMonitor.FixedUpdate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.AntiCheatMonitor.FixedUpdate*
        name: FixedUpdate
        nameWithType: AntiCheatMonitor.FixedUpdate
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.FixedUpdate
      VB:
      - id: GUPS.AntiCheat.AntiCheatMonitor.FixedUpdate*
        name: FixedUpdate
        nameWithType: AntiCheatMonitor.FixedUpdate
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor.FixedUpdate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.AntiCheatMonitor.FixedUpdate
  GUPS.AntiCheat.AntiCheatMonitor:
    name:
      CSharp:
      - id: GUPS.AntiCheat.AntiCheatMonitor
        name: AntiCheatMonitor
        nameWithType: AntiCheatMonitor
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor
      VB:
      - id: GUPS.AntiCheat.AntiCheatMonitor
        name: AntiCheatMonitor
        nameWithType: AntiCheatMonitor
        qualifiedName: GUPS.AntiCheat.AntiCheatMonitor
    isDefinition: true
    commentId: T:GUPS.AntiCheat.AntiCheatMonitor
  GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnEnable*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnEnable*
        name: OnEnable
        nameWithType: AntiCheatMonitorEditor.OnEnable
        qualifiedName: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnEnable
      VB:
      - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnEnable*
        name: OnEnable
        nameWithType: AntiCheatMonitorEditor.OnEnable
        qualifiedName: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnEnable
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnEnable
  GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnInspectorGUI*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: AntiCheatMonitorEditor.OnInspectorGUI
        qualifiedName: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnInspectorGUI
      VB:
      - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: AntiCheatMonitorEditor.OnInspectorGUI
        qualifiedName: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnInspectorGUI
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.OnInspectorGUI
  GUPS.AntiCheat.IMonitor[]:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IMonitor
        name: IMonitor
        nameWithType: IMonitor
        qualifiedName: IMonitor
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: GUPS.AntiCheat.IMonitor
        name: IMonitor
        nameWithType: IMonitor
        qualifiedName: IMonitor
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetMonitors*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetMonitors*
        name: GetMonitors
        nameWithType: AntiCheatMonitorEditor.GetMonitors
        qualifiedName: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetMonitors
      VB:
      - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetMonitors*
        name: GetMonitors
        nameWithType: AntiCheatMonitorEditor.GetMonitors
        qualifiedName: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetMonitors
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetMonitors
  GUPS.AntiCheat.IDetector[]:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IDetector
        name: IDetector
        nameWithType: IDetector
        qualifiedName: IDetector
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: GUPS.AntiCheat.IDetector
        name: IDetector
        nameWithType: IDetector
        qualifiedName: IDetector
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetDetectors*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetDetectors*
        name: GetDetectors
        nameWithType: AntiCheatMonitorEditor.GetDetectors
        qualifiedName: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetDetectors
      VB:
      - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetDetectors*
        name: GetDetectors
        nameWithType: AntiCheatMonitorEditor.GetDetectors
        qualifiedName: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetDetectors
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetDetectors
  GUPS.AntiCheat.IPunisher[]:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IPunisher
        name: IPunisher
        nameWithType: IPunisher
        qualifiedName: IPunisher
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: GUPS.AntiCheat.IPunisher
        name: IPunisher
        nameWithType: IPunisher
        qualifiedName: IPunisher
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetPunishers*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetPunishers*
        name: GetPunishers
        nameWithType: AntiCheatMonitorEditor.GetPunishers
        qualifiedName: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetPunishers
      VB:
      - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetPunishers*
        name: GetPunishers
        nameWithType: AntiCheatMonitorEditor.GetPunishers
        qualifiedName: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetPunishers
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.AntiCheatMonitorEditor.GetPunishers
  GUPS.AntiCheat.Editor.AntiCheatMonitorEditor:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor
        name: AntiCheatMonitorEditor
        nameWithType: AntiCheatMonitorEditor
        qualifiedName: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor
      VB:
      - id: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor
        name: AntiCheatMonitorEditor
        nameWithType: AntiCheatMonitorEditor
        qualifiedName: GUPS.AntiCheat.Editor.AntiCheatMonitorEditor
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.AntiCheatMonitorEditor
  GUPS.AntiCheat.Editor:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Editor
        nameWithType: GUPS.AntiCheat.Editor
        qualifiedName: GUPS.AntiCheat.Editor
      VB:
      - name: GUPS.AntiCheat.Editor
        nameWithType: GUPS.AntiCheat.Editor
        qualifiedName: GUPS.AntiCheat.Editor
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Editor
  GUPS.AntiCheat.Editor.ProtectedPropertyDrawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
        name: ProtectedPropertyDrawer
        nameWithType: ProtectedPropertyDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
        name: ProtectedPropertyDrawer
        nameWithType: ProtectedPropertyDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    isDefinition: true
    parent: GUPS.AntiCheat.Editor
    commentId: T:GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
  GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
        name: OnGUI
        nameWithType: ProtectedPropertyDrawer.OnGUI
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: GUPS.AntiCheat.SerializedProperty
        name: SerializedProperty
        nameWithType: SerializedProperty
        qualifiedName: SerializedProperty
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: GUPS.AntiCheat.GUIContent
        name: GUIContent
        nameWithType: GUIContent
        qualifiedName: GUIContent
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
        name: OnGUI
        nameWithType: ProtectedPropertyDrawer.OnGUI
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: GUPS.AntiCheat.SerializedProperty
        name: SerializedProperty
        nameWithType: SerializedProperty
        qualifiedName: SerializedProperty
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: GUPS.AntiCheat.GUIContent
        name: GUIContent
        nameWithType: GUIContent
        qualifiedName: GUIContent
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    commentId: M:GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI(Rect,SerializedProperty,GUIContent)
  GUPS.AntiCheat.Rect:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.SerializedProperty:
    name:
      CSharp:
      - id: GUPS.AntiCheat.SerializedProperty
        name: SerializedProperty
        nameWithType: SerializedProperty
        qualifiedName: SerializedProperty
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.SerializedProperty
        name: SerializedProperty
        nameWithType: SerializedProperty
        qualifiedName: SerializedProperty
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.GUIContent:
    name:
      CSharp:
      - id: GUPS.AntiCheat.GUIContent
        name: GUIContent
        nameWithType: GUIContent
        qualifiedName: GUIContent
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.GUIContent
        name: GUIContent
        nameWithType: GUIContent
        qualifiedName: GUIContent
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
        name: OnGUIProperty
        nameWithType: ProtectedPropertyDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: GUPS.AntiCheat.SerializedProperty
        name: SerializedProperty
        nameWithType: SerializedProperty
        qualifiedName: SerializedProperty
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: GUPS.AntiCheat.GUIContent
        name: GUIContent
        nameWithType: GUIContent
        qualifiedName: GUIContent
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
        name: OnGUIProperty
        nameWithType: ProtectedPropertyDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: GUPS.AntiCheat.SerializedProperty
        name: SerializedProperty
        nameWithType: SerializedProperty
        qualifiedName: SerializedProperty
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: GUPS.AntiCheat.GUIContent
        name: GUIContent
        nameWithType: GUIContent
        qualifiedName: GUIContent
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer
    commentId: M:GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty(Rect,SerializedProperty,GUIContent)
  GUPS.AntiCheat.Editor.ProtectedBoolDrawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedBoolDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedBoolDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedBoolDrawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedBoolDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedBoolDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedBoolDrawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedBoolDrawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedBoolDrawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedBoolDrawer
        name: ProtectedBoolDrawer
        nameWithType: ProtectedBoolDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedBoolDrawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedBoolDrawer
        name: ProtectedBoolDrawer
        nameWithType: ProtectedBoolDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedBoolDrawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedBoolDrawer
  GUPS.AntiCheat.Editor.ProtectedDecimalDrawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedDecimalDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedDecimalDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedDecimalDrawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedDecimalDrawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer
        name: ProtectedDecimalDrawer
        nameWithType: ProtectedDecimalDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer
        name: ProtectedDecimalDrawer
        nameWithType: ProtectedDecimalDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedDecimalDrawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedDecimalDrawer
  GUPS.AntiCheat.Editor.ProtectedDoubleDrawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedDoubleDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedDoubleDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedDoubleDrawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedDoubleDrawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer
        name: ProtectedDoubleDrawer
        nameWithType: ProtectedDoubleDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer
        name: ProtectedDoubleDrawer
        nameWithType: ProtectedDoubleDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedDoubleDrawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedDoubleDrawer
  GUPS.AntiCheat.Editor.ProtectedFloatDrawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedFloatDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedFloatDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedFloatDrawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedFloatDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedFloatDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedFloatDrawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedFloatDrawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedFloatDrawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedFloatDrawer
        name: ProtectedFloatDrawer
        nameWithType: ProtectedFloatDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedFloatDrawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedFloatDrawer
        name: ProtectedFloatDrawer
        nameWithType: ProtectedFloatDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedFloatDrawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedFloatDrawer
  GUPS.AntiCheat.Editor.ProtectedInt32Drawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedInt32Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedInt32Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedInt32Drawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedInt32Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedInt32Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedInt32Drawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedInt32Drawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedInt32Drawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedInt32Drawer
        name: ProtectedInt32Drawer
        nameWithType: ProtectedInt32Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedInt32Drawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedInt32Drawer
        name: ProtectedInt32Drawer
        nameWithType: ProtectedInt32Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedInt32Drawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedInt32Drawer
  GUPS.AntiCheat.Editor.ProtectedInt64Drawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedInt64Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedInt64Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedInt64Drawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedInt64Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedInt64Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedInt64Drawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedInt64Drawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedInt64Drawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedInt64Drawer
        name: ProtectedInt64Drawer
        nameWithType: ProtectedInt64Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedInt64Drawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedInt64Drawer
        name: ProtectedInt64Drawer
        nameWithType: ProtectedInt64Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedInt64Drawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedInt64Drawer
  GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI*
        name: OnGUI
        nameWithType: ProtectedPropertyDrawer.OnGUI
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI*
        name: OnGUI
        nameWithType: ProtectedPropertyDrawer.OnGUI
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUI
  GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedPropertyDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedPropertyDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedPropertyDrawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedQuaternionDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedQuaternionDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer
        name: ProtectedQuaternionDrawer
        nameWithType: ProtectedQuaternionDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer
        name: ProtectedQuaternionDrawer
        nameWithType: ProtectedQuaternionDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedQuaternionDrawer
  GUPS.AntiCheat.Editor.ProtectedStringDrawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedStringDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedStringDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedStringDrawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedStringDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedStringDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedStringDrawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedStringDrawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedStringDrawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedStringDrawer
        name: ProtectedStringDrawer
        nameWithType: ProtectedStringDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedStringDrawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedStringDrawer
        name: ProtectedStringDrawer
        nameWithType: ProtectedStringDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedStringDrawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedStringDrawer
  GUPS.AntiCheat.Editor.ProtectedUInt32Drawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedUInt32Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedUInt32Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedUInt32Drawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedUInt32Drawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer
        name: ProtectedUInt32Drawer
        nameWithType: ProtectedUInt32Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer
        name: ProtectedUInt32Drawer
        nameWithType: ProtectedUInt32Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedUInt32Drawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedUInt32Drawer
  GUPS.AntiCheat.Editor.ProtectedUInt64Drawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedUInt64Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedUInt64Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedUInt64Drawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedUInt64Drawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer
        name: ProtectedUInt64Drawer
        nameWithType: ProtectedUInt64Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer
        name: ProtectedUInt64Drawer
        nameWithType: ProtectedUInt64Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedUInt64Drawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedUInt64Drawer
  GUPS.AntiCheat.Editor.ProtectedVector2Drawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedVector2Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedVector2Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector2Drawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedVector2Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedVector2Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector2Drawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedVector2Drawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedVector2Drawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedVector2Drawer
        name: ProtectedVector2Drawer
        nameWithType: ProtectedVector2Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector2Drawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedVector2Drawer
        name: ProtectedVector2Drawer
        nameWithType: ProtectedVector2Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector2Drawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedVector2Drawer
  GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedVector2IntDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedVector2IntDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer
        name: ProtectedVector2IntDrawer
        nameWithType: ProtectedVector2IntDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer
        name: ProtectedVector2IntDrawer
        nameWithType: ProtectedVector2IntDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedVector2IntDrawer
  GUPS.AntiCheat.Editor.ProtectedVector3Drawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedVector3Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedVector3Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector3Drawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedVector3Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedVector3Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector3Drawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedVector3Drawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedVector3Drawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedVector3Drawer
        name: ProtectedVector3Drawer
        nameWithType: ProtectedVector3Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector3Drawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedVector3Drawer
        name: ProtectedVector3Drawer
        nameWithType: ProtectedVector3Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector3Drawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedVector3Drawer
  GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedVector3IntDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedVector3IntDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer
        name: ProtectedVector3IntDrawer
        nameWithType: ProtectedVector3IntDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer
        name: ProtectedVector3IntDrawer
        nameWithType: ProtectedVector3IntDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedVector3IntDrawer
  GUPS.AntiCheat.Editor.ProtectedVector4Drawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedVector4Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedVector4Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector4Drawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedVector4Drawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedVector4Drawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector4Drawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedVector4Drawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedVector4Drawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedVector4Drawer
        name: ProtectedVector4Drawer
        nameWithType: ProtectedVector4Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector4Drawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedVector4Drawer
        name: ProtectedVector4Drawer
        nameWithType: ProtectedVector4Drawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector4Drawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedVector4Drawer
  GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer.OnGUIProperty*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedVector4IntDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer.OnGUIProperty
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer.OnGUIProperty*
        name: OnGUIProperty
        nameWithType: ProtectedVector4IntDrawer.OnGUIProperty
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer.OnGUIProperty
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer.OnGUIProperty
  GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer
        name: ProtectedVector4IntDrawer
        nameWithType: ProtectedVector4IntDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer
      VB:
      - id: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer
        name: ProtectedVector4IntDrawer
        nameWithType: ProtectedVector4IntDrawer
        qualifiedName: GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.ProtectedVector4IntDrawer
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  GUPS.AntiCheat.GUIStyle:
    name:
      CSharp:
      - id: GUPS.AntiCheat.GUIStyle
        name: GUIStyle
        nameWithType: GUIStyle
        qualifiedName: GUIStyle
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.GUIStyle
        name: GUIStyle
        nameWithType: GUIStyle
        qualifiedName: GUIStyle
        isExternal: true
    isDefinition: true
    commentId: '!:GUPS.AntiCheat.GUIStyle'
  GUPS.AntiCheat.Editor.Helper.StyleHelper.DarkBackground*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.Helper.StyleHelper.DarkBackground*
        name: DarkBackground
        nameWithType: StyleHelper.DarkBackground
        qualifiedName: GUPS.AntiCheat.Editor.Helper.StyleHelper.DarkBackground
      VB:
      - id: GUPS.AntiCheat.Editor.Helper.StyleHelper.DarkBackground*
        name: DarkBackground
        nameWithType: StyleHelper.DarkBackground
        qualifiedName: GUPS.AntiCheat.Editor.Helper.StyleHelper.DarkBackground
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.Helper.StyleHelper.DarkBackground
  GUPS.AntiCheat.Editor.Helper.StyleHelper:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.Helper.StyleHelper
        name: StyleHelper
        nameWithType: StyleHelper
        qualifiedName: GUPS.AntiCheat.Editor.Helper.StyleHelper
      VB:
      - id: GUPS.AntiCheat.Editor.Helper.StyleHelper
        name: StyleHelper
        nameWithType: StyleHelper
        qualifiedName: GUPS.AntiCheat.Editor.Helper.StyleHelper
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.Helper.StyleHelper
  GUPS.AntiCheat.Texture2D:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Texture2D
        name: Texture2D
        nameWithType: Texture2D
        qualifiedName: Texture2D
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Texture2D
        name: Texture2D
        nameWithType: Texture2D
        qualifiedName: Texture2D
        isExternal: true
    isDefinition: true
    commentId: '!:GUPS.AntiCheat.Texture2D'
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  GUPS.AntiCheat.Color:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Color
        name: Color
        nameWithType: Color
        qualifiedName: Color
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Color
        name: Color
        nameWithType: Color
        qualifiedName: Color
        isExternal: true
    isDefinition: true
    commentId: '!:GUPS.AntiCheat.Color'
  GUPS.AntiCheat.Editor.Helper.TextureHelper.MakeTexture*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.Helper.TextureHelper.MakeTexture*
        name: MakeTexture
        nameWithType: TextureHelper.MakeTexture
        qualifiedName: GUPS.AntiCheat.Editor.Helper.TextureHelper.MakeTexture
      VB:
      - id: GUPS.AntiCheat.Editor.Helper.TextureHelper.MakeTexture*
        name: MakeTexture
        nameWithType: TextureHelper.MakeTexture
        qualifiedName: GUPS.AntiCheat.Editor.Helper.TextureHelper.MakeTexture
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.Helper.TextureHelper.MakeTexture
  GUPS.AntiCheat.Editor.Helper.TextureHelper:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.Helper.TextureHelper
        name: TextureHelper
        nameWithType: TextureHelper
        qualifiedName: GUPS.AntiCheat.Editor.Helper.TextureHelper
      VB:
      - id: GUPS.AntiCheat.Editor.Helper.TextureHelper
        name: TextureHelper
        nameWithType: TextureHelper
        qualifiedName: GUPS.AntiCheat.Editor.Helper.TextureHelper
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.Helper.TextureHelper
  GUPS.AntiCheat.Editor.Helper:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Editor.Helper
        nameWithType: GUPS.AntiCheat.Editor.Helper
        qualifiedName: GUPS.AntiCheat.Editor.Helper
      VB:
      - name: GUPS.AntiCheat.Editor.Helper
        nameWithType: GUPS.AntiCheat.Editor.Helper
        qualifiedName: GUPS.AntiCheat.Editor.Helper
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Editor.Helper
  GUPS.AntiCheat.SettingsProvider:
    name:
      CSharp:
      - id: GUPS.AntiCheat.SettingsProvider
        name: SettingsProvider
        nameWithType: SettingsProvider
        qualifiedName: SettingsProvider
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.SettingsProvider
        name: SettingsProvider
        nameWithType: SettingsProvider
        qualifiedName: SettingsProvider
        isExternal: true
    isDefinition: true
    commentId: '!:GUPS.AntiCheat.SettingsProvider'
  GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow.CreateAntiCheatSettingsProvider*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow.CreateAntiCheatSettingsProvider*
        name: CreateAntiCheatSettingsProvider
        nameWithType: GlobalSettingsWindow.CreateAntiCheatSettingsProvider
        qualifiedName: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow.CreateAntiCheatSettingsProvider
      VB:
      - id: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow.CreateAntiCheatSettingsProvider*
        name: CreateAntiCheatSettingsProvider
        nameWithType: GlobalSettingsWindow.CreateAntiCheatSettingsProvider
        qualifiedName: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow.CreateAntiCheatSettingsProvider
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow.CreateAntiCheatSettingsProvider
  GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow
        name: GlobalSettingsWindow
        nameWithType: GlobalSettingsWindow
        qualifiedName: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow
      VB:
      - id: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow
        name: GlobalSettingsWindow
        nameWithType: GlobalSettingsWindow
        qualifiedName: GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Editor.Window.GlobalSettingsWindow
  GUPS.AntiCheat.Editor.Window:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Editor.Window
        nameWithType: GUPS.AntiCheat.Editor.Window
        qualifiedName: GUPS.AntiCheat.Editor.Window
      VB:
      - name: GUPS.AntiCheat.Editor.Window
        nameWithType: GUPS.AntiCheat.Editor.Window
        qualifiedName: GUPS.AntiCheat.Editor.Window
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Editor.Window
  GUPS.AntiCheat.Core.Detector.IDetector:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Detector.IDetector
        name: IDetector
        nameWithType: IDetector
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetector
      VB:
      - id: GUPS.AntiCheat.Core.Detector.IDetector
        name: IDetector
        nameWithType: IDetector
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetector
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Detector.IDetector
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  GUPS.AntiCheat.Core.Detector.IDetector.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Detector.IDetector.Name*
        name: Name
        nameWithType: IDetector.Name
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetector.Name
      VB:
      - id: GUPS.AntiCheat.Core.Detector.IDetector.Name*
        name: Name
        nameWithType: IDetector.Name
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetector.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Detector.IDetector.Name
  GUPS.AntiCheat.Core.Detector.IDetector.IsSupported*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Detector.IDetector.IsSupported*
        name: IsSupported
        nameWithType: IDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetector.IsSupported
      VB:
      - id: GUPS.AntiCheat.Core.Detector.IDetector.IsSupported*
        name: IsSupported
        nameWithType: IDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetector.IsSupported
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Detector.IDetector.IsSupported
  GUPS.AntiCheat.Core.Detector.IDetector.IsActive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Detector.IDetector.IsActive*
        name: IsActive
        nameWithType: IDetector.IsActive
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetector.IsActive
      VB:
      - id: GUPS.AntiCheat.Core.Detector.IDetector.IsActive*
        name: IsActive
        nameWithType: IDetector.IsActive
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetector.IsActive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Detector.IDetector.IsActive
  GUPS.AntiCheat.Core.Detector.IDetector.PossibleCheatingDetected*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Detector.IDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: IDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetector.PossibleCheatingDetected
      VB:
      - id: GUPS.AntiCheat.Core.Detector.IDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: IDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetector.PossibleCheatingDetected
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Detector.IDetector.PossibleCheatingDetected
  GUPS.AntiCheat.Core.Detector.IDetectorStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Detector.IDetectorStatus
        name: IDetectorStatus
        nameWithType: IDetectorStatus
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetectorStatus
      VB:
      - id: GUPS.AntiCheat.Core.Detector.IDetectorStatus
        name: IDetectorStatus
        nameWithType: IDetectorStatus
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetectorStatus
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Detector.IDetectorStatus
  GUPS.AntiCheat.Core.Detector.IDetectorStatus.PossibilityOfFalsePositive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Detector.IDetectorStatus.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: IDetectorStatus.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetectorStatus.PossibilityOfFalsePositive
      VB:
      - id: GUPS.AntiCheat.Core.Detector.IDetectorStatus.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: IDetectorStatus.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Core.Detector.IDetectorStatus.PossibilityOfFalsePositive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Detector.IDetectorStatus.PossibilityOfFalsePositive
  GUPS.AntiCheat.Core.Detector:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Core.Detector
        nameWithType: GUPS.AntiCheat.Core.Detector
        qualifiedName: GUPS.AntiCheat.Core.Detector
      VB:
      - name: GUPS.AntiCheat.Core.Detector
        nameWithType: GUPS.AntiCheat.Core.Detector
        qualifiedName: GUPS.AntiCheat.Core.Detector
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Core.Detector
  GUPS.AntiCheat.Core.Hash:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Core.Hash
        nameWithType: GUPS.AntiCheat.Core.Hash
        qualifiedName: GUPS.AntiCheat.Core.Hash
      VB:
      - name: GUPS.AntiCheat.Core.Hash
        nameWithType: GUPS.AntiCheat.Core.Hash
        qualifiedName: GUPS.AntiCheat.Core.Hash
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Core.Hash
  GUPS.AntiCheat.Core.Hash.EHashAlgorithm:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
        name: EHashAlgorithm
        nameWithType: EHashAlgorithm
        qualifiedName: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
      VB:
      - id: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
        name: EHashAlgorithm
        nameWithType: EHashAlgorithm
        qualifiedName: GUPS.AntiCheat.Core.Hash.EHashAlgorithm
    isDefinition: true
    parent: GUPS.AntiCheat.Core.Hash
    commentId: T:GUPS.AntiCheat.Core.Hash.EHashAlgorithm
  GUPS.AntiCheat.Core.Hash.HashHelper:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper
        name: HashHelper
        nameWithType: HashHelper
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper
      VB:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper
        name: HashHelper
        nameWithType: HashHelper
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Hash.HashHelper
  GUPS.AntiCheat.String:
    name:
      CSharp:
      - id: GUPS.AntiCheat.String
        name: String
        nameWithType: String
        qualifiedName: String
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.String
        name: String
        nameWithType: String
        qualifiedName: String
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Core.Hash.HashHelper.GetName*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper.GetName*
        name: GetName
        nameWithType: HashHelper.GetName
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper.GetName
      VB:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper.GetName*
        name: GetName
        nameWithType: HashHelper.GetName
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper.GetName
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Hash.HashHelper.GetName
  GUPS.AntiCheat.HashAlgorithm:
    name:
      CSharp:
      - id: GUPS.AntiCheat.HashAlgorithm
        name: HashAlgorithm
        nameWithType: HashAlgorithm
        qualifiedName: HashAlgorithm
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.HashAlgorithm
        name: HashAlgorithm
        nameWithType: HashAlgorithm
        qualifiedName: HashAlgorithm
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm*
        name: GetHashAlgorithm
        nameWithType: HashHelper.GetHashAlgorithm
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm
      VB:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm*
        name: GetHashAlgorithm
        nameWithType: HashHelper.GetHashAlgorithm
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Hash.HashHelper.GetHashAlgorithm
  System.Byte[]:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash*
        name: ComputeHash
        nameWithType: HashHelper.ComputeHash
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash
      VB:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash*
        name: ComputeHash
        nameWithType: HashHelper.ComputeHash
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Hash.HashHelper.ComputeHash
  GUPS.AntiCheat.Stream:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: Stream
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: Stream
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Core.Hash.HashHelper.CompareHashes*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper.CompareHashes*
        name: CompareHashes
        nameWithType: HashHelper.CompareHashes
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper.CompareHashes
      VB:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper.CompareHashes*
        name: CompareHashes
        nameWithType: HashHelper.CompareHashes
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper.CompareHashes
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Hash.HashHelper.CompareHashes
  GUPS.AntiCheat.Core.Hash.HashHelper.ToHex*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper.ToHex*
        name: ToHex
        nameWithType: HashHelper.ToHex
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper.ToHex
      VB:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper.ToHex*
        name: ToHex
        nameWithType: HashHelper.ToHex
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper.ToHex
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Hash.HashHelper.ToHex
  GUPS.AntiCheat.Core.Hash.HashHelper.FromHex*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper.FromHex*
        name: FromHex
        nameWithType: HashHelper.FromHex
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper.FromHex
      VB:
      - id: GUPS.AntiCheat.Core.Hash.HashHelper.FromHex*
        name: FromHex
        nameWithType: HashHelper.FromHex
        qualifiedName: GUPS.AntiCheat.Core.Hash.HashHelper.FromHex
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Hash.HashHelper.FromHex
  GUPS.AntiCheat.Core.HoneyPot.IHoneyPot:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot
        name: IHoneyPot
        nameWithType: IHoneyPot
        qualifiedName: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot
      VB:
      - id: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot
        name: IHoneyPot
        nameWithType: IHoneyPot
        qualifiedName: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.HoneyPot.IHoneyPot
  GUPS.AntiCheat.Core.HoneyPot.IHoneyPot.PlaceHoneyPot*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot.PlaceHoneyPot*
        name: PlaceHoneyPot
        nameWithType: IHoneyPot.PlaceHoneyPot
        qualifiedName: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot.PlaceHoneyPot
      VB:
      - id: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot.PlaceHoneyPot*
        name: PlaceHoneyPot
        nameWithType: IHoneyPot.PlaceHoneyPot
        qualifiedName: GUPS.AntiCheat.Core.HoneyPot.IHoneyPot.PlaceHoneyPot
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.HoneyPot.IHoneyPot.PlaceHoneyPot
  GUPS.AntiCheat.Core.HoneyPot:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Core.HoneyPot
        nameWithType: GUPS.AntiCheat.Core.HoneyPot
        qualifiedName: GUPS.AntiCheat.Core.HoneyPot
      VB:
      - name: GUPS.AntiCheat.Core.HoneyPot
        nameWithType: GUPS.AntiCheat.Core.HoneyPot
        qualifiedName: GUPS.AntiCheat.Core.HoneyPot
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Core.HoneyPot
  GUPS.AntiCheat.Core.Integrity.IDataIntegrity:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Integrity.IDataIntegrity
        name: IDataIntegrity
        nameWithType: IDataIntegrity
        qualifiedName: GUPS.AntiCheat.Core.Integrity.IDataIntegrity
      VB:
      - id: GUPS.AntiCheat.Core.Integrity.IDataIntegrity
        name: IDataIntegrity
        nameWithType: IDataIntegrity
        qualifiedName: GUPS.AntiCheat.Core.Integrity.IDataIntegrity
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Integrity.IDataIntegrity
  GUPS.AntiCheat.Core.Integrity.IDataIntegrity.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.HasIntegrity*
        name: HasIntegrity
        nameWithType: IDataIntegrity.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.HasIntegrity*
        name: HasIntegrity
        nameWithType: IDataIntegrity.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Integrity.IDataIntegrity.HasIntegrity
  GUPS.AntiCheat.Core.Integrity.IDataIntegrity.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: IDataIntegrity.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: IDataIntegrity.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Core.Integrity.IDataIntegrity.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Integrity.IDataIntegrity.CheckIntegrity
  GUPS.AntiCheat.Core.Integrity:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Core.Integrity
        nameWithType: GUPS.AntiCheat.Core.Integrity
        qualifiedName: GUPS.AntiCheat.Core.Integrity
      VB:
      - name: GUPS.AntiCheat.Core.Integrity
        nameWithType: GUPS.AntiCheat.Core.Integrity
        qualifiedName: GUPS.AntiCheat.Core.Integrity
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Core.Integrity
  GUPS.AntiCheat.Core.Monitor.IMonitor.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Name*
        name: Name
        nameWithType: IMonitor.Name
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.Name
      VB:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Name*
        name: Name
        nameWithType: IMonitor.Name
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Monitor.IMonitor.Name
  GUPS.AntiCheat.Core.Monitor.IMonitor.IsStarted*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.IsStarted*
        name: IsStarted
        nameWithType: IMonitor.IsStarted
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.IsStarted
      VB:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.IsStarted*
        name: IsStarted
        nameWithType: IMonitor.IsStarted
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.IsStarted
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Monitor.IMonitor.IsStarted
  GUPS.AntiCheat.Core.Monitor.IMonitor.IsPaused*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.IsPaused*
        name: IsPaused
        nameWithType: IMonitor.IsPaused
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.IsPaused
      VB:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.IsPaused*
        name: IsPaused
        nameWithType: IMonitor.IsPaused
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.IsPaused
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Monitor.IMonitor.IsPaused
  GUPS.AntiCheat.Core.Monitor.IMonitor.Start*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Start*
        name: Start
        nameWithType: IMonitor.Start
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.Start
      VB:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Start*
        name: Start
        nameWithType: IMonitor.Start
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.Start
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Monitor.IMonitor.Start
  GUPS.AntiCheat.Core.Monitor.IMonitor.Pause*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Pause*
        name: Pause
        nameWithType: IMonitor.Pause
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.Pause
      VB:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Pause*
        name: Pause
        nameWithType: IMonitor.Pause
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.Pause
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Monitor.IMonitor.Pause
  GUPS.AntiCheat.Core.Monitor.IMonitor.Resume*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Resume*
        name: Resume
        nameWithType: IMonitor.Resume
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.Resume
      VB:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Resume*
        name: Resume
        nameWithType: IMonitor.Resume
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.Resume
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Monitor.IMonitor.Resume
  GUPS.AntiCheat.Core.Monitor.IMonitor.Stop*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Stop*
        name: Stop
        nameWithType: IMonitor.Stop
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.Stop
      VB:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor.Stop*
        name: Stop
        nameWithType: IMonitor.Stop
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor.Stop
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Monitor.IMonitor.Stop
  GUPS.AntiCheat.Core.Monitor.IMonitor:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor
        name: IMonitor
        nameWithType: IMonitor
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor
      VB:
      - id: GUPS.AntiCheat.Core.Monitor.IMonitor
        name: IMonitor
        nameWithType: IMonitor
        qualifiedName: GUPS.AntiCheat.Core.Monitor.IMonitor
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Monitor.IMonitor
  GUPS.AntiCheat.Core.Monitor:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Core.Monitor
        nameWithType: GUPS.AntiCheat.Core.Monitor
        qualifiedName: GUPS.AntiCheat.Core.Monitor
      VB:
      - name: GUPS.AntiCheat.Core.Monitor
        nameWithType: GUPS.AntiCheat.Core.Monitor
        qualifiedName: GUPS.AntiCheat.Core.Monitor
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Core.Monitor
  GUPS.AntiCheat.Core.Obfuscate.IObfuscated:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Obfuscate.IObfuscated
        name: IObfuscated
        nameWithType: IObfuscated
        qualifiedName: GUPS.AntiCheat.Core.Obfuscate.IObfuscated
      VB:
      - id: GUPS.AntiCheat.Core.Obfuscate.IObfuscated
        name: IObfuscated
        nameWithType: IObfuscated
        qualifiedName: GUPS.AntiCheat.Core.Obfuscate.IObfuscated
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Obfuscate.IObfuscated
  GUPS.AntiCheat.Core.Obfuscate.IObfuscated.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Obfuscate.IObfuscated.Obfuscate*
        name: Obfuscate
        nameWithType: IObfuscated.Obfuscate
        qualifiedName: GUPS.AntiCheat.Core.Obfuscate.IObfuscated.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Core.Obfuscate.IObfuscated.Obfuscate*
        name: Obfuscate
        nameWithType: IObfuscated.Obfuscate
        qualifiedName: GUPS.AntiCheat.Core.Obfuscate.IObfuscated.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Obfuscate.IObfuscated.Obfuscate
  GUPS.AntiCheat.Core.Obfuscate:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Core.Obfuscate
        nameWithType: GUPS.AntiCheat.Core.Obfuscate
        qualifiedName: GUPS.AntiCheat.Core.Obfuscate
      VB:
      - name: GUPS.AntiCheat.Core.Obfuscate
        nameWithType: GUPS.AntiCheat.Core.Obfuscate
        qualifiedName: GUPS.AntiCheat.Core.Obfuscate
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Core.Obfuscate
  GUPS.AntiCheat.Core.Protected.IProtected:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Protected.IProtected
        name: IProtected
        nameWithType: IProtected
        qualifiedName: GUPS.AntiCheat.Core.Protected.IProtected
      VB:
      - id: GUPS.AntiCheat.Core.Protected.IProtected
        name: IProtected
        nameWithType: IProtected
        qualifiedName: GUPS.AntiCheat.Core.Protected.IProtected
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Protected.IProtected
  GUPS.AntiCheat.Core.Protected.IProtected.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Protected.IProtected.Value*
        name: Value
        nameWithType: IProtected.Value
        qualifiedName: GUPS.AntiCheat.Core.Protected.IProtected.Value
      VB:
      - id: GUPS.AntiCheat.Core.Protected.IProtected.Value*
        name: Value
        nameWithType: IProtected.Value
        qualifiedName: GUPS.AntiCheat.Core.Protected.IProtected.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Protected.IProtected.Value
  GUPS.AntiCheat.Core.Protected:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Core.Protected
        nameWithType: GUPS.AntiCheat.Core.Protected
        qualifiedName: GUPS.AntiCheat.Core.Protected
      VB:
      - name: GUPS.AntiCheat.Core.Protected
        nameWithType: GUPS.AntiCheat.Core.Protected
        qualifiedName: GUPS.AntiCheat.Core.Protected
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Core.Protected
  GUPS.AntiCheat.Core.Punisher.IPunisher:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher
        name: IPunisher
        nameWithType: IPunisher
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher
      VB:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher
        name: IPunisher
        nameWithType: IPunisher
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Punisher.IPunisher
  GUPS.AntiCheat.Core.Punisher.IPunisher.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher.Name*
        name: Name
        nameWithType: IPunisher.Name
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher.Name
      VB:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher.Name*
        name: Name
        nameWithType: IPunisher.Name
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Punisher.IPunisher.Name
  GUPS.AntiCheat.Core.Punisher.IPunisher.IsSupported*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher.IsSupported*
        name: IsSupported
        nameWithType: IPunisher.IsSupported
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher.IsSupported
      VB:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher.IsSupported*
        name: IsSupported
        nameWithType: IPunisher.IsSupported
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher.IsSupported
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Punisher.IPunisher.IsSupported
  GUPS.AntiCheat.Core.Punisher.IPunisher.IsActive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher.IsActive*
        name: IsActive
        nameWithType: IPunisher.IsActive
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher.IsActive
      VB:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher.IsActive*
        name: IsActive
        nameWithType: IPunisher.IsActive
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher.IsActive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Punisher.IPunisher.IsActive
  GUPS.AntiCheat.Core.Punisher.IPunisher.PunishOnce*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher.PunishOnce*
        name: PunishOnce
        nameWithType: IPunisher.PunishOnce
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher.PunishOnce
      VB:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher.PunishOnce*
        name: PunishOnce
        nameWithType: IPunisher.PunishOnce
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher.PunishOnce
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Punisher.IPunisher.PunishOnce
  GUPS.AntiCheat.Core.Punisher.IPunisher.HasPunished*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher.HasPunished*
        name: HasPunished
        nameWithType: IPunisher.HasPunished
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher.HasPunished
      VB:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher.HasPunished*
        name: HasPunished
        nameWithType: IPunisher.HasPunished
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher.HasPunished
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Punisher.IPunisher.HasPunished
  GUPS.AntiCheat.Core.Punisher.IPunisher.Punish*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher.Punish*
        name: Punish
        nameWithType: IPunisher.Punish
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher.Punish
      VB:
      - id: GUPS.AntiCheat.Core.Punisher.IPunisher.Punish*
        name: Punish
        nameWithType: IPunisher.Punish
        qualifiedName: GUPS.AntiCheat.Core.Punisher.IPunisher.Punish
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Punisher.IPunisher.Punish
  GUPS.AntiCheat.Core.Punisher:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Core.Punisher
        nameWithType: GUPS.AntiCheat.Core.Punisher
        qualifiedName: GUPS.AntiCheat.Core.Punisher
      VB:
      - name: GUPS.AntiCheat.Core.Punisher
        nameWithType: GUPS.AntiCheat.Core.Punisher
        qualifiedName: GUPS.AntiCheat.Core.Punisher
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Core.Punisher
  GUPS.AntiCheat.Core.Random.IRandomProvider:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Random.IRandomProvider
        name: IRandomProvider
        nameWithType: IRandomProvider
        qualifiedName: GUPS.AntiCheat.Core.Random.IRandomProvider
      VB:
      - id: GUPS.AntiCheat.Core.Random.IRandomProvider
        name: IRandomProvider
        nameWithType: IRandomProvider
        qualifiedName: GUPS.AntiCheat.Core.Random.IRandomProvider
    isDefinition: true
    parent: GUPS.AntiCheat.Core.Random
    commentId: T:GUPS.AntiCheat.Core.Random.IRandomProvider
  GUPS.AntiCheat.Int32:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: Int32
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: Int32
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32*
        name: RandomInt32
        nameWithType: IRandomProvider.RandomInt32
        qualifiedName: GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32
      VB:
      - id: GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32*
        name: RandomInt32
        nameWithType: IRandomProvider.RandomInt32
        qualifiedName: GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Random.IRandomProvider.RandomInt32
  GUPS.AntiCheat.Core.Random:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Core.Random
        nameWithType: GUPS.AntiCheat.Core.Random
        qualifiedName: GUPS.AntiCheat.Core.Random
      VB:
      - name: GUPS.AntiCheat.Core.Random
        nameWithType: GUPS.AntiCheat.Core.Random
        qualifiedName: GUPS.AntiCheat.Core.Random
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Core.Random
  GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32*
        name: RandomInt32
        nameWithType: PseudoRandom.RandomInt32
        qualifiedName: GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32
      VB:
      - id: GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32*
        name: RandomInt32
        nameWithType: PseudoRandom.RandomInt32
        qualifiedName: GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Random.PseudoRandom.RandomInt32
  GUPS.AntiCheat.Core.Random.PseudoRandom:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Random.PseudoRandom
        name: PseudoRandom
        nameWithType: PseudoRandom
        qualifiedName: GUPS.AntiCheat.Core.Random.PseudoRandom
      VB:
      - id: GUPS.AntiCheat.Core.Random.PseudoRandom
        name: PseudoRandom
        nameWithType: PseudoRandom
        qualifiedName: GUPS.AntiCheat.Core.Random.PseudoRandom
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Random.PseudoRandom
  GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32*
        name: RandomInt32
        nameWithType: TrueRandom.RandomInt32
        qualifiedName: GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32
      VB:
      - id: GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32*
        name: RandomInt32
        nameWithType: TrueRandom.RandomInt32
        qualifiedName: GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Random.TrueRandom.RandomInt32
  GUPS.AntiCheat.Core.Random.TrueRandom:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Random.TrueRandom
        name: TrueRandom
        nameWithType: TrueRandom
        qualifiedName: GUPS.AntiCheat.Core.Random.TrueRandom
      VB:
      - id: GUPS.AntiCheat.Core.Random.TrueRandom
        name: TrueRandom
        nameWithType: TrueRandom
        qualifiedName: GUPS.AntiCheat.Core.Random.TrueRandom
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Random.TrueRandom
  GUPS.AntiCheat.Core.Storage:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Core.Storage
        nameWithType: GUPS.AntiCheat.Core.Storage
        qualifiedName: GUPS.AntiCheat.Core.Storage
      VB:
      - name: GUPS.AntiCheat.Core.Storage
        nameWithType: GUPS.AntiCheat.Core.Storage
        qualifiedName: GUPS.AntiCheat.Core.Storage
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Core.Storage
  GUPS.AntiCheat.Core.Storage.EStorageType:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.EStorageType
        name: EStorageType
        nameWithType: EStorageType
        qualifiedName: GUPS.AntiCheat.Core.Storage.EStorageType
      VB:
      - id: GUPS.AntiCheat.Core.Storage.EStorageType
        name: EStorageType
        nameWithType: EStorageType
        qualifiedName: GUPS.AntiCheat.Core.Storage.EStorageType
    isDefinition: true
    parent: GUPS.AntiCheat.Core.Storage
    commentId: T:GUPS.AntiCheat.Core.Storage.EStorageType
  GUPS.AntiCheat.IWriteAble:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IWriteAble
        name: IWriteAble
        nameWithType: IWriteAble
        qualifiedName: IWriteAble
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.IWriteAble
        name: IWriteAble
        nameWithType: IWriteAble
        qualifiedName: IWriteAble
        isExternal: true
    isDefinition: true
    commentId: '!:GUPS.AntiCheat.IWriteAble'
  GUPS.AntiCheat.Core.Storage.StorageContainer.Owner*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Owner*
        name: Owner
        nameWithType: StorageContainer.Owner
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Owner
      VB:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Owner*
        name: Owner
        nameWithType: StorageContainer.Owner
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Owner
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Storage.StorageContainer.Owner
  GUPS.AntiCheat.Core.Storage.StorageContainer.Signature*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Signature*
        name: Signature
        nameWithType: StorageContainer.Signature
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Signature
      VB:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Signature*
        name: Signature
        nameWithType: StorageContainer.Signature
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Signature
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Storage.StorageContainer.Signature
  GUPS.AntiCheat.Core.Storage.StorageContainer:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer
        name: StorageContainer
        nameWithType: StorageContainer
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer
      VB:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer
        name: StorageContainer
        nameWithType: StorageContainer
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Storage.StorageContainer
  GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor*
        name: StorageContainer
        nameWithType: StorageContainer.StorageContainer
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.StorageContainer
      VB:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor*
        name: StorageContainer
        nameWithType: StorageContainer.StorageContainer
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.StorageContainer
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Storage.StorageContainer.#ctor
  GUPS.AntiCheat.Core.Storage.StorageContainer.Has*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Has*
        name: Has
        nameWithType: StorageContainer.Has
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Has
      VB:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Has*
        name: Has
        nameWithType: StorageContainer.Has
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Has
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Storage.StorageContainer.Has
  GUPS.AntiCheat.Object:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Object
        name: Object
        nameWithType: Object
        qualifiedName: Object
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Object
        name: Object
        nameWithType: Object
        qualifiedName: Object
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Core.Storage.StorageContainer.Add*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Add*
        name: Add
        nameWithType: StorageContainer.Add
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Add
      VB:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Add*
        name: Add
        nameWithType: StorageContainer.Add
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Add
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Storage.StorageContainer.Add
  GUPS.AntiCheat.Core.Storage.StorageContainer.Set*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Set*
        name: Set
        nameWithType: StorageContainer.Set
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Set
      VB:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Set*
        name: Set
        nameWithType: StorageContainer.Set
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Set
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Storage.StorageContainer.Set
  GUPS.AntiCheat.Core.Storage.StorageContainer.Remove*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Remove*
        name: Remove
        nameWithType: StorageContainer.Remove
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Remove
      VB:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Remove*
        name: Remove
        nameWithType: StorageContainer.Remove
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Remove
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Storage.StorageContainer.Remove
  GUPS.AntiCheat.Core.Storage.StorageContainer.Get*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Get*
        name: Get
        nameWithType: StorageContainer.Get
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Get
      VB:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Get*
        name: Get
        nameWithType: StorageContainer.Get
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Get
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Storage.StorageContainer.Get
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  GUPS.AntiCheat.Core.Storage.StorageContainer.Clear*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Clear*
        name: Clear
        nameWithType: StorageContainer.Clear
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Clear
      VB:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Clear*
        name: Clear
        nameWithType: StorageContainer.Clear
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Clear
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Storage.StorageContainer.Clear
  System.IO:
    name:
      CSharp:
      - name: System.IO
        nameWithType: System.IO
        qualifiedName: System.IO
        isExternal: true
      VB:
      - name: System.IO
        nameWithType: System.IO
        qualifiedName: System.IO
    isDefinition: true
    commentId: N:System.IO
  System.IO.Stream:
    name:
      CSharp:
      - id: System.IO.Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: System.IO.Stream
        isExternal: true
      VB:
      - id: System.IO.Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: System.IO.Stream
        isExternal: true
    isDefinition: true
    parent: System.IO
    commentId: T:System.IO.Stream
  GUPS.AntiCheat.Core.Storage.StorageContainer.Read*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Read*
        name: Read
        nameWithType: StorageContainer.Read
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Read
      VB:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Read*
        name: Read
        nameWithType: StorageContainer.Read
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Read
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Storage.StorageContainer.Read
  GUPS.AntiCheat.Core.Storage.StorageContainer.Write*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Write*
        name: Write
        nameWithType: StorageContainer.Write
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Write
      VB:
      - id: GUPS.AntiCheat.Core.Storage.StorageContainer.Write*
        name: Write
        nameWithType: StorageContainer.Write
        qualifiedName: GUPS.AntiCheat.Core.Storage.StorageContainer.Write
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Storage.StorageContainer.Write
  GUPS.AntiCheat.Core.Threat.IThreatRated.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Threat.IThreatRated.ThreatRating*
        name: ThreatRating
        nameWithType: IThreatRated.ThreatRating
        qualifiedName: GUPS.AntiCheat.Core.Threat.IThreatRated.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Core.Threat.IThreatRated.ThreatRating*
        name: ThreatRating
        nameWithType: IThreatRated.ThreatRating
        qualifiedName: GUPS.AntiCheat.Core.Threat.IThreatRated.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Core.Threat.IThreatRated.ThreatRating
  GUPS.AntiCheat.Core.Threat.IThreatRated:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Threat.IThreatRated
        name: IThreatRated
        nameWithType: IThreatRated
        qualifiedName: GUPS.AntiCheat.Core.Threat.IThreatRated
      VB:
      - id: GUPS.AntiCheat.Core.Threat.IThreatRated
        name: IThreatRated
        nameWithType: IThreatRated
        qualifiedName: GUPS.AntiCheat.Core.Threat.IThreatRated
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Threat.IThreatRated
  GUPS.AntiCheat.Core.Threat:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Core.Threat
        nameWithType: GUPS.AntiCheat.Core.Threat
        qualifiedName: GUPS.AntiCheat.Core.Threat
      VB:
      - name: GUPS.AntiCheat.Core.Threat
        nameWithType: GUPS.AntiCheat.Core.Threat
        qualifiedName: GUPS.AntiCheat.Core.Threat
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Core.Threat
  GUPS.AntiCheat.Core.Watch.IWatchAble`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Watch.IWatchAble`1
        name: IWatchAble
        nameWithType: IWatchAble
        qualifiedName: GUPS.AntiCheat.Core.Watch.IWatchAble
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TWatchedSubject
        nameWithType: TWatchedSubject
        qualifiedName: TWatchedSubject
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Core.Watch.IWatchAble`1
        name: IWatchAble
        nameWithType: IWatchAble
        qualifiedName: GUPS.AntiCheat.Core.Watch.IWatchAble
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TWatchedSubject
        nameWithType: TWatchedSubject
        qualifiedName: TWatchedSubject
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Watch.IWatchAble`1
  GUPS.AntiCheat.Core.Watch.IWatchedSubject:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Watch.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: GUPS.AntiCheat.Core.Watch.IWatchedSubject
      VB:
      - id: GUPS.AntiCheat.Core.Watch.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: GUPS.AntiCheat.Core.Watch.IWatchedSubject
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Watch.IWatchedSubject
  GUPS.AntiCheat.Core.Watch.IWatcher`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Core.Watch.IWatcher`1
        name: IWatcher
        nameWithType: IWatcher
        qualifiedName: GUPS.AntiCheat.Core.Watch.IWatcher
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TWatchedSubject
        nameWithType: TWatchedSubject
        qualifiedName: TWatchedSubject
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Core.Watch.IWatcher`1
        name: IWatcher
        nameWithType: IWatcher
        qualifiedName: GUPS.AntiCheat.Core.Watch.IWatcher
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TWatchedSubject
        nameWithType: TWatchedSubject
        qualifiedName: TWatchedSubject
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Core.Watch.IWatcher`1
  GUPS.AntiCheat.Core.Watch:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Core.Watch
        nameWithType: GUPS.AntiCheat.Core.Watch
        qualifiedName: GUPS.AntiCheat.Core.Watch
      VB:
      - name: GUPS.AntiCheat.Core.Watch
        nameWithType: GUPS.AntiCheat.Core.Watch
        qualifiedName: GUPS.AntiCheat.Core.Watch
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Core.Watch
  GUPS.AntiCheat.IDetector:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IDetector
        name: IDetector
        nameWithType: IDetector
        qualifiedName: IDetector
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.IDetector
        name: IDetector
        nameWithType: IDetector
        qualifiedName: IDetector
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Detector.ADetector.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.Name*
        name: Name
        nameWithType: ADetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Name
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.Name*
        name: Name
        nameWithType: ADetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.ADetector.Name
  GUPS.AntiCheat.Detector.ADetector.IsSupported*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.IsSupported*
        name: IsSupported
        nameWithType: ADetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.IsSupported
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.IsSupported*
        name: IsSupported
        nameWithType: ADetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.IsSupported
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.ADetector.IsSupported
  GUPS.AntiCheat.Detector.ADetector.IsActive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.IsActive*
        name: IsActive
        nameWithType: ADetector.IsActive
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.IsActive
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.IsActive*
        name: IsActive
        nameWithType: ADetector.IsActive
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.IsActive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.ADetector.IsActive
  System.UInt32:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt32
  GUPS.AntiCheat.Detector.ADetector.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.ThreatRating*
        name: ThreatRating
        nameWithType: ADetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.ThreatRating*
        name: ThreatRating
        nameWithType: ADetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.ADetector.ThreatRating
  GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: ADetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: ADetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
  GUPS.AntiCheat.IDisposable:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: IDisposable
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: IDisposable
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.IObserver`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  GUPS.AntiCheat.IObserver{IDetectorStatus}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.IDetectorStatus
        name: IDetectorStatus
        nameWithType: IDetectorStatus
        qualifiedName: IDetectorStatus
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.IDetectorStatus
        name: IDetectorStatus
        nameWithType: IDetectorStatus
        qualifiedName: IDetectorStatus
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.IObserver`1
    commentId: '!:GUPS.AntiCheat.IObserver{IDetectorStatus}'
  GUPS.AntiCheat.Detector.ADetector.Subscribe*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.Subscribe*
        name: Subscribe
        nameWithType: ADetector.Subscribe
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Subscribe
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.Subscribe*
        name: Subscribe
        nameWithType: ADetector.Subscribe
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Subscribe
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.ADetector.Subscribe
  GUPS.AntiCheat.Detector.ADetector.Notify*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.Notify*
        name: Notify
        nameWithType: ADetector.Notify
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Notify
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.Notify*
        name: Notify
        nameWithType: ADetector.Notify
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Notify
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.ADetector.Notify
  GUPS.AntiCheat.Detector.ADetector.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.Dispose*
        name: Dispose
        nameWithType: ADetector.Dispose
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Dispose
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.Dispose*
        name: Dispose
        nameWithType: ADetector.Dispose
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.ADetector.Dispose
  GUPS.AntiCheat.Detector.ADetector.OnCompleted*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.OnCompleted*
        name: OnCompleted
        nameWithType: ADetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.OnCompleted
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.OnCompleted*
        name: OnCompleted
        nameWithType: ADetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.OnCompleted
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.ADetector.OnCompleted
  GUPS.AntiCheat.Detector.ADetector.OnError*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.OnError*
        name: OnError
        nameWithType: ADetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.OnError
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.OnError*
        name: OnError
        nameWithType: ADetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.OnError
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.ADetector.OnError
  GUPS.AntiCheat.IWatchedSubject:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: IWatchedSubject
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: IWatchedSubject
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Detector.ADetector.OnNext*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.OnNext*
        name: OnNext
        nameWithType: ADetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.OnNext
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.OnNext*
        name: OnNext
        nameWithType: ADetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.OnNext
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.ADetector.OnNext
  GUPS.AntiCheat.Detector.ADetector.Awake*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.Awake*
        name: Awake
        nameWithType: ADetector.Awake
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Awake
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.Awake*
        name: Awake
        nameWithType: ADetector.Awake
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Awake
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.ADetector.Awake
  GUPS.AntiCheat.Detector.ADetector:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector
        name: ADetector
        nameWithType: ADetector
        qualifiedName: GUPS.AntiCheat.Detector.ADetector
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector
        name: ADetector
        nameWithType: ADetector
        qualifiedName: GUPS.AntiCheat.Detector.ADetector
    isDefinition: true
    parent: GUPS.AntiCheat.Detector
    commentId: T:GUPS.AntiCheat.Detector.ADetector
  GUPS.AntiCheat.Detector.CheatingDetectionEvent`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionEvent`1
        name: CheatingDetectionEvent
        nameWithType: CheatingDetectionEvent
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionEvent
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionEvent`1
        name: CheatingDetectionEvent
        nameWithType: CheatingDetectionEvent
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionEvent
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Detector.CheatingDetectionEvent`1
  GUPS.AntiCheat.Detector:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Detector
        nameWithType: GUPS.AntiCheat.Detector
        qualifiedName: GUPS.AntiCheat.Detector
      VB:
      - name: GUPS.AntiCheat.Detector
        nameWithType: GUPS.AntiCheat.Detector
        qualifiedName: GUPS.AntiCheat.Detector
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Detector
  GUPS.AntiCheat.Detector.ADetector.IsActive:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.IsActive
        name: IsActive
        nameWithType: ADetector.IsActive
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.IsActive
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.IsActive
        name: IsActive
        nameWithType: ADetector.IsActive
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.IsActive
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.ADetector
    commentId: P:GUPS.AntiCheat.Detector.ADetector.IsActive
  GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver{IDetectorStatus}):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver{IDetectorStatus})
        name: Subscribe
        nameWithType: ADetector.Subscribe
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.IDetectorStatus
        name: IDetectorStatus
        nameWithType: IDetectorStatus
        qualifiedName: IDetectorStatus
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver{IDetectorStatus})
        name: Subscribe
        nameWithType: ADetector.Subscribe
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.IDetectorStatus
        name: IDetectorStatus
        nameWithType: IDetectorStatus
        qualifiedName: IDetectorStatus
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.ADetector
    commentId: M:GUPS.AntiCheat.Detector.ADetector.Subscribe(IObserver{IDetectorStatus})
  GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
        name: Notify
        nameWithType: ADetector.Notify
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Notify
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.IDetectorStatus
        name: IDetectorStatus
        nameWithType: IDetectorStatus
        qualifiedName: IDetectorStatus
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
        name: Notify
        nameWithType: ADetector.Notify
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Notify
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.IDetectorStatus
        name: IDetectorStatus
        nameWithType: IDetectorStatus
        qualifiedName: IDetectorStatus
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.ADetector
    commentId: M:GUPS.AntiCheat.Detector.ADetector.Notify(IDetectorStatus)
  GUPS.AntiCheat.Detector.ADetector.Dispose:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.Dispose
        name: Dispose
        nameWithType: ADetector.Dispose
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.Dispose
        name: Dispose
        nameWithType: ADetector.Dispose
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.ADetector
    commentId: M:GUPS.AntiCheat.Detector.ADetector.Dispose
  GUPS.AntiCheat.Detector.ADetector.Awake:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.Awake
        name: Awake
        nameWithType: ADetector.Awake
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Awake
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.Awake
        name: Awake
        nameWithType: ADetector.Awake
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Awake
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.ADetector
    commentId: M:GUPS.AntiCheat.Detector.ADetector.Awake
  GUPS.AntiCheat.Detector.ADetector.Name:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.Name
        name: Name
        nameWithType: ADetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Name
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.Name
        name: Name
        nameWithType: ADetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.Name
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.ADetector
    commentId: P:GUPS.AntiCheat.Detector.ADetector.Name
  GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.Name*
        name: Name
        nameWithType: PrimitiveCheatingDetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.Name
      VB:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.Name*
        name: Name
        nameWithType: PrimitiveCheatingDetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.Name
  GUPS.AntiCheat.Detector.ADetector.IsSupported:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.IsSupported
        name: IsSupported
        nameWithType: ADetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.IsSupported
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.IsSupported
        name: IsSupported
        nameWithType: ADetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.IsSupported
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.ADetector
    commentId: P:GUPS.AntiCheat.Detector.ADetector.IsSupported
  GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.IsSupported*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.IsSupported*
        name: IsSupported
        nameWithType: PrimitiveCheatingDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.IsSupported
      VB:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.IsSupported*
        name: IsSupported
        nameWithType: PrimitiveCheatingDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.IsSupported
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.IsSupported
  GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibilityOfFalsePositive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: PrimitiveCheatingDetector.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibilityOfFalsePositive
      VB:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: PrimitiveCheatingDetector.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibilityOfFalsePositive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibilityOfFalsePositive
  GUPS.AntiCheat.Detector.ADetector.ThreatRating:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.ThreatRating
        name: ThreatRating
        nameWithType: ADetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.ThreatRating
        name: ThreatRating
        nameWithType: ADetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.ThreatRating
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.ADetector
    commentId: P:GUPS.AntiCheat.Detector.ADetector.ThreatRating
  GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.ThreatRating*
        name: ThreatRating
        nameWithType: PrimitiveCheatingDetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.ThreatRating*
        name: ThreatRating
        nameWithType: PrimitiveCheatingDetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.ThreatRating
  GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
        name: PossibleCheatingDetected
        nameWithType: ADetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
        name: PossibleCheatingDetected
        nameWithType: ADetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.ADetector
    commentId: P:GUPS.AntiCheat.Detector.ADetector.PossibleCheatingDetected
  GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibleCheatingDetected*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: PrimitiveCheatingDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibleCheatingDetected
      VB:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: PrimitiveCheatingDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibleCheatingDetected
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.PossibleCheatingDetected
  GUPS.AntiCheat.Detector.CheatingDetectionEvent{GUPS.AntiCheat.Detector.CheatingDetectionStatus}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionEvent`1
        name: CheatingDetectionEvent
        nameWithType: CheatingDetectionEvent
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionEvent
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus
        name: CheatingDetectionStatus
        nameWithType: CheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionStatus
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionEvent`1
        name: CheatingDetectionEvent
        nameWithType: CheatingDetectionEvent
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionEvent
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus
        name: CheatingDetectionStatus
        nameWithType: CheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionStatus
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Detector.CheatingDetectionEvent`1
    parent: GUPS.AntiCheat.Detector
    commentId: T:GUPS.AntiCheat.Detector.CheatingDetectionEvent{GUPS.AntiCheat.Detector.CheatingDetectionStatus}
  GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
        name: OnNext
        nameWithType: ADetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.OnNext
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: IWatchedSubject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
        name: OnNext
        nameWithType: ADetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.OnNext
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: IWatchedSubject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.ADetector
    commentId: M:GUPS.AntiCheat.Detector.ADetector.OnNext(IWatchedSubject)
  GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnNext*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnNext*
        name: OnNext
        nameWithType: PrimitiveCheatingDetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnNext
      VB:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnNext*
        name: OnNext
        nameWithType: PrimitiveCheatingDetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnNext
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnNext
  GUPS.AntiCheat.Detector.ADetector.OnError(Exception):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
        name: OnError
        nameWithType: ADetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.OnError
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
        name: OnError
        nameWithType: ADetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.OnError
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.ADetector
    commentId: M:GUPS.AntiCheat.Detector.ADetector.OnError(Exception)
  GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnError*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnError*
        name: OnError
        nameWithType: PrimitiveCheatingDetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnError
      VB:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnError*
        name: OnError
        nameWithType: PrimitiveCheatingDetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnError
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnError
  GUPS.AntiCheat.Detector.ADetector.OnCompleted:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.ADetector.OnCompleted
        name: OnCompleted
        nameWithType: ADetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.OnCompleted
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Detector.ADetector.OnCompleted
        name: OnCompleted
        nameWithType: ADetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.ADetector.OnCompleted
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.ADetector
    commentId: M:GUPS.AntiCheat.Detector.ADetector.OnCompleted
  GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCompleted*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCompleted*
        name: OnCompleted
        nameWithType: PrimitiveCheatingDetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCompleted
      VB:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCompleted*
        name: OnCompleted
        nameWithType: PrimitiveCheatingDetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCompleted
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector.OnCompleted
  GUPS.AntiCheat.Detector.PrimitiveCheatingDetector:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector
        name: PrimitiveCheatingDetector
        nameWithType: PrimitiveCheatingDetector
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector
      VB:
      - id: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector
        name: PrimitiveCheatingDetector
        nameWithType: PrimitiveCheatingDetector
        qualifiedName: GUPS.AntiCheat.Detector.PrimitiveCheatingDetector
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Detector.PrimitiveCheatingDetector
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Name*
        name: Name
        nameWithType: DeviceTimeCheatingDetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Name
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Name*
        name: Name
        nameWithType: DeviceTimeCheatingDetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Name
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.IsSupported*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.IsSupported*
        name: IsSupported
        nameWithType: DeviceTimeCheatingDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.IsSupported
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.IsSupported*
        name: IsSupported
        nameWithType: DeviceTimeCheatingDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.IsSupported
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.IsSupported
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.ThreatRating*
        name: ThreatRating
        nameWithType: DeviceTimeCheatingDetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.ThreatRating*
        name: ThreatRating
        nameWithType: DeviceTimeCheatingDetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.ThreatRating
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.PossibleCheatingDetected*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: DeviceTimeCheatingDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.PossibleCheatingDetected
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: DeviceTimeCheatingDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.PossibleCheatingDetected
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.PossibleCheatingDetected
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnNext*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnNext*
        name: OnNext
        nameWithType: DeviceTimeCheatingDetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnNext
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnNext*
        name: OnNext
        nameWithType: DeviceTimeCheatingDetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnNext
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnNext
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnError*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnError*
        name: OnError
        nameWithType: DeviceTimeCheatingDetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnError
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnError*
        name: OnError
        nameWithType: DeviceTimeCheatingDetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnError
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnError
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCompleted*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCompleted*
        name: OnCompleted
        nameWithType: DeviceTimeCheatingDetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCompleted
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCompleted*
        name: OnCompleted
        nameWithType: DeviceTimeCheatingDetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCompleted
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnCompleted
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.UseInternetTime*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.UseInternetTime*
        name: UseInternetTime
        nameWithType: DeviceTimeCheatingDetector.UseInternetTime
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.UseInternetTime
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.UseInternetTime*
        name: UseInternetTime
        nameWithType: DeviceTimeCheatingDetector.UseInternetTime
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.UseInternetTime
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.UseInternetTime
  GUPS.AntiCheat.DateTime:
    name:
      CSharp:
      - id: GUPS.AntiCheat.DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Awake*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Awake*
        name: Awake
        nameWithType: DeviceTimeCheatingDetector.Awake
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Awake
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Awake*
        name: Awake
        nameWithType: DeviceTimeCheatingDetector.Awake
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Awake
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.Awake
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.FixedUpdate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.FixedUpdate*
        name: FixedUpdate
        nameWithType: DeviceTimeCheatingDetector.FixedUpdate
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.FixedUpdate
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.FixedUpdate*
        name: FixedUpdate
        nameWithType: DeviceTimeCheatingDetector.FixedUpdate
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.FixedUpdate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.FixedUpdate
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationFocus*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationFocus*
        name: OnApplicationFocus
        nameWithType: DeviceTimeCheatingDetector.OnApplicationFocus
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationFocus
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationFocus*
        name: OnApplicationFocus
        nameWithType: DeviceTimeCheatingDetector.OnApplicationFocus
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationFocus
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationFocus
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationPause*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationPause*
        name: OnApplicationPause
        nameWithType: DeviceTimeCheatingDetector.OnApplicationPause
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationPause
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationPause*
        name: OnApplicationPause
        nameWithType: DeviceTimeCheatingDetector.OnApplicationPause
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationPause
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector.OnApplicationPause
  GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector
        name: DeviceTimeCheatingDetector
        nameWithType: DeviceTimeCheatingDetector
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector
      VB:
      - id: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector
        name: DeviceTimeCheatingDetector
        nameWithType: DeviceTimeCheatingDetector
        qualifiedName: GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Detector.DeviceTimeCheatingDetector
  GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Name*
        name: Name
        nameWithType: GameTimeCheatingDetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Name
      VB:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Name*
        name: Name
        nameWithType: GameTimeCheatingDetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Name
  GUPS.AntiCheat.Detector.GameTimeCheatingDetector.IsSupported*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.IsSupported*
        name: IsSupported
        nameWithType: GameTimeCheatingDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.IsSupported
      VB:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.IsSupported*
        name: IsSupported
        nameWithType: GameTimeCheatingDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.IsSupported
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.IsSupported
  GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibilityOfFalsePositive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: GameTimeCheatingDetector.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibilityOfFalsePositive
      VB:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: GameTimeCheatingDetector.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibilityOfFalsePositive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibilityOfFalsePositive
  GUPS.AntiCheat.Detector.GameTimeCheatingDetector.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.ThreatRating*
        name: ThreatRating
        nameWithType: GameTimeCheatingDetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.ThreatRating*
        name: ThreatRating
        nameWithType: GameTimeCheatingDetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.ThreatRating
  GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibleCheatingDetected*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: GameTimeCheatingDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibleCheatingDetected
      VB:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: GameTimeCheatingDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibleCheatingDetected
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.PossibleCheatingDetected
  GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnNext*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnNext*
        name: OnNext
        nameWithType: GameTimeCheatingDetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnNext
      VB:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnNext*
        name: OnNext
        nameWithType: GameTimeCheatingDetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnNext
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnNext
  GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnError*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnError*
        name: OnError
        nameWithType: GameTimeCheatingDetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnError
      VB:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnError*
        name: OnError
        nameWithType: GameTimeCheatingDetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnError
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnError
  GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCompleted*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCompleted*
        name: OnCompleted
        nameWithType: GameTimeCheatingDetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCompleted
      VB:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCompleted*
        name: OnCompleted
        nameWithType: GameTimeCheatingDetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCompleted
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnCompleted
  GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Awake*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Awake*
        name: Awake
        nameWithType: GameTimeCheatingDetector.Awake
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Awake
      VB:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Awake*
        name: Awake
        nameWithType: GameTimeCheatingDetector.Awake
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Awake
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Awake
  GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Update*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Update*
        name: Update
        nameWithType: GameTimeCheatingDetector.Update
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Update
      VB:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Update*
        name: Update
        nameWithType: GameTimeCheatingDetector.Update
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Update
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.Update
  GUPS.AntiCheat.Scene:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Scene
        name: Scene
        nameWithType: Scene
        qualifiedName: Scene
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Scene
        name: Scene
        nameWithType: Scene
        qualifiedName: Scene
        isExternal: true
    isDefinition: true
    commentId: '!:GUPS.AntiCheat.Scene'
  GUPS.AntiCheat.LoadSceneMode:
    name:
      CSharp:
      - id: GUPS.AntiCheat.LoadSceneMode
        name: LoadSceneMode
        nameWithType: LoadSceneMode
        qualifiedName: LoadSceneMode
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.LoadSceneMode
        name: LoadSceneMode
        nameWithType: LoadSceneMode
        qualifiedName: LoadSceneMode
        isExternal: true
    isDefinition: true
    commentId: '!:GUPS.AntiCheat.LoadSceneMode'
  GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnLevelFinishedLoading*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnLevelFinishedLoading*
        name: OnLevelFinishedLoading
        nameWithType: GameTimeCheatingDetector.OnLevelFinishedLoading
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnLevelFinishedLoading
      VB:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnLevelFinishedLoading*
        name: OnLevelFinishedLoading
        nameWithType: GameTimeCheatingDetector.OnLevelFinishedLoading
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnLevelFinishedLoading
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.GameTimeCheatingDetector.OnLevelFinishedLoading
  GUPS.AntiCheat.Detector.GameTimeCheatingDetector:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector
        name: GameTimeCheatingDetector
        nameWithType: GameTimeCheatingDetector
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector
      VB:
      - id: GUPS.AntiCheat.Detector.GameTimeCheatingDetector
        name: GameTimeCheatingDetector
        nameWithType: GameTimeCheatingDetector
        qualifiedName: GUPS.AntiCheat.Detector.GameTimeCheatingDetector
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Detector.GameTimeCheatingDetector
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  GUPS.AntiCheat.Detector.CheatingDetectionStatus.PossibilityOfFalsePositive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: CheatingDetectionStatus.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionStatus.PossibilityOfFalsePositive
      VB:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: CheatingDetectionStatus.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionStatus.PossibilityOfFalsePositive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.CheatingDetectionStatus.PossibilityOfFalsePositive
  GUPS.AntiCheat.Detector.CheatingDetectionStatus.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus.ThreatRating*
        name: ThreatRating
        nameWithType: CheatingDetectionStatus.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionStatus.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus.ThreatRating*
        name: ThreatRating
        nameWithType: CheatingDetectionStatus.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionStatus.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.CheatingDetectionStatus.ThreatRating
  GUPS.AntiCheat.Detector.CheatingDetectionStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus
        name: CheatingDetectionStatus
        nameWithType: CheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionStatus
      VB:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus
        name: CheatingDetectionStatus
        nameWithType: CheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionStatus
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Detector.CheatingDetectionStatus
  GUPS.AntiCheat.Detector.CheatingDetectionStatus.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus.#ctor*
        name: CheatingDetectionStatus
        nameWithType: CheatingDetectionStatus.CheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionStatus.CheatingDetectionStatus
      VB:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionStatus.#ctor*
        name: CheatingDetectionStatus
        nameWithType: CheatingDetectionStatus.CheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionStatus.CheatingDetectionStatus
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.CheatingDetectionStatus.#ctor
  GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCheatingDetectionEvent:
    commentId: F:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCheatingDetectionEvent
  GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Name*
        name: Name
        nameWithType: AndroidDeviceCheatingDetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Name
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Name*
        name: Name
        nameWithType: AndroidDeviceCheatingDetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Name
  GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.IsSupported*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.IsSupported*
        name: IsSupported
        nameWithType: AndroidDeviceCheatingDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.IsSupported
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.IsSupported*
        name: IsSupported
        nameWithType: AndroidDeviceCheatingDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.IsSupported
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.IsSupported
  GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibilityOfFalsePositive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: AndroidDeviceCheatingDetector.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibilityOfFalsePositive
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: AndroidDeviceCheatingDetector.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibilityOfFalsePositive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibilityOfFalsePositive
  GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.ThreatRating*
        name: ThreatRating
        nameWithType: AndroidDeviceCheatingDetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.ThreatRating*
        name: ThreatRating
        nameWithType: AndroidDeviceCheatingDetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.ThreatRating
  GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibleCheatingDetected*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: AndroidDeviceCheatingDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibleCheatingDetected
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: AndroidDeviceCheatingDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibleCheatingDetected
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.PossibleCheatingDetected
  GUPS.AntiCheat.Detector.CheatingDetectionEvent{GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionEvent`1
        name: CheatingDetectionEvent
        nameWithType: CheatingDetectionEvent
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionEvent
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
        name: AndroidCheatingDetectionStatus
        nameWithType: AndroidCheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Detector.CheatingDetectionEvent`1
        name: CheatingDetectionEvent
        nameWithType: CheatingDetectionEvent
        qualifiedName: GUPS.AntiCheat.Detector.CheatingDetectionEvent
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
        name: AndroidCheatingDetectionStatus
        nameWithType: AndroidCheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Detector.CheatingDetectionEvent`1
    parent: GUPS.AntiCheat.Detector
    commentId: T:GUPS.AntiCheat.Detector.CheatingDetectionEvent{GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus}
  GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnNext*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnNext*
        name: OnNext
        nameWithType: AndroidDeviceCheatingDetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnNext
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnNext*
        name: OnNext
        nameWithType: AndroidDeviceCheatingDetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnNext
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnNext
  GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnError*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnError*
        name: OnError
        nameWithType: AndroidDeviceCheatingDetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnError
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnError*
        name: OnError
        nameWithType: AndroidDeviceCheatingDetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnError
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnError
  GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCompleted*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCompleted*
        name: OnCompleted
        nameWithType: AndroidDeviceCheatingDetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCompleted
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCompleted*
        name: OnCompleted
        nameWithType: AndroidDeviceCheatingDetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCompleted
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.OnCompleted
  GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Awake*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Awake*
        name: Awake
        nameWithType: AndroidDeviceCheatingDetector.Awake
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Awake
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Awake*
        name: Awake
        nameWithType: AndroidDeviceCheatingDetector.Awake
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Awake
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector.Awake
  GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector
        name: AndroidDeviceCheatingDetector
        nameWithType: AndroidDeviceCheatingDetector
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector
        name: AndroidDeviceCheatingDetector
        nameWithType: AndroidDeviceCheatingDetector
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Detector.Android.AndroidDeviceCheatingDetector
  GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCheatingDetectionEvent:
    commentId: F:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCheatingDetectionEvent
  GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Name*
        name: Name
        nameWithType: AndroidPackageTamperingDetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Name
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Name*
        name: Name
        nameWithType: AndroidPackageTamperingDetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Name
  GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.IsSupported*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.IsSupported*
        name: IsSupported
        nameWithType: AndroidPackageTamperingDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.IsSupported
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.IsSupported*
        name: IsSupported
        nameWithType: AndroidPackageTamperingDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.IsSupported
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.IsSupported
  GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibilityOfFalsePositive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: AndroidPackageTamperingDetector.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibilityOfFalsePositive
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: AndroidPackageTamperingDetector.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibilityOfFalsePositive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibilityOfFalsePositive
  GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.ThreatRating*
        name: ThreatRating
        nameWithType: AndroidPackageTamperingDetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.ThreatRating*
        name: ThreatRating
        nameWithType: AndroidPackageTamperingDetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.ThreatRating
  GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibleCheatingDetected*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: AndroidPackageTamperingDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibleCheatingDetected
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: AndroidPackageTamperingDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibleCheatingDetected
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.PossibleCheatingDetected
  GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnNext*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnNext*
        name: OnNext
        nameWithType: AndroidPackageTamperingDetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnNext
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnNext*
        name: OnNext
        nameWithType: AndroidPackageTamperingDetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnNext
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnNext
  GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnError*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnError*
        name: OnError
        nameWithType: AndroidPackageTamperingDetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnError
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnError*
        name: OnError
        nameWithType: AndroidPackageTamperingDetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnError
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnError
  GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCompleted*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCompleted*
        name: OnCompleted
        nameWithType: AndroidPackageTamperingDetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCompleted
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCompleted*
        name: OnCompleted
        nameWithType: AndroidPackageTamperingDetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCompleted
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.OnCompleted
  GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Awake*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Awake*
        name: Awake
        nameWithType: AndroidPackageTamperingDetector.Awake
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Awake
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Awake*
        name: Awake
        nameWithType: AndroidPackageTamperingDetector.Awake
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Awake
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector.Awake
  GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector
        name: AndroidPackageTamperingDetector
        nameWithType: AndroidPackageTamperingDetector
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector
        name: AndroidPackageTamperingDetector
        nameWithType: AndroidPackageTamperingDetector
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Detector.Android.AndroidPackageTamperingDetector
  GUPS.AntiCheat.Detector.Android:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Detector.Android
        nameWithType: GUPS.AntiCheat.Detector.Android
        qualifiedName: GUPS.AntiCheat.Detector.Android
      VB:
      - name: GUPS.AntiCheat.Detector.Android
        nameWithType: GUPS.AntiCheat.Detector.Android
        qualifiedName: GUPS.AntiCheat.Detector.Android
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Detector.Android
  GUPS.AntiCheat.Detector.Android.EAndroidCheatingType:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
        name: EAndroidCheatingType
        nameWithType: EAndroidCheatingType
        qualifiedName: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
      VB:
      - id: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
        name: EAndroidCheatingType
        nameWithType: EAndroidCheatingType
        qualifiedName: GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.Android
    commentId: T:GUPS.AntiCheat.Detector.Android.EAndroidCheatingType
  GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus
        name: IAndroidCheatingDetectionStatus
        nameWithType: IAndroidCheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus
      VB:
      - id: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus
        name: IAndroidCheatingDetectionStatus
        nameWithType: IAndroidCheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.Android
    commentId: T:GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus
  GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.PossibilityOfFalsePositive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: AndroidCheatingDetectionStatus.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.PossibilityOfFalsePositive
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: AndroidCheatingDetectionStatus.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.PossibilityOfFalsePositive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.PossibilityOfFalsePositive
  GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.ThreatRating*
        name: ThreatRating
        nameWithType: AndroidCheatingDetectionStatus.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.ThreatRating*
        name: ThreatRating
        nameWithType: AndroidCheatingDetectionStatus.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.ThreatRating
  GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.UNKNOWN:
    commentId: F:GUPS.AntiCheat.Detector.Android.EAndroidCheatingType.UNKNOWN
  GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingType*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingType*
        name: AndroidCheatingType
        nameWithType: AndroidCheatingDetectionStatus.AndroidCheatingType
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingType
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingType*
        name: AndroidCheatingType
        nameWithType: AndroidCheatingDetectionStatus.AndroidCheatingType
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingType
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingType
  GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
        name: AndroidCheatingType
        nameWithType: IAndroidCheatingDetectionStatus.AndroidCheatingType
        qualifiedName: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
      VB:
      - id: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
        name: AndroidCheatingType
        nameWithType: IAndroidCheatingDetectionStatus.AndroidCheatingType
        qualifiedName: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
    isDefinition: true
    parent: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus
    commentId: P:GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
  GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData*
        name: MonitorFailedToRetrieveData
        nameWithType: AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData*
        name: MonitorFailedToRetrieveData
        nameWithType: AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.MonitorFailedToRetrieveData
  GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.#ctor*
        name: AndroidCheatingDetectionStatus
        nameWithType: AndroidCheatingDetectionStatus.AndroidCheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingDetectionStatus
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.#ctor*
        name: AndroidCheatingDetectionStatus
        nameWithType: AndroidCheatingDetectionStatus.AndroidCheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.AndroidCheatingDetectionStatus
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus.#ctor
  GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
        name: AndroidCheatingDetectionStatus
        nameWithType: AndroidCheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
      VB:
      - id: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
        name: AndroidCheatingDetectionStatus
        nameWithType: AndroidCheatingDetectionStatus
        qualifiedName: GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Detector.Android.AndroidCheatingDetectionStatus
  GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType*
        name: AndroidCheatingType
        nameWithType: IAndroidCheatingDetectionStatus.AndroidCheatingType
        qualifiedName: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
      VB:
      - id: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType*
        name: AndroidCheatingType
        nameWithType: IAndroidCheatingDetectionStatus.AndroidCheatingType
        qualifiedName: GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Android.IAndroidCheatingDetectionStatus.AndroidCheatingType
  GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Name*
        name: Name
        nameWithType: MobileGenuineDetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Name
      VB:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Name*
        name: Name
        nameWithType: MobileGenuineDetector.Name
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Name
  GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.IsSupported*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.IsSupported*
        name: IsSupported
        nameWithType: MobileGenuineDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.IsSupported
      VB:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.IsSupported*
        name: IsSupported
        nameWithType: MobileGenuineDetector.IsSupported
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.IsSupported
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.IsSupported
  GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibilityOfFalsePositive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: MobileGenuineDetector.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibilityOfFalsePositive
      VB:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibilityOfFalsePositive*
        name: PossibilityOfFalsePositive
        nameWithType: MobileGenuineDetector.PossibilityOfFalsePositive
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibilityOfFalsePositive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibilityOfFalsePositive
  GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ThreatRating*
        name: ThreatRating
        nameWithType: MobileGenuineDetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ThreatRating*
        name: ThreatRating
        nameWithType: MobileGenuineDetector.ThreatRating
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ThreatRating
  GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibleCheatingDetected*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: MobileGenuineDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibleCheatingDetected
      VB:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibleCheatingDetected*
        name: PossibleCheatingDetected
        nameWithType: MobileGenuineDetector.PossibleCheatingDetected
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibleCheatingDetected
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.PossibleCheatingDetected
  GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnNext*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnNext*
        name: OnNext
        nameWithType: MobileGenuineDetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnNext
      VB:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnNext*
        name: OnNext
        nameWithType: MobileGenuineDetector.OnNext
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnNext
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnNext
  GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnError*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnError*
        name: OnError
        nameWithType: MobileGenuineDetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnError
      VB:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnError*
        name: OnError
        nameWithType: MobileGenuineDetector.OnError
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnError
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnError
  GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCompleted*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCompleted*
        name: OnCompleted
        nameWithType: MobileGenuineDetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCompleted
      VB:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCompleted*
        name: OnCompleted
        nameWithType: MobileGenuineDetector.OnCompleted
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCompleted
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.OnCompleted
  GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ManualGenuineCheck*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ManualGenuineCheck*
        name: ManualGenuineCheck
        nameWithType: MobileGenuineDetector.ManualGenuineCheck
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ManualGenuineCheck
      VB:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ManualGenuineCheck*
        name: ManualGenuineCheck
        nameWithType: MobileGenuineDetector.ManualGenuineCheck
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ManualGenuineCheck
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.ManualGenuineCheck
  GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Start*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Start*
        name: Start
        nameWithType: MobileGenuineDetector.Start
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Start
      VB:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Start*
        name: Start
        nameWithType: MobileGenuineDetector.Start
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Start
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector.Start
  GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector
        name: MobileGenuineDetector
        nameWithType: MobileGenuineDetector
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector
      VB:
      - id: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector
        name: MobileGenuineDetector
        nameWithType: MobileGenuineDetector
        qualifiedName: GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Detector.Mobile.MobileGenuineDetector
  GUPS.AntiCheat.Detector.Mobile:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Detector.Mobile
        nameWithType: GUPS.AntiCheat.Detector.Mobile
        qualifiedName: GUPS.AntiCheat.Detector.Mobile
      VB:
      - name: GUPS.AntiCheat.Detector.Mobile
        nameWithType: GUPS.AntiCheat.Detector.Mobile
        qualifiedName: GUPS.AntiCheat.Detector.Mobile
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Detector.Mobile
  GUPS.AntiCheat.Monitor.AMonitor:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor
        name: AMonitor
        nameWithType: AMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor
        name: AMonitor
        nameWithType: AMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor
    commentId: T:GUPS.AntiCheat.Monitor.AMonitor
  GUPS.AntiCheat.IMonitor:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IMonitor
        name: IMonitor
        nameWithType: IMonitor
        qualifiedName: IMonitor
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.IMonitor
        name: IMonitor
        nameWithType: IMonitor
        qualifiedName: IMonitor
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.IWatchAble`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IWatchAble`1
        name: IWatchAble
        nameWithType: IWatchAble
        qualifiedName: IWatchAble
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.IWatchAble`1
        name: IWatchAble
        nameWithType: IWatchAble
        qualifiedName: IWatchAble
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  GUPS.AntiCheat.IWatchAble{IWatchedSubject}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IWatchAble`1
        name: IWatchAble
        nameWithType: IWatchAble
        qualifiedName: IWatchAble
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: IWatchedSubject
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.IWatchAble`1
        name: IWatchAble
        nameWithType: IWatchAble
        qualifiedName: IWatchAble
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: IWatchedSubject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.IWatchAble`1
    commentId: '!:GUPS.AntiCheat.IWatchAble{IWatchedSubject}'
  GUPS.AntiCheat.Monitor.AMonitor.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Name*
        name: Name
        nameWithType: AMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Name
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Name*
        name: Name
        nameWithType: AMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.Name
  GUPS.AntiCheat.Monitor.AMonitor.IsActive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.IsActive*
        name: IsActive
        nameWithType: AMonitor.IsActive
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.IsActive
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.IsActive*
        name: IsActive
        nameWithType: AMonitor.IsActive
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.IsActive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.IsActive
  GUPS.AntiCheat.Monitor.AMonitor.IsStarted*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.IsStarted*
        name: IsStarted
        nameWithType: AMonitor.IsStarted
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.IsStarted
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.IsStarted*
        name: IsStarted
        nameWithType: AMonitor.IsStarted
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.IsStarted
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.IsStarted
  GUPS.AntiCheat.Monitor.AMonitor.IsPaused*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.IsPaused*
        name: IsPaused
        nameWithType: AMonitor.IsPaused
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.IsPaused
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.IsPaused*
        name: IsPaused
        nameWithType: AMonitor.IsPaused
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.IsPaused
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.IsPaused
  GUPS.AntiCheat.Monitor.AMonitor.Start*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Start*
        name: Start
        nameWithType: AMonitor.Start
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Start
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Start*
        name: Start
        nameWithType: AMonitor.Start
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Start
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.Start
  GUPS.AntiCheat.Monitor.AMonitor.OnStart*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnStart*
        name: OnStart
        nameWithType: AMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnStart
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnStart*
        name: OnStart
        nameWithType: AMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnStart
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.OnStart
  GUPS.AntiCheat.Monitor.AMonitor.Pause*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Pause*
        name: Pause
        nameWithType: AMonitor.Pause
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Pause
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Pause*
        name: Pause
        nameWithType: AMonitor.Pause
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Pause
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.Pause
  GUPS.AntiCheat.Monitor.AMonitor.OnPause*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnPause*
        name: OnPause
        nameWithType: AMonitor.OnPause
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnPause
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnPause*
        name: OnPause
        nameWithType: AMonitor.OnPause
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnPause
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.OnPause
  GUPS.AntiCheat.Monitor.AMonitor.Resume*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Resume*
        name: Resume
        nameWithType: AMonitor.Resume
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Resume
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Resume*
        name: Resume
        nameWithType: AMonitor.Resume
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Resume
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.Resume
  GUPS.AntiCheat.Monitor.AMonitor.OnResume*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnResume*
        name: OnResume
        nameWithType: AMonitor.OnResume
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnResume
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnResume*
        name: OnResume
        nameWithType: AMonitor.OnResume
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnResume
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.OnResume
  GUPS.AntiCheat.Monitor.AMonitor.Stop*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Stop*
        name: Stop
        nameWithType: AMonitor.Stop
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Stop
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Stop*
        name: Stop
        nameWithType: AMonitor.Stop
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Stop
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.Stop
  GUPS.AntiCheat.Monitor.AMonitor.OnStop*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnStop*
        name: OnStop
        nameWithType: AMonitor.OnStop
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnStop
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnStop*
        name: OnStop
        nameWithType: AMonitor.OnStop
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnStop
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.OnStop
  GUPS.AntiCheat.Monitor.AMonitor.OnUpdate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate*
        name: OnUpdate
        nameWithType: AMonitor.OnUpdate
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate*
        name: OnUpdate
        nameWithType: AMonitor.OnUpdate
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
  GUPS.AntiCheat.Monitor.AMonitor.OnDestroy*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnDestroy*
        name: OnDestroy
        nameWithType: AMonitor.OnDestroy
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnDestroy*
        name: OnDestroy
        nameWithType: AMonitor.OnDestroy
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
  GUPS.AntiCheat.Monitor.AMonitor.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Dispose*
        name: Dispose
        nameWithType: AMonitor.Dispose
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Dispose
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Dispose*
        name: Dispose
        nameWithType: AMonitor.Dispose
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.Dispose
  GUPS.AntiCheat.IObserver{IWatchedSubject}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: IWatchedSubject
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: IWatchedSubject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.IObserver`1
    commentId: '!:GUPS.AntiCheat.IObserver{IWatchedSubject}'
  GUPS.AntiCheat.Monitor.AMonitor.Subscribe*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Subscribe*
        name: Subscribe
        nameWithType: AMonitor.Subscribe
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Subscribe
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Subscribe*
        name: Subscribe
        nameWithType: AMonitor.Subscribe
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Subscribe
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.Subscribe
  GUPS.AntiCheat.Monitor.AMonitor.Notify*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Notify*
        name: Notify
        nameWithType: AMonitor.Notify
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Notify
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Notify*
        name: Notify
        nameWithType: AMonitor.Notify
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Notify
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.AMonitor.Notify
  GUPS.AntiCheat.Monitor:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Monitor
        nameWithType: GUPS.AntiCheat.Monitor
        qualifiedName: GUPS.AntiCheat.Monitor
      VB:
      - name: GUPS.AntiCheat.Monitor
        nameWithType: GUPS.AntiCheat.Monitor
        qualifiedName: GUPS.AntiCheat.Monitor
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Monitor
  GUPS.AntiCheat.Monitor.AMonitor.IsActive:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.IsActive
        name: IsActive
        nameWithType: AMonitor.IsActive
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.IsActive
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.IsActive
        name: IsActive
        nameWithType: AMonitor.IsActive
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.IsActive
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: P:GUPS.AntiCheat.Monitor.AMonitor.IsActive
  GUPS.AntiCheat.Monitor.AMonitor.IsStarted:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.IsStarted
        name: IsStarted
        nameWithType: AMonitor.IsStarted
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.IsStarted
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.IsStarted
        name: IsStarted
        nameWithType: AMonitor.IsStarted
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.IsStarted
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: P:GUPS.AntiCheat.Monitor.AMonitor.IsStarted
  GUPS.AntiCheat.Monitor.AMonitor.IsPaused:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.IsPaused
        name: IsPaused
        nameWithType: AMonitor.IsPaused
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.IsPaused
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.IsPaused
        name: IsPaused
        nameWithType: AMonitor.IsPaused
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.IsPaused
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: P:GUPS.AntiCheat.Monitor.AMonitor.IsPaused
  GUPS.AntiCheat.Monitor.AMonitor.Start:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Start
        name: Start
        nameWithType: AMonitor.Start
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Start
        name: Start
        nameWithType: AMonitor.Start
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Start
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Start
  GUPS.AntiCheat.Monitor.AMonitor.Pause:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Pause
        name: Pause
        nameWithType: AMonitor.Pause
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Pause
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Pause
        name: Pause
        nameWithType: AMonitor.Pause
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Pause
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Pause
  GUPS.AntiCheat.Monitor.AMonitor.OnPause:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnPause
        name: OnPause
        nameWithType: AMonitor.OnPause
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnPause
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnPause
        name: OnPause
        nameWithType: AMonitor.OnPause
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnPause
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.OnPause
  GUPS.AntiCheat.Monitor.AMonitor.Resume:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Resume
        name: Resume
        nameWithType: AMonitor.Resume
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Resume
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Resume
        name: Resume
        nameWithType: AMonitor.Resume
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Resume
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Resume
  GUPS.AntiCheat.Monitor.AMonitor.OnResume:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnResume
        name: OnResume
        nameWithType: AMonitor.OnResume
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnResume
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnResume
        name: OnResume
        nameWithType: AMonitor.OnResume
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnResume
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.OnResume
  GUPS.AntiCheat.Monitor.AMonitor.Stop:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Stop
        name: Stop
        nameWithType: AMonitor.Stop
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Stop
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Stop
        name: Stop
        nameWithType: AMonitor.Stop
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Stop
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Stop
  GUPS.AntiCheat.Monitor.AMonitor.OnStop:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnStop
        name: OnStop
        nameWithType: AMonitor.OnStop
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnStop
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnStop
        name: OnStop
        nameWithType: AMonitor.OnStop
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnStop
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.OnStop
  GUPS.AntiCheat.Monitor.AMonitor.OnUpdate:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
        name: OnUpdate
        nameWithType: AMonitor.OnUpdate
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
        name: OnUpdate
        nameWithType: AMonitor.OnUpdate
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.OnUpdate
  GUPS.AntiCheat.Monitor.AMonitor.OnDestroy:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
        name: OnDestroy
        nameWithType: AMonitor.OnDestroy
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
        name: OnDestroy
        nameWithType: AMonitor.OnDestroy
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.OnDestroy
  GUPS.AntiCheat.Monitor.AMonitor.Dispose:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Dispose
        name: Dispose
        nameWithType: AMonitor.Dispose
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Dispose
        name: Dispose
        nameWithType: AMonitor.Dispose
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Dispose
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Dispose
  GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject}):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject})
        name: Subscribe
        nameWithType: AMonitor.Subscribe
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: IWatchedSubject
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject})
        name: Subscribe
        nameWithType: AMonitor.Subscribe
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Subscribe
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.IObserver`1
        name: IObserver
        nameWithType: IObserver
        qualifiedName: IObserver
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: IWatchedSubject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Subscribe(IObserver{IWatchedSubject})
  GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
        name: Notify
        nameWithType: AMonitor.Notify
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Notify
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: IWatchedSubject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
        name: Notify
        nameWithType: AMonitor.Notify
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Notify
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.IWatchedSubject
        name: IWatchedSubject
        nameWithType: IWatchedSubject
        qualifiedName: IWatchedSubject
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.Notify(IWatchedSubject)
  GUPS.AntiCheat.Monitor.AMonitor.Name:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Name
        name: Name
        nameWithType: AMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Name
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.Name
        name: Name
        nameWithType: AMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.Name
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: P:GUPS.AntiCheat.Monitor.AMonitor.Name
  GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.Name*
        name: Name
        nameWithType: AndroidInstalledApplicationMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.Name
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.Name*
        name: Name
        nameWithType: AndroidInstalledApplicationMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.Name
  GUPS.AntiCheat.Monitor.AMonitor.OnStart:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnStart
        name: OnStart
        nameWithType: AMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnStart
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Monitor.AMonitor.OnStart
        name: OnStart
        nameWithType: AMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.AMonitor.OnStart
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.AMonitor
    commentId: M:GUPS.AntiCheat.Monitor.AMonitor.OnStart
  GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.OnStart*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.OnStart*
        name: OnStart
        nameWithType: AndroidInstalledApplicationMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.OnStart
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.OnStart*
        name: OnStart
        nameWithType: AndroidInstalledApplicationMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.OnStart
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor.OnStart
  GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor
        name: AndroidInstalledApplicationMonitor
        nameWithType: AndroidInstalledApplicationMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor
        name: AndroidInstalledApplicationMonitor
        nameWithType: AndroidInstalledApplicationMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationMonitor
  GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.Name*
        name: Name
        nameWithType: AndroidPackageFingerprintMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.Name
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.Name*
        name: Name
        nameWithType: AndroidPackageFingerprintMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.Name
  GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.OnStart*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.OnStart*
        name: OnStart
        nameWithType: AndroidPackageFingerprintMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.OnStart
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.OnStart*
        name: OnStart
        nameWithType: AndroidPackageFingerprintMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.OnStart
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor.OnStart
  GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor
        name: AndroidPackageFingerprintMonitor
        nameWithType: AndroidPackageFingerprintMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor
        name: AndroidPackageFingerprintMonitor
        nameWithType: AndroidPackageFingerprintMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidPackageFingerprintMonitor
  GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.Name*
        name: Name
        nameWithType: AndroidPackageHashMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.Name
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.Name*
        name: Name
        nameWithType: AndroidPackageHashMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.Name
  GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.OnStart*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.OnStart*
        name: OnStart
        nameWithType: AndroidPackageHashMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.OnStart
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.OnStart*
        name: OnStart
        nameWithType: AndroidPackageHashMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.OnStart
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor.OnStart
  GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor
        name: AndroidPackageHashMonitor
        nameWithType: AndroidPackageHashMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor
        name: AndroidPackageHashMonitor
        nameWithType: AndroidPackageHashMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidPackageHashMonitor
  GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.Name*
        name: Name
        nameWithType: AndroidPackageLibraryMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.Name
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.Name*
        name: Name
        nameWithType: AndroidPackageLibraryMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.Name
  GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.OnStart*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.OnStart*
        name: OnStart
        nameWithType: AndroidPackageLibraryMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.OnStart
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.OnStart*
        name: OnStart
        nameWithType: AndroidPackageLibraryMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.OnStart
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor.OnStart
  GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor
        name: AndroidPackageLibraryMonitor
        nameWithType: AndroidPackageLibraryMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor
        name: AndroidPackageLibraryMonitor
        nameWithType: AndroidPackageLibraryMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidPackageLibraryMonitor
  GUPS.AntiCheat.Monitor.Android.EAppStore.Unknown:
    commentId: F:GUPS.AntiCheat.Monitor.Android.EAppStore.Unknown
  GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.Name*
        name: Name
        nameWithType: AndroidPackageSourceMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.Name
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.Name*
        name: Name
        nameWithType: AndroidPackageSourceMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.Name
  GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.OnStart*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.OnStart*
        name: OnStart
        nameWithType: AndroidPackageSourceMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.OnStart
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.OnStart*
        name: OnStart
        nameWithType: AndroidPackageSourceMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.OnStart
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor.OnStart
  GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor
        name: AndroidPackageSourceMonitor
        nameWithType: AndroidPackageSourceMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor
        name: AndroidPackageSourceMonitor
        nameWithType: AndroidPackageSourceMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidPackageSourceMonitor
  GUPS.AntiCheat.Monitor.Android:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Monitor.Android
        nameWithType: GUPS.AntiCheat.Monitor.Android
        qualifiedName: GUPS.AntiCheat.Monitor.Android
      VB:
      - name: GUPS.AntiCheat.Monitor.Android
        nameWithType: GUPS.AntiCheat.Monitor.Android
        qualifiedName: GUPS.AntiCheat.Monitor.Android
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Monitor.Android
  GUPS.AntiCheat.Monitor.Android.EAppStore:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.EAppStore
        name: EAppStore
        nameWithType: EAppStore
        qualifiedName: GUPS.AntiCheat.Monitor.Android.EAppStore
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.EAppStore
        name: EAppStore
        nameWithType: EAppStore
        qualifiedName: GUPS.AntiCheat.Monitor.Android.EAppStore
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.Android
    commentId: T:GUPS.AntiCheat.Monitor.Android.EAppStore
  GUPS.AntiCheat.Monitor.Android.AppStoreHelper.GetStore*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AppStoreHelper.GetStore*
        name: GetStore
        nameWithType: AppStoreHelper.GetStore
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AppStoreHelper.GetStore
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AppStoreHelper.GetStore*
        name: GetStore
        nameWithType: AppStoreHelper.GetStore
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AppStoreHelper.GetStore
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AppStoreHelper.GetStore
  GUPS.AntiCheat.Monitor.Android.AppStoreHelper:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AppStoreHelper
        name: AppStoreHelper
        nameWithType: AppStoreHelper
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AppStoreHelper
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AppStoreHelper
        name: AppStoreHelper
        nameWithType: AppStoreHelper
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AppStoreHelper
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Android.AppStoreHelper
  GUPS.AntiCheat.Monitor.Android.IAndroidStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.IAndroidStatus
        name: IAndroidStatus
        nameWithType: IAndroidStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.IAndroidStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.IAndroidStatus
        name: IAndroidStatus
        nameWithType: IAndroidStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.IAndroidStatus
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.Android
    commentId: T:GUPS.AntiCheat.Monitor.Android.IAndroidStatus
  GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.FailedToRetrieveData*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.FailedToRetrieveData*
        name: FailedToRetrieveData
        nameWithType: AndroidFingerprintStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.FailedToRetrieveData
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.FailedToRetrieveData*
        name: FailedToRetrieveData
        nameWithType: AndroidFingerprintStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.FailedToRetrieveData
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.FailedToRetrieveData
  GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
        name: FailedToRetrieveData
        nameWithType: IAndroidStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
        name: FailedToRetrieveData
        nameWithType: IAndroidStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.Android.IAndroidStatus
    commentId: P:GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
  GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Algorithm*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Algorithm*
        name: Algorithm
        nameWithType: AndroidFingerprintStatus.Algorithm
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Algorithm
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Algorithm*
        name: Algorithm
        nameWithType: AndroidFingerprintStatus.Algorithm
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Algorithm
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Algorithm
  GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Fingerprint*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Fingerprint*
        name: Fingerprint
        nameWithType: AndroidFingerprintStatus.Fingerprint
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Fingerprint
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Fingerprint*
        name: Fingerprint
        nameWithType: AndroidFingerprintStatus.Fingerprint
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Fingerprint
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.Fingerprint
  GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus
        name: AndroidFingerprintStatus
        nameWithType: AndroidFingerprintStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus
        name: AndroidFingerprintStatus
        nameWithType: AndroidFingerprintStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus
  GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.#ctor*
        name: AndroidFingerprintStatus
        nameWithType: AndroidFingerprintStatus.AndroidFingerprintStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.AndroidFingerprintStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.#ctor*
        name: AndroidFingerprintStatus
        nameWithType: AndroidFingerprintStatus.AndroidFingerprintStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.AndroidFingerprintStatus
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidFingerprintStatus.#ctor
  GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.FailedToRetrieveData*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.FailedToRetrieveData*
        name: FailedToRetrieveData
        nameWithType: AndroidHashStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.FailedToRetrieveData
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.FailedToRetrieveData*
        name: FailedToRetrieveData
        nameWithType: AndroidHashStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.FailedToRetrieveData
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.FailedToRetrieveData
  GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Algorithm*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Algorithm*
        name: Algorithm
        nameWithType: AndroidHashStatus.Algorithm
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Algorithm
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Algorithm*
        name: Algorithm
        nameWithType: AndroidHashStatus.Algorithm
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Algorithm
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Algorithm
  GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Hash*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Hash*
        name: Hash
        nameWithType: AndroidHashStatus.Hash
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Hash
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Hash*
        name: Hash
        nameWithType: AndroidHashStatus.Hash
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Hash
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.Hash
  GUPS.AntiCheat.Monitor.Android.AndroidHashStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus
        name: AndroidHashStatus
        nameWithType: AndroidHashStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus
        name: AndroidHashStatus
        nameWithType: AndroidHashStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidHashStatus
  GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.#ctor*
        name: AndroidHashStatus
        nameWithType: AndroidHashStatus.AndroidHashStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.AndroidHashStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.#ctor*
        name: AndroidHashStatus
        nameWithType: AndroidHashStatus.AndroidHashStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.AndroidHashStatus
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidHashStatus.#ctor
  GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.FailedToRetrieveData*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.FailedToRetrieveData*
        name: FailedToRetrieveData
        nameWithType: AndroidInstalledApplicationStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.FailedToRetrieveData
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.FailedToRetrieveData*
        name: FailedToRetrieveData
        nameWithType: AndroidInstalledApplicationStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.FailedToRetrieveData
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.FailedToRetrieveData
  GUPS.AntiCheat.List{String}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.String
        name: String
        nameWithType: String
        qualifiedName: String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.String
        name: String
        nameWithType: String
        qualifiedName: String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.List`1
    commentId: '!:GUPS.AntiCheat.List{String}'
  GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.Applications*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.Applications*
        name: Applications
        nameWithType: AndroidInstalledApplicationStatus.Applications
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.Applications
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.Applications*
        name: Applications
        nameWithType: AndroidInstalledApplicationStatus.Applications
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.Applications
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.Applications
  GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus
        name: AndroidInstalledApplicationStatus
        nameWithType: AndroidInstalledApplicationStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus
        name: AndroidInstalledApplicationStatus
        nameWithType: AndroidInstalledApplicationStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus
  GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.#ctor*
        name: AndroidInstalledApplicationStatus
        nameWithType: AndroidInstalledApplicationStatus.AndroidInstalledApplicationStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.AndroidInstalledApplicationStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.#ctor*
        name: AndroidInstalledApplicationStatus
        nameWithType: AndroidInstalledApplicationStatus.AndroidInstalledApplicationStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.AndroidInstalledApplicationStatus
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidInstalledApplicationStatus.#ctor
  GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.FailedToRetrieveData*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.FailedToRetrieveData*
        name: FailedToRetrieveData
        nameWithType: AndroidLibraryStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.FailedToRetrieveData
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.FailedToRetrieveData*
        name: FailedToRetrieveData
        nameWithType: AndroidLibraryStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.FailedToRetrieveData
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.FailedToRetrieveData
  GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.Libraries*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.Libraries*
        name: Libraries
        nameWithType: AndroidLibraryStatus.Libraries
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.Libraries
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.Libraries*
        name: Libraries
        nameWithType: AndroidLibraryStatus.Libraries
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.Libraries
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.Libraries
  GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus
        name: AndroidLibraryStatus
        nameWithType: AndroidLibraryStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus
        name: AndroidLibraryStatus
        nameWithType: AndroidLibraryStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus
  GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.#ctor*
        name: AndroidLibraryStatus
        nameWithType: AndroidLibraryStatus.AndroidLibraryStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.AndroidLibraryStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.#ctor*
        name: AndroidLibraryStatus
        nameWithType: AndroidLibraryStatus.AndroidLibraryStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.AndroidLibraryStatus
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidLibraryStatus.#ctor
  GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.FailedToRetrieveData*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.FailedToRetrieveData*
        name: FailedToRetrieveData
        nameWithType: AndroidSourceStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.FailedToRetrieveData
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.FailedToRetrieveData*
        name: FailedToRetrieveData
        nameWithType: AndroidSourceStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.FailedToRetrieveData
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.FailedToRetrieveData
  GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSource*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSource*
        name: AppStoreSource
        nameWithType: AndroidSourceStatus.AppStoreSource
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSource
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSource*
        name: AppStoreSource
        nameWithType: AndroidSourceStatus.AppStoreSource
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSource
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSource
  GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSourcePackage*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSourcePackage*
        name: AppStoreSourcePackage
        nameWithType: AndroidSourceStatus.AppStoreSourcePackage
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSourcePackage
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSourcePackage*
        name: AppStoreSourcePackage
        nameWithType: AndroidSourceStatus.AppStoreSourcePackage
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSourcePackage
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AppStoreSourcePackage
  GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus
        name: AndroidSourceStatus
        nameWithType: AndroidSourceStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus
        name: AndroidSourceStatus
        nameWithType: AndroidSourceStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus
  GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.#ctor*
        name: AndroidSourceStatus
        nameWithType: AndroidSourceStatus.AndroidSourceStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AndroidSourceStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.#ctor*
        name: AndroidSourceStatus
        nameWithType: AndroidSourceStatus.AndroidSourceStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.AndroidSourceStatus
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.AndroidSourceStatus.#ctor
  GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData*
        name: FailedToRetrieveData
        nameWithType: IAndroidStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
      VB:
      - id: GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData*
        name: FailedToRetrieveData
        nameWithType: IAndroidStatus.FailedToRetrieveData
        qualifiedName: GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Android.IAndroidStatus.FailedToRetrieveData
  GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor
        name: DeviceTimeMonitor
        nameWithType: DeviceTimeMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor
        name: DeviceTimeMonitor
        nameWithType: DeviceTimeMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor
  GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.Name*
        name: Name
        nameWithType: DeviceTimeMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.Name
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.Name*
        name: Name
        nameWithType: DeviceTimeMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.Name
  GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationFocus*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationFocus*
        name: OnApplicationFocus
        nameWithType: DeviceTimeMonitor.OnApplicationFocus
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationFocus
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationFocus*
        name: OnApplicationFocus
        nameWithType: DeviceTimeMonitor.OnApplicationFocus
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationFocus
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationFocus
  GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationPause*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationPause*
        name: OnApplicationPause
        nameWithType: DeviceTimeMonitor.OnApplicationPause
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationPause
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationPause*
        name: OnApplicationPause
        nameWithType: DeviceTimeMonitor.OnApplicationPause
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationPause
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Time.DeviceTimeMonitor.OnApplicationPause
  GUPS.AntiCheat.Monitor.Time.ETimeDeviation:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
        name: ETimeDeviation
        nameWithType: ETimeDeviation
        qualifiedName: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
        name: ETimeDeviation
        nameWithType: ETimeDeviation
        qualifiedName: GUPS.AntiCheat.Monitor.Time.ETimeDeviation
    isDefinition: true
    parent: GUPS.AntiCheat.Monitor.Time
    commentId: T:GUPS.AntiCheat.Monitor.Time.ETimeDeviation
  GUPS.AntiCheat.Monitor.Time.ETimeDeviation.None:
    commentId: F:GUPS.AntiCheat.Monitor.Time.ETimeDeviation.None
  GUPS.AntiCheat.Monitor.Time.ETimeDeviation.Stopped:
    commentId: F:GUPS.AntiCheat.Monitor.Time.ETimeDeviation.Stopped
  GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SlowedDown:
    commentId: F:GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SlowedDown
  GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SpeedUp:
    commentId: F:GUPS.AntiCheat.Monitor.Time.ETimeDeviation.SpeedUp
  GUPS.AntiCheat.Monitor.Time:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Monitor.Time
        nameWithType: GUPS.AntiCheat.Monitor.Time
        qualifiedName: GUPS.AntiCheat.Monitor.Time
      VB:
      - name: GUPS.AntiCheat.Monitor.Time
        nameWithType: GUPS.AntiCheat.Monitor.Time
        qualifiedName: GUPS.AntiCheat.Monitor.Time
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Monitor.Time
  GUPS.AntiCheat.Monitor.Time.GameTimeMonitor:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor
        name: GameTimeMonitor
        nameWithType: GameTimeMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor
        name: GameTimeMonitor
        nameWithType: GameTimeMonitor
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Time.GameTimeMonitor
  GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.Name*
        name: Name
        nameWithType: GameTimeMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.Name
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.Name*
        name: Name
        nameWithType: GameTimeMonitor.Name
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.Name
  GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnStart*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnStart*
        name: OnStart
        nameWithType: GameTimeMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnStart
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnStart*
        name: OnStart
        nameWithType: GameTimeMonitor.OnStart
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnStart
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnStart
  GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnResume*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnResume*
        name: OnResume
        nameWithType: GameTimeMonitor.OnResume
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnResume
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnResume*
        name: OnResume
        nameWithType: GameTimeMonitor.OnResume
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnResume
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnResume
  GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnUpdate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnUpdate*
        name: OnUpdate
        nameWithType: GameTimeMonitor.OnUpdate
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnUpdate
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnUpdate*
        name: OnUpdate
        nameWithType: GameTimeMonitor.OnUpdate
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnUpdate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Time.GameTimeMonitor.OnUpdate
  GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus
        name: DeviceTimeStatus
        nameWithType: DeviceTimeStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus
        name: DeviceTimeStatus
        nameWithType: DeviceTimeStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus
  GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.Deviation*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.Deviation*
        name: Deviation
        nameWithType: DeviceTimeStatus.Deviation
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.Deviation
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.Deviation*
        name: Deviation
        nameWithType: DeviceTimeStatus.Deviation
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.Deviation
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.Deviation
  GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.#ctor*
        name: DeviceTimeStatus
        nameWithType: DeviceTimeStatus.DeviceTimeStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.DeviceTimeStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.#ctor*
        name: DeviceTimeStatus
        nameWithType: DeviceTimeStatus.DeviceTimeStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.DeviceTimeStatus
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Time.DeviceTimeStatus.#ctor
  GUPS.AntiCheat.Monitor.Time.GameTimeStatus:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeStatus
        name: GameTimeStatus
        nameWithType: GameTimeStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeStatus
        name: GameTimeStatus
        nameWithType: GameTimeStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeStatus
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Monitor.Time.GameTimeStatus
  GUPS.AntiCheat.Monitor.Time.GameTimeStatus.Deviation*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.Deviation*
        name: Deviation
        nameWithType: GameTimeStatus.Deviation
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.Deviation
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.Deviation*
        name: Deviation
        nameWithType: GameTimeStatus.Deviation
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.Deviation
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Time.GameTimeStatus.Deviation
  GUPS.AntiCheat.Monitor.Time.GameTimeStatus.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.#ctor*
        name: GameTimeStatus
        nameWithType: GameTimeStatus.GameTimeStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.GameTimeStatus
      VB:
      - id: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.#ctor*
        name: GameTimeStatus
        nameWithType: GameTimeStatus.GameTimeStatus
        qualifiedName: GUPS.AntiCheat.Monitor.Time.GameTimeStatus.GameTimeStatus
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Monitor.Time.GameTimeStatus.#ctor
  GUPS.AntiCheat.IProtected:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IProtected
        name: IProtected
        nameWithType: IProtected
        qualifiedName: IProtected
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.IProtected
        name: IProtected
        nameWithType: IProtected
        qualifiedName: IProtected
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.ISerializationCallbackReceiver:
    name:
      CSharp:
      - id: GUPS.AntiCheat.ISerializationCallbackReceiver
        name: ISerializationCallbackReceiver
        nameWithType: ISerializationCallbackReceiver
        qualifiedName: ISerializationCallbackReceiver
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.ISerializationCallbackReceiver
        name: ISerializationCallbackReceiver
        nameWithType: ISerializationCallbackReceiver
        qualifiedName: ISerializationCallbackReceiver
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.ProtectedBool.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedBool.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedBool.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedBool.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedBool.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedBool.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedBool.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedBool.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedBool.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.OnAfterDeserialize
  GUPS.AntiCheat.Protected.ProtectedBool.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.#ctor*
        name: ProtectedBool
        nameWithType: ProtectedBool.ProtectedBool
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.ProtectedBool
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.#ctor*
        name: ProtectedBool
        nameWithType: ProtectedBool.ProtectedBool
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.ProtectedBool
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.#ctor
  GUPS.AntiCheat.Protected.ProtectedBool.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.Value*
        name: Value
        nameWithType: ProtectedBool.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.Value*
        name: Value
        nameWithType: ProtectedBool.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.Value
  GUPS.AntiCheat.Protected.ProtectedBool.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedBool.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedBool.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedBool.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedBool.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedBool.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedBool.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.Dispose*
        name: Dispose
        nameWithType: ProtectedBool.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.Dispose*
        name: Dispose
        nameWithType: ProtectedBool.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.Dispose
  System.ValueType.GetHashCode:
    name:
      CSharp:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedBool.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedBool.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedBool.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.GetHashCode
  System.ValueType.ToString:
    name:
      CSharp:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.ToString
  GUPS.AntiCheat.Protected.ProtectedBool.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.ToString*
        name: ToString
        nameWithType: ProtectedBool.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.ToString*
        name: ToString
        nameWithType: ProtectedBool.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.ToString
  GUPS.AntiCheat.Protected:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Protected
        nameWithType: GUPS.AntiCheat.Protected
        qualifiedName: GUPS.AntiCheat.Protected
      VB:
      - name: GUPS.AntiCheat.Protected
        nameWithType: GUPS.AntiCheat.Protected
        qualifiedName: GUPS.AntiCheat.Protected
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Protected
  GUPS.AntiCheat.Protected.ProtectedBool:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool
        name: ProtectedBool
        nameWithType: ProtectedBool
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool
        name: ProtectedBool
        nameWithType: ProtectedBool
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedBool
  GUPS.AntiCheat.Protected.ProtectedBool.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.op_Implicit*
        name: Implicit
        nameWithType: ProtectedBool.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.op_Implicit*
        name: Widening
        nameWithType: ProtectedBool.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedBool.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.op_Equality*
        name: Equality
        nameWithType: ProtectedBool.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.op_Equality*
        name: Equality
        nameWithType: ProtectedBool.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.op_Equality
  GUPS.AntiCheat.Protected.ProtectedBool.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.op_Inequality*
        name: Inequality
        nameWithType: ProtectedBool.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.op_Inequality*
        name: Inequality
        nameWithType: ProtectedBool.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.op_Inequality
  System.ValueType.Equals(System.Object):
    name:
      CSharp:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.Equals(System.Object)
  GUPS.AntiCheat.Protected.ProtectedBool.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.Equals*
        name: Equals
        nameWithType: ProtectedBool.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedBool.Equals*
        name: Equals
        nameWithType: ProtectedBool.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedBool.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedBool.Equals
  GUPS.AntiCheat.Protected.ProtectedDateTime.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedDateTime.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedDateTime.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedDateTime.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedDateTime.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedDateTime.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedDateTime.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedDateTime.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedDateTime.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.OnAfterDeserialize
  GUPS.AntiCheat.Protected.ProtectedDateTime.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.#ctor*
        name: ProtectedDateTime
        nameWithType: ProtectedDateTime.ProtectedDateTime
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.ProtectedDateTime
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.#ctor*
        name: ProtectedDateTime
        nameWithType: ProtectedDateTime.ProtectedDateTime
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.ProtectedDateTime
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.#ctor
  GUPS.AntiCheat.Protected.ProtectedDateTime.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.Value*
        name: Value
        nameWithType: ProtectedDateTime.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.Value*
        name: Value
        nameWithType: ProtectedDateTime.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.Value
  GUPS.AntiCheat.Protected.ProtectedDateTime.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedDateTime.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedDateTime.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedDateTime.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedDateTime.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedDateTime.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedDateTime.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.Dispose*
        name: Dispose
        nameWithType: ProtectedDateTime.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.Dispose*
        name: Dispose
        nameWithType: ProtectedDateTime.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.Dispose
  GUPS.AntiCheat.Protected.ProtectedDateTime.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.ToString*
        name: ToString
        nameWithType: ProtectedDateTime.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.ToString*
        name: ToString
        nameWithType: ProtectedDateTime.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.ToString
  GUPS.AntiCheat.Protected.ProtectedDateTime.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedDateTime.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedDateTime.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedDateTime:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime
        name: ProtectedDateTime
        nameWithType: ProtectedDateTime
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime
        name: ProtectedDateTime
        nameWithType: ProtectedDateTime
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedDateTime
  GUPS.AntiCheat.Protected.ProtectedDateTime.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Implicit*
        name: Implicit
        nameWithType: ProtectedDateTime.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Implicit*
        name: Widening
        nameWithType: ProtectedDateTime.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedDateTime.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Equality*
        name: Equality
        nameWithType: ProtectedDateTime.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Equality*
        name: Equality
        nameWithType: ProtectedDateTime.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.op_Equality
  GUPS.AntiCheat.Protected.ProtectedDateTime.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Inequality*
        name: Inequality
        nameWithType: ProtectedDateTime.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.op_Inequality*
        name: Inequality
        nameWithType: ProtectedDateTime.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedDateTime.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.Equals*
        name: Equals
        nameWithType: ProtectedDateTime.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDateTime.Equals*
        name: Equals
        nameWithType: ProtectedDateTime.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDateTime.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDateTime.Equals
  GUPS.AntiCheat.Protected.ProtectedDecimal.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedDecimal.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedDecimal.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedDecimal.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedDecimal.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedDecimal.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedDecimal.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedDecimal.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedDecimal.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.OnAfterDeserialize
  GUPS.AntiCheat.Protected.ProtectedDecimal:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal
        name: ProtectedDecimal
        nameWithType: ProtectedDecimal
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal
        name: ProtectedDecimal
        nameWithType: ProtectedDecimal
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedDecimal
  System.Decimal:
    name:
      CSharp:
      - id: System.Decimal
        name: Decimal
        nameWithType: Decimal
        qualifiedName: System.Decimal
        isExternal: true
      VB:
      - id: System.Decimal
        name: Decimal
        nameWithType: Decimal
        qualifiedName: System.Decimal
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Decimal
  GUPS.AntiCheat.Protected.ProtectedDecimal.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.#ctor*
        name: ProtectedDecimal
        nameWithType: ProtectedDecimal.ProtectedDecimal
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.ProtectedDecimal
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.#ctor*
        name: ProtectedDecimal
        nameWithType: ProtectedDecimal.ProtectedDecimal
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.ProtectedDecimal
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.#ctor
  GUPS.AntiCheat.Protected.ProtectedDecimal.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.Value*
        name: Value
        nameWithType: ProtectedDecimal.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.Value*
        name: Value
        nameWithType: ProtectedDecimal.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.Value
  GUPS.AntiCheat.Protected.ProtectedDecimal.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedDecimal.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedDecimal.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedDecimal.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedDecimal.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedDecimal.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedDecimal.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.Dispose*
        name: Dispose
        nameWithType: ProtectedDecimal.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.Dispose*
        name: Dispose
        nameWithType: ProtectedDecimal.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.Dispose
  GUPS.AntiCheat.Protected.ProtectedDecimal.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.ToString*
        name: ToString
        nameWithType: ProtectedDecimal.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.ToString*
        name: ToString
        nameWithType: ProtectedDecimal.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.ToString
  GUPS.AntiCheat.Protected.ProtectedDecimal.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedDecimal.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedDecimal.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
        name: Implicit
        nameWithType: ProtectedDecimal.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit*
        name: Widening
        nameWithType: ProtectedDecimal.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedDouble:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble
        name: ProtectedDouble
        nameWithType: ProtectedDouble
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble
        name: ProtectedDouble
        nameWithType: ProtectedDouble
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedDouble
  GUPS.AntiCheat.Protected.ProtectedInt16:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16
        name: ProtectedInt16
        nameWithType: ProtectedInt16
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16
        name: ProtectedInt16
        nameWithType: ProtectedInt16
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedInt16
  GUPS.AntiCheat.Protected.ProtectedInt32:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32
        name: ProtectedInt32
        nameWithType: ProtectedInt32
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32
        name: ProtectedInt32
        nameWithType: ProtectedInt32
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedInt32
  GUPS.AntiCheat.Protected.ProtectedInt64:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64
        name: ProtectedInt64
        nameWithType: ProtectedInt64
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64
        name: ProtectedInt64
        nameWithType: ProtectedInt64
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedInt64
  GUPS.AntiCheat.Protected.ProtectedFloat:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat
        name: ProtectedFloat
        nameWithType: ProtectedFloat
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat
        name: ProtectedFloat
        nameWithType: ProtectedFloat
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedFloat
  GUPS.AntiCheat.Protected.ProtectedDecimal.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Equality*
        name: Equality
        nameWithType: ProtectedDecimal.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Equality*
        name: Equality
        nameWithType: ProtectedDecimal.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Equality
  GUPS.AntiCheat.Protected.ProtectedDecimal.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Inequality*
        name: Inequality
        nameWithType: ProtectedDecimal.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_Inequality*
        name: Inequality
        nameWithType: ProtectedDecimal.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedDecimal.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.Equals*
        name: Equals
        nameWithType: ProtectedDecimal.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.Equals*
        name: Equals
        nameWithType: ProtectedDecimal.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.Equals
  GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThan*
        name: LessThan
        nameWithType: ProtectedDecimal.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.LessThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThan*
        name: LessThan
        nameWithType: ProtectedDecimal.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.LessThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThan
  GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedDecimal.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.LessThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedDecimal.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.LessThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.op_LessThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedDecimal.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.GreaterThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedDecimal.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.GreaterThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThan
  GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedDecimal.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.GreaterThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedDecimal.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDecimal.GreaterThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDecimal.op_GreaterThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedDouble.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedDouble.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedDouble.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedDouble.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedDouble.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedDouble.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedDouble.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedDouble.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedDouble.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.OnAfterDeserialize
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  GUPS.AntiCheat.Protected.ProtectedDouble.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.#ctor*
        name: ProtectedDouble
        nameWithType: ProtectedDouble.ProtectedDouble
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.ProtectedDouble
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.#ctor*
        name: ProtectedDouble
        nameWithType: ProtectedDouble.ProtectedDouble
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.ProtectedDouble
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.#ctor
  GUPS.AntiCheat.Protected.ProtectedDouble.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.Value*
        name: Value
        nameWithType: ProtectedDouble.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.Value*
        name: Value
        nameWithType: ProtectedDouble.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.Value
  GUPS.AntiCheat.Protected.ProtectedDouble.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedDouble.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedDouble.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedDouble.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedDouble.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedDouble.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedDouble.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.Dispose*
        name: Dispose
        nameWithType: ProtectedDouble.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.Dispose*
        name: Dispose
        nameWithType: ProtectedDouble.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.Dispose
  GUPS.AntiCheat.Protected.ProtectedDouble.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.ToString*
        name: ToString
        nameWithType: ProtectedDouble.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.ToString*
        name: ToString
        nameWithType: ProtectedDouble.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.ToString
  GUPS.AntiCheat.Protected.ProtectedDouble.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedDouble.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedDouble.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*
        name: Implicit
        nameWithType: ProtectedDouble.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit*
        name: Widening
        nameWithType: ProtectedDouble.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedDouble.op_Addition*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Addition*
        name: Addition
        nameWithType: ProtectedDouble.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Addition
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Addition*
        name: Addition
        nameWithType: ProtectedDouble.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Addition
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.op_Addition
  GUPS.AntiCheat.Protected.ProtectedDouble.op_Subtraction*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedDouble.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Subtraction
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedDouble.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Subtraction
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.op_Subtraction
  GUPS.AntiCheat.Protected.ProtectedDouble.op_Multiply*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Multiply*
        name: Multiply
        nameWithType: ProtectedDouble.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Multiply
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Multiply*
        name: Multiply
        nameWithType: ProtectedDouble.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Multiply
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.op_Multiply
  GUPS.AntiCheat.Protected.ProtectedDouble.op_Division*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Division*
        name: Division
        nameWithType: ProtectedDouble.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Division
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Division*
        name: Division
        nameWithType: ProtectedDouble.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Division
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.op_Division
  GUPS.AntiCheat.Protected.ProtectedDouble.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Equality*
        name: Equality
        nameWithType: ProtectedDouble.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Equality*
        name: Equality
        nameWithType: ProtectedDouble.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.op_Equality
  GUPS.AntiCheat.Protected.ProtectedDouble.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Inequality*
        name: Inequality
        nameWithType: ProtectedDouble.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_Inequality*
        name: Inequality
        nameWithType: ProtectedDouble.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedDouble.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.Equals*
        name: Equals
        nameWithType: ProtectedDouble.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.Equals*
        name: Equals
        nameWithType: ProtectedDouble.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.Equals
  GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThan*
        name: LessThan
        nameWithType: ProtectedDouble.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.LessThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThan*
        name: LessThan
        nameWithType: ProtectedDouble.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.LessThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThan
  GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedDouble.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.LessThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedDouble.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.LessThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.op_LessThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedDouble.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.GreaterThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedDouble.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.GreaterThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThan
  GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedDouble.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.GreaterThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedDouble.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedDouble.GreaterThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedDouble.op_GreaterThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedFloat.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedFloat.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedFloat.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedFloat.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedFloat.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedFloat.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedFloat.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedFloat.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedFloat.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.OnAfterDeserialize
  GUPS.AntiCheat.Protected.ProtectedFloat.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.#ctor*
        name: ProtectedFloat
        nameWithType: ProtectedFloat.ProtectedFloat
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.ProtectedFloat
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.#ctor*
        name: ProtectedFloat
        nameWithType: ProtectedFloat.ProtectedFloat
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.ProtectedFloat
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.#ctor
  GUPS.AntiCheat.Protected.ProtectedFloat.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.Value*
        name: Value
        nameWithType: ProtectedFloat.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.Value*
        name: Value
        nameWithType: ProtectedFloat.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.Value
  GUPS.AntiCheat.Protected.ProtectedFloat.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedFloat.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedFloat.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedFloat.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedFloat.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedFloat.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedFloat.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.Dispose*
        name: Dispose
        nameWithType: ProtectedFloat.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.Dispose*
        name: Dispose
        nameWithType: ProtectedFloat.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.Dispose
  GUPS.AntiCheat.Protected.ProtectedFloat.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.ToString*
        name: ToString
        nameWithType: ProtectedFloat.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.ToString*
        name: ToString
        nameWithType: ProtectedFloat.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.ToString
  GUPS.AntiCheat.Protected.ProtectedFloat.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedFloat.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedFloat.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit*
        name: Implicit
        nameWithType: ProtectedFloat.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit*
        name: Widening
        nameWithType: ProtectedFloat.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedFloat.op_Addition*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Addition*
        name: Addition
        nameWithType: ProtectedFloat.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Addition
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Addition*
        name: Addition
        nameWithType: ProtectedFloat.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Addition
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.op_Addition
  GUPS.AntiCheat.Protected.ProtectedFloat.op_Subtraction*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedFloat.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Subtraction
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedFloat.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Subtraction
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.op_Subtraction
  GUPS.AntiCheat.Protected.ProtectedFloat.op_Multiply*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Multiply*
        name: Multiply
        nameWithType: ProtectedFloat.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Multiply
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Multiply*
        name: Multiply
        nameWithType: ProtectedFloat.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Multiply
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.op_Multiply
  GUPS.AntiCheat.Protected.ProtectedFloat.op_Division*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Division*
        name: Division
        nameWithType: ProtectedFloat.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Division
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Division*
        name: Division
        nameWithType: ProtectedFloat.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Division
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.op_Division
  GUPS.AntiCheat.Protected.ProtectedFloat.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Equality*
        name: Equality
        nameWithType: ProtectedFloat.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Equality*
        name: Equality
        nameWithType: ProtectedFloat.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.op_Equality
  GUPS.AntiCheat.Protected.ProtectedFloat.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Inequality*
        name: Inequality
        nameWithType: ProtectedFloat.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_Inequality*
        name: Inequality
        nameWithType: ProtectedFloat.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedFloat.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.Equals*
        name: Equals
        nameWithType: ProtectedFloat.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.Equals*
        name: Equals
        nameWithType: ProtectedFloat.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.Equals
  GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThan*
        name: LessThan
        nameWithType: ProtectedFloat.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.LessThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThan*
        name: LessThan
        nameWithType: ProtectedFloat.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.LessThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThan
  GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedFloat.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.LessThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedFloat.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.LessThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.op_LessThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedFloat.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.GreaterThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedFloat.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.GreaterThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThan
  GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedFloat.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.GreaterThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedFloat.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedFloat.GreaterThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedFloat.op_GreaterThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedInt16.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedInt16.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedInt16.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedInt16.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedInt16.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedInt16.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedInt16.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedInt16.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedInt16.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.OnAfterDeserialize
  GUPS.AntiCheat.Int16:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: Int16
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: Int16
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.ProtectedInt16.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.#ctor*
        name: ProtectedInt16
        nameWithType: ProtectedInt16.ProtectedInt16
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.ProtectedInt16
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.#ctor*
        name: ProtectedInt16
        nameWithType: ProtectedInt16.ProtectedInt16
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.ProtectedInt16
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.#ctor
  GUPS.AntiCheat.Protected.ProtectedInt16.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.Value*
        name: Value
        nameWithType: ProtectedInt16.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.Value*
        name: Value
        nameWithType: ProtectedInt16.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.Value
  GUPS.AntiCheat.Protected.ProtectedInt16.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedInt16.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedInt16.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedInt16.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedInt16.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedInt16.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedInt16.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.Dispose*
        name: Dispose
        nameWithType: ProtectedInt16.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.Dispose*
        name: Dispose
        nameWithType: ProtectedInt16.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.Dispose
  GUPS.AntiCheat.Protected.ProtectedInt16.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.ToString*
        name: ToString
        nameWithType: ProtectedInt16.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.ToString*
        name: ToString
        nameWithType: ProtectedInt16.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.ToString
  GUPS.AntiCheat.Protected.ProtectedInt16.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedInt16.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedInt16.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedInt16.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Implicit*
        name: Implicit
        nameWithType: ProtectedInt16.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Implicit*
        name: Widening
        nameWithType: ProtectedInt16.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedInt16.op_Addition*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Addition*
        name: Addition
        nameWithType: ProtectedInt16.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Addition
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Addition*
        name: Addition
        nameWithType: ProtectedInt16.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Addition
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.op_Addition
  GUPS.AntiCheat.Protected.ProtectedInt16.op_Subtraction*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedInt16.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Subtraction
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedInt16.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Subtraction
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.op_Subtraction
  GUPS.AntiCheat.Protected.ProtectedInt16.op_Multiply*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Multiply*
        name: Multiply
        nameWithType: ProtectedInt16.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Multiply
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Multiply*
        name: Multiply
        nameWithType: ProtectedInt16.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Multiply
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.op_Multiply
  GUPS.AntiCheat.Protected.ProtectedInt16.op_Division*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Division*
        name: Division
        nameWithType: ProtectedInt16.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Division
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Division*
        name: Division
        nameWithType: ProtectedInt16.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Division
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.op_Division
  GUPS.AntiCheat.Protected.ProtectedInt16.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Equality*
        name: Equality
        nameWithType: ProtectedInt16.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Equality*
        name: Equality
        nameWithType: ProtectedInt16.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.op_Equality
  GUPS.AntiCheat.Protected.ProtectedInt16.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Inequality*
        name: Inequality
        nameWithType: ProtectedInt16.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_Inequality*
        name: Inequality
        nameWithType: ProtectedInt16.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedInt16.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.Equals*
        name: Equals
        nameWithType: ProtectedInt16.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.Equals*
        name: Equals
        nameWithType: ProtectedInt16.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.Equals
  GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThan*
        name: LessThan
        nameWithType: ProtectedInt16.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.LessThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThan*
        name: LessThan
        nameWithType: ProtectedInt16.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.LessThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThan
  GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedInt16.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.LessThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedInt16.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.LessThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.op_LessThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedInt16.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.GreaterThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedInt16.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.GreaterThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThan
  GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedInt16.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.GreaterThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedInt16.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt16.GreaterThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt16.op_GreaterThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedInt32.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedInt32.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedInt32.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedInt32.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedInt32.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedInt32.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedInt32.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedInt32.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedInt32.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.OnAfterDeserialize
  GUPS.AntiCheat.Protected.ProtectedInt32.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.#ctor*
        name: ProtectedInt32
        nameWithType: ProtectedInt32.ProtectedInt32
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.ProtectedInt32
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.#ctor*
        name: ProtectedInt32
        nameWithType: ProtectedInt32.ProtectedInt32
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.ProtectedInt32
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.#ctor
  GUPS.AntiCheat.Protected.ProtectedInt32.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.Value*
        name: Value
        nameWithType: ProtectedInt32.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.Value*
        name: Value
        nameWithType: ProtectedInt32.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.Value
  GUPS.AntiCheat.Protected.ProtectedInt32.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedInt32.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedInt32.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedInt32.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedInt32.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedInt32.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedInt32.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.Dispose*
        name: Dispose
        nameWithType: ProtectedInt32.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.Dispose*
        name: Dispose
        nameWithType: ProtectedInt32.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.Dispose
  GUPS.AntiCheat.Protected.ProtectedInt32.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.ToString*
        name: ToString
        nameWithType: ProtectedInt32.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.ToString*
        name: ToString
        nameWithType: ProtectedInt32.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.ToString
  GUPS.AntiCheat.Protected.ProtectedInt32.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedInt32.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedInt32.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedInt32.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Implicit*
        name: Implicit
        nameWithType: ProtectedInt32.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Implicit*
        name: Widening
        nameWithType: ProtectedInt32.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedInt32.op_Addition*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Addition*
        name: Addition
        nameWithType: ProtectedInt32.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Addition
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Addition*
        name: Addition
        nameWithType: ProtectedInt32.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Addition
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.op_Addition
  GUPS.AntiCheat.Protected.ProtectedInt32.op_Subtraction*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedInt32.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Subtraction
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedInt32.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Subtraction
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.op_Subtraction
  GUPS.AntiCheat.Protected.ProtectedInt32.op_Multiply*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Multiply*
        name: Multiply
        nameWithType: ProtectedInt32.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Multiply
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Multiply*
        name: Multiply
        nameWithType: ProtectedInt32.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Multiply
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.op_Multiply
  GUPS.AntiCheat.Protected.ProtectedInt32.op_Division*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Division*
        name: Division
        nameWithType: ProtectedInt32.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Division
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Division*
        name: Division
        nameWithType: ProtectedInt32.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Division
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.op_Division
  GUPS.AntiCheat.Protected.ProtectedInt32.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Equality*
        name: Equality
        nameWithType: ProtectedInt32.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Equality*
        name: Equality
        nameWithType: ProtectedInt32.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.op_Equality
  GUPS.AntiCheat.Protected.ProtectedInt32.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Inequality*
        name: Inequality
        nameWithType: ProtectedInt32.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_Inequality*
        name: Inequality
        nameWithType: ProtectedInt32.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedInt32.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.Equals*
        name: Equals
        nameWithType: ProtectedInt32.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.Equals*
        name: Equals
        nameWithType: ProtectedInt32.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.Equals
  GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThan*
        name: LessThan
        nameWithType: ProtectedInt32.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.LessThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThan*
        name: LessThan
        nameWithType: ProtectedInt32.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.LessThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThan
  GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedInt32.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.LessThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedInt32.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.LessThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.op_LessThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedInt32.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.GreaterThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedInt32.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.GreaterThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThan
  GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedInt32.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.GreaterThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedInt32.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt32.GreaterThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt32.op_GreaterThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedInt64.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedInt64.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedInt64.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedInt64.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedInt64.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedInt64.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedInt64.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedInt64.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedInt64.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.OnAfterDeserialize
  GUPS.AntiCheat.Int64:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: Int64
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: Int64
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.ProtectedInt64.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.#ctor*
        name: ProtectedInt64
        nameWithType: ProtectedInt64.ProtectedInt64
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.ProtectedInt64
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.#ctor*
        name: ProtectedInt64
        nameWithType: ProtectedInt64.ProtectedInt64
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.ProtectedInt64
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.#ctor
  GUPS.AntiCheat.Protected.ProtectedInt64.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.Value*
        name: Value
        nameWithType: ProtectedInt64.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.Value*
        name: Value
        nameWithType: ProtectedInt64.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.Value
  GUPS.AntiCheat.Protected.ProtectedInt64.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedInt64.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedInt64.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedInt64.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedInt64.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedInt64.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedInt64.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.Dispose*
        name: Dispose
        nameWithType: ProtectedInt64.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.Dispose*
        name: Dispose
        nameWithType: ProtectedInt64.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.Dispose
  GUPS.AntiCheat.Protected.ProtectedInt64.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.ToString*
        name: ToString
        nameWithType: ProtectedInt64.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.ToString*
        name: ToString
        nameWithType: ProtectedInt64.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.ToString
  GUPS.AntiCheat.Protected.ProtectedInt64.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedInt64.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedInt64.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedInt64.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Implicit*
        name: Implicit
        nameWithType: ProtectedInt64.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Implicit*
        name: Widening
        nameWithType: ProtectedInt64.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedInt64.op_Addition*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Addition*
        name: Addition
        nameWithType: ProtectedInt64.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Addition
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Addition*
        name: Addition
        nameWithType: ProtectedInt64.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Addition
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.op_Addition
  GUPS.AntiCheat.Protected.ProtectedInt64.op_Subtraction*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedInt64.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Subtraction
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedInt64.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Subtraction
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.op_Subtraction
  GUPS.AntiCheat.Protected.ProtectedInt64.op_Multiply*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Multiply*
        name: Multiply
        nameWithType: ProtectedInt64.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Multiply
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Multiply*
        name: Multiply
        nameWithType: ProtectedInt64.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Multiply
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.op_Multiply
  GUPS.AntiCheat.Protected.ProtectedInt64.op_Division*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Division*
        name: Division
        nameWithType: ProtectedInt64.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Division
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Division*
        name: Division
        nameWithType: ProtectedInt64.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Division
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.op_Division
  GUPS.AntiCheat.Protected.ProtectedInt64.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Equality*
        name: Equality
        nameWithType: ProtectedInt64.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Equality*
        name: Equality
        nameWithType: ProtectedInt64.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.op_Equality
  GUPS.AntiCheat.Protected.ProtectedInt64.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Inequality*
        name: Inequality
        nameWithType: ProtectedInt64.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_Inequality*
        name: Inequality
        nameWithType: ProtectedInt64.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedInt64.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.Equals*
        name: Equals
        nameWithType: ProtectedInt64.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.Equals*
        name: Equals
        nameWithType: ProtectedInt64.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.Equals
  GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThan*
        name: LessThan
        nameWithType: ProtectedInt64.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.LessThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThan*
        name: LessThan
        nameWithType: ProtectedInt64.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.LessThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThan
  GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedInt64.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.LessThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedInt64.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.LessThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.op_LessThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedInt64.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.GreaterThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedInt64.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.GreaterThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThan
  GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedInt64.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.GreaterThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedInt64.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedInt64.GreaterThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedInt64.op_GreaterThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedQuaternion.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedQuaternion.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedQuaternion.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedQuaternion.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedQuaternion.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedQuaternion.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedQuaternion.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedQuaternion.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedQuaternion.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.OnAfterDeserialize
  GUPS.AntiCheat.Quaternion:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.ProtectedQuaternion.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.#ctor*
        name: ProtectedQuaternion
        nameWithType: ProtectedQuaternion.ProtectedQuaternion
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.ProtectedQuaternion
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.#ctor*
        name: ProtectedQuaternion
        nameWithType: ProtectedQuaternion.ProtectedQuaternion
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.ProtectedQuaternion
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.#ctor
  GUPS.AntiCheat.Protected.ProtectedQuaternion.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.Value*
        name: Value
        nameWithType: ProtectedQuaternion.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.Value*
        name: Value
        nameWithType: ProtectedQuaternion.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.Value
  GUPS.AntiCheat.Protected.ProtectedQuaternion.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedQuaternion.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedQuaternion.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedQuaternion.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedQuaternion.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedQuaternion.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedQuaternion.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.Dispose*
        name: Dispose
        nameWithType: ProtectedQuaternion.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.Dispose*
        name: Dispose
        nameWithType: ProtectedQuaternion.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.Dispose
  GUPS.AntiCheat.Protected.ProtectedQuaternion.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.ToString*
        name: ToString
        nameWithType: ProtectedQuaternion.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.ToString*
        name: ToString
        nameWithType: ProtectedQuaternion.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.ToString
  GUPS.AntiCheat.Protected.ProtectedQuaternion.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedQuaternion.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedQuaternion.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedQuaternion:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion
        name: ProtectedQuaternion
        nameWithType: ProtectedQuaternion
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion
        name: ProtectedQuaternion
        nameWithType: ProtectedQuaternion
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedQuaternion
  GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Implicit*
        name: Implicit
        nameWithType: ProtectedQuaternion.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Implicit*
        name: Widening
        nameWithType: ProtectedQuaternion.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Equality*
        name: Equality
        nameWithType: ProtectedQuaternion.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Equality*
        name: Equality
        nameWithType: ProtectedQuaternion.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Equality
  GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Inequality*
        name: Inequality
        nameWithType: ProtectedQuaternion.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Inequality*
        name: Inequality
        nameWithType: ProtectedQuaternion.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedQuaternion.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.Equals*
        name: Equals
        nameWithType: ProtectedQuaternion.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedQuaternion.Equals*
        name: Equals
        nameWithType: ProtectedQuaternion.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedQuaternion.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedQuaternion.Equals
  GUPS.AntiCheat.Protected.ProtectedString.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedString.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedString.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedString.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedString.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedString.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedString.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedString.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedString.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.OnAfterDeserialize
  GUPS.AntiCheat.Protected.ProtectedString.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.#ctor*
        name: ProtectedString
        nameWithType: ProtectedString.ProtectedString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.ProtectedString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.#ctor*
        name: ProtectedString
        nameWithType: ProtectedString.ProtectedString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.ProtectedString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.#ctor
  GUPS.AntiCheat.Protected.ProtectedString.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.Value*
        name: Value
        nameWithType: ProtectedString.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.Value*
        name: Value
        nameWithType: ProtectedString.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.Value
  GUPS.AntiCheat.Protected.ProtectedString.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedString.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedString.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedString.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedString.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedString.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedString.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.Dispose*
        name: Dispose
        nameWithType: ProtectedString.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.Dispose*
        name: Dispose
        nameWithType: ProtectedString.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.Dispose
  GUPS.AntiCheat.Protected.ProtectedString.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.ToString*
        name: ToString
        nameWithType: ProtectedString.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.ToString*
        name: ToString
        nameWithType: ProtectedString.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.ToString
  GUPS.AntiCheat.Protected.ProtectedString.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedString.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedString.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedString:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString
        name: ProtectedString
        nameWithType: ProtectedString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString
        name: ProtectedString
        nameWithType: ProtectedString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedString
  GUPS.AntiCheat.Protected.ProtectedString.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.op_Implicit*
        name: Implicit
        nameWithType: ProtectedString.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.op_Implicit*
        name: Widening
        nameWithType: ProtectedString.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedString.op_Addition*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.op_Addition*
        name: Addition
        nameWithType: ProtectedString.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Addition
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.op_Addition*
        name: Addition
        nameWithType: ProtectedString.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Addition
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.op_Addition
  GUPS.AntiCheat.Protected.ProtectedString.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.op_Equality*
        name: Equality
        nameWithType: ProtectedString.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.op_Equality*
        name: Equality
        nameWithType: ProtectedString.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.op_Equality
  GUPS.AntiCheat.Protected.ProtectedString.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.op_Inequality*
        name: Inequality
        nameWithType: ProtectedString.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.op_Inequality*
        name: Inequality
        nameWithType: ProtectedString.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedString.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedString.Equals*
        name: Equals
        nameWithType: ProtectedString.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedString.Equals*
        name: Equals
        nameWithType: ProtectedString.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedString.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedString.Equals
  GUPS.AntiCheat.Protected.ProtectedUInt16.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedUInt16.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedUInt16.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedUInt16.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedUInt16.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedUInt16.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedUInt16.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedUInt16.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedUInt16.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.OnAfterDeserialize
  GUPS.AntiCheat.UInt16:
    name:
      CSharp:
      - id: GUPS.AntiCheat.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: UInt16
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: UInt16
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.ProtectedUInt16.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.#ctor*
        name: ProtectedUInt16
        nameWithType: ProtectedUInt16.ProtectedUInt16
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.ProtectedUInt16
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.#ctor*
        name: ProtectedUInt16
        nameWithType: ProtectedUInt16.ProtectedUInt16
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.ProtectedUInt16
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.#ctor
  GUPS.AntiCheat.Protected.ProtectedUInt16.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.Value*
        name: Value
        nameWithType: ProtectedUInt16.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.Value*
        name: Value
        nameWithType: ProtectedUInt16.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.Value
  GUPS.AntiCheat.Protected.ProtectedUInt16.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedUInt16.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedUInt16.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedUInt16.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedUInt16.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedUInt16.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedUInt16.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.Dispose*
        name: Dispose
        nameWithType: ProtectedUInt16.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.Dispose*
        name: Dispose
        nameWithType: ProtectedUInt16.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.Dispose
  GUPS.AntiCheat.Protected.ProtectedUInt16.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.ToString*
        name: ToString
        nameWithType: ProtectedUInt16.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.ToString*
        name: ToString
        nameWithType: ProtectedUInt16.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.ToString
  GUPS.AntiCheat.Protected.ProtectedUInt16.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedUInt16.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedUInt16.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedUInt16:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16
        name: ProtectedUInt16
        nameWithType: ProtectedUInt16
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16
        name: ProtectedUInt16
        nameWithType: ProtectedUInt16
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedUInt16
  GUPS.AntiCheat.Protected.ProtectedUInt16.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Implicit*
        name: Implicit
        nameWithType: ProtectedUInt16.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Implicit*
        name: Widening
        nameWithType: ProtectedUInt16.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedUInt16.op_Addition*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Addition*
        name: Addition
        nameWithType: ProtectedUInt16.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Addition
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Addition*
        name: Addition
        nameWithType: ProtectedUInt16.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Addition
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Addition
  GUPS.AntiCheat.Protected.ProtectedUInt16.op_Subtraction*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedUInt16.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Subtraction
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedUInt16.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Subtraction
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Subtraction
  GUPS.AntiCheat.Protected.ProtectedUInt16.op_Multiply*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Multiply*
        name: Multiply
        nameWithType: ProtectedUInt16.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Multiply
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Multiply*
        name: Multiply
        nameWithType: ProtectedUInt16.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Multiply
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Multiply
  GUPS.AntiCheat.Protected.ProtectedUInt16.op_Division*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Division*
        name: Division
        nameWithType: ProtectedUInt16.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Division
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Division*
        name: Division
        nameWithType: ProtectedUInt16.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Division
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Division
  GUPS.AntiCheat.Protected.ProtectedUInt16.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Equality*
        name: Equality
        nameWithType: ProtectedUInt16.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Equality*
        name: Equality
        nameWithType: ProtectedUInt16.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Equality
  GUPS.AntiCheat.Protected.ProtectedUInt16.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Inequality*
        name: Inequality
        nameWithType: ProtectedUInt16.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_Inequality*
        name: Inequality
        nameWithType: ProtectedUInt16.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedUInt16.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.Equals*
        name: Equals
        nameWithType: ProtectedUInt16.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.Equals*
        name: Equals
        nameWithType: ProtectedUInt16.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.Equals
  GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThan*
        name: LessThan
        nameWithType: ProtectedUInt16.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.LessThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThan*
        name: LessThan
        nameWithType: ProtectedUInt16.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.LessThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThan
  GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedUInt16.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.LessThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedUInt16.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.LessThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.op_LessThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedUInt16.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.GreaterThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedUInt16.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.GreaterThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThan
  GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedUInt16.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.GreaterThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedUInt16.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt16.GreaterThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt16.op_GreaterThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedUInt32.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedUInt32.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedUInt32.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedUInt32.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedUInt32.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedUInt32.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedUInt32.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedUInt32.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedUInt32.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.OnAfterDeserialize
  GUPS.AntiCheat.Protected.ProtectedUInt32.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.#ctor*
        name: ProtectedUInt32
        nameWithType: ProtectedUInt32.ProtectedUInt32
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.ProtectedUInt32
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.#ctor*
        name: ProtectedUInt32
        nameWithType: ProtectedUInt32.ProtectedUInt32
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.ProtectedUInt32
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.#ctor
  GUPS.AntiCheat.Protected.ProtectedUInt32.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.Value*
        name: Value
        nameWithType: ProtectedUInt32.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.Value*
        name: Value
        nameWithType: ProtectedUInt32.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.Value
  GUPS.AntiCheat.Protected.ProtectedUInt32.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedUInt32.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedUInt32.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedUInt32.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedUInt32.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedUInt32.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedUInt32.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.Dispose*
        name: Dispose
        nameWithType: ProtectedUInt32.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.Dispose*
        name: Dispose
        nameWithType: ProtectedUInt32.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.Dispose
  GUPS.AntiCheat.Protected.ProtectedUInt32.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.ToString*
        name: ToString
        nameWithType: ProtectedUInt32.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.ToString*
        name: ToString
        nameWithType: ProtectedUInt32.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.ToString
  GUPS.AntiCheat.Protected.ProtectedUInt32.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedUInt32.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedUInt32.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedUInt32:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32
        name: ProtectedUInt32
        nameWithType: ProtectedUInt32
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32
        name: ProtectedUInt32
        nameWithType: ProtectedUInt32
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedUInt32
  GUPS.AntiCheat.Protected.ProtectedUInt32.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Implicit*
        name: Implicit
        nameWithType: ProtectedUInt32.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Implicit*
        name: Widening
        nameWithType: ProtectedUInt32.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedUInt32.op_Addition*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Addition*
        name: Addition
        nameWithType: ProtectedUInt32.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Addition
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Addition*
        name: Addition
        nameWithType: ProtectedUInt32.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Addition
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Addition
  GUPS.AntiCheat.Protected.ProtectedUInt32.op_Subtraction*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedUInt32.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Subtraction
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedUInt32.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Subtraction
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Subtraction
  GUPS.AntiCheat.Protected.ProtectedUInt32.op_Multiply*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Multiply*
        name: Multiply
        nameWithType: ProtectedUInt32.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Multiply
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Multiply*
        name: Multiply
        nameWithType: ProtectedUInt32.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Multiply
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Multiply
  GUPS.AntiCheat.Protected.ProtectedUInt32.op_Division*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Division*
        name: Division
        nameWithType: ProtectedUInt32.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Division
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Division*
        name: Division
        nameWithType: ProtectedUInt32.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Division
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Division
  GUPS.AntiCheat.Protected.ProtectedUInt32.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Equality*
        name: Equality
        nameWithType: ProtectedUInt32.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Equality*
        name: Equality
        nameWithType: ProtectedUInt32.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Equality
  GUPS.AntiCheat.Protected.ProtectedUInt32.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Inequality*
        name: Inequality
        nameWithType: ProtectedUInt32.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_Inequality*
        name: Inequality
        nameWithType: ProtectedUInt32.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedUInt32.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.Equals*
        name: Equals
        nameWithType: ProtectedUInt32.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.Equals*
        name: Equals
        nameWithType: ProtectedUInt32.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.Equals
  GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThan*
        name: LessThan
        nameWithType: ProtectedUInt32.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.LessThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThan*
        name: LessThan
        nameWithType: ProtectedUInt32.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.LessThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThan
  GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedUInt32.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.LessThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedUInt32.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.LessThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.op_LessThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedUInt32.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.GreaterThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedUInt32.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.GreaterThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThan
  GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedUInt32.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.GreaterThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedUInt32.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt32.GreaterThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt32.op_GreaterThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedUInt64.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedUInt64.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedUInt64.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedUInt64.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedUInt64.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedUInt64.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedUInt64.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedUInt64.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedUInt64.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.OnAfterDeserialize
  GUPS.AntiCheat.UInt64:
    name:
      CSharp:
      - id: GUPS.AntiCheat.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: UInt64
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: UInt64
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.ProtectedUInt64.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.#ctor*
        name: ProtectedUInt64
        nameWithType: ProtectedUInt64.ProtectedUInt64
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.ProtectedUInt64
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.#ctor*
        name: ProtectedUInt64
        nameWithType: ProtectedUInt64.ProtectedUInt64
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.ProtectedUInt64
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.#ctor
  GUPS.AntiCheat.Protected.ProtectedUInt64.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.Value*
        name: Value
        nameWithType: ProtectedUInt64.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.Value*
        name: Value
        nameWithType: ProtectedUInt64.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.Value
  GUPS.AntiCheat.Protected.ProtectedUInt64.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedUInt64.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedUInt64.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedUInt64.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedUInt64.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedUInt64.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedUInt64.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.Dispose*
        name: Dispose
        nameWithType: ProtectedUInt64.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.Dispose*
        name: Dispose
        nameWithType: ProtectedUInt64.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.Dispose
  GUPS.AntiCheat.Protected.ProtectedUInt64.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.ToString*
        name: ToString
        nameWithType: ProtectedUInt64.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.ToString*
        name: ToString
        nameWithType: ProtectedUInt64.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.ToString
  GUPS.AntiCheat.Protected.ProtectedUInt64.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedUInt64.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedUInt64.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedUInt64:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64
        name: ProtectedUInt64
        nameWithType: ProtectedUInt64
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64
        name: ProtectedUInt64
        nameWithType: ProtectedUInt64
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedUInt64
  GUPS.AntiCheat.Protected.ProtectedUInt64.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Implicit*
        name: Implicit
        nameWithType: ProtectedUInt64.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Implicit*
        name: Widening
        nameWithType: ProtectedUInt64.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedUInt64.op_Addition*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Addition*
        name: Addition
        nameWithType: ProtectedUInt64.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Addition
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Addition*
        name: Addition
        nameWithType: ProtectedUInt64.Addition
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Addition
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Addition
  GUPS.AntiCheat.Protected.ProtectedUInt64.op_Subtraction*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedUInt64.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Subtraction
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Subtraction*
        name: Subtraction
        nameWithType: ProtectedUInt64.Subtraction
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Subtraction
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Subtraction
  GUPS.AntiCheat.Protected.ProtectedUInt64.op_Multiply*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Multiply*
        name: Multiply
        nameWithType: ProtectedUInt64.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Multiply
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Multiply*
        name: Multiply
        nameWithType: ProtectedUInt64.Multiply
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Multiply
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Multiply
  GUPS.AntiCheat.Protected.ProtectedUInt64.op_Division*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Division*
        name: Division
        nameWithType: ProtectedUInt64.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Division
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Division*
        name: Division
        nameWithType: ProtectedUInt64.Division
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Division
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Division
  GUPS.AntiCheat.Protected.ProtectedUInt64.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Equality*
        name: Equality
        nameWithType: ProtectedUInt64.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Equality*
        name: Equality
        nameWithType: ProtectedUInt64.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Equality
  GUPS.AntiCheat.Protected.ProtectedUInt64.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Inequality*
        name: Inequality
        nameWithType: ProtectedUInt64.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_Inequality*
        name: Inequality
        nameWithType: ProtectedUInt64.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedUInt64.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.Equals*
        name: Equals
        nameWithType: ProtectedUInt64.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.Equals*
        name: Equals
        nameWithType: ProtectedUInt64.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.Equals
  GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThan*
        name: LessThan
        nameWithType: ProtectedUInt64.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.LessThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThan*
        name: LessThan
        nameWithType: ProtectedUInt64.LessThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.LessThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThan
  GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedUInt64.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.LessThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThanOrEqual*
        name: LessThanOrEqual
        nameWithType: ProtectedUInt64.LessThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.LessThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.op_LessThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThan*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedUInt64.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.GreaterThan
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThan*
        name: GreaterThan
        nameWithType: ProtectedUInt64.GreaterThan
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.GreaterThan
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThan
  GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThanOrEqual*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedUInt64.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.GreaterThanOrEqual
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThanOrEqual*
        name: GreaterThanOrEqual
        nameWithType: ProtectedUInt64.GreaterThanOrEqual
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedUInt64.GreaterThanOrEqual
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedUInt64.op_GreaterThanOrEqual
  GUPS.AntiCheat.Protected.ProtectedVector2.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedVector2.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedVector2.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedVector2.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedVector2.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedVector2.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedVector2.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedVector2.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedVector2.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.OnAfterDeserialize
  GUPS.AntiCheat.Vector2:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.ProtectedVector2.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.#ctor*
        name: ProtectedVector2
        nameWithType: ProtectedVector2.ProtectedVector2
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.ProtectedVector2
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.#ctor*
        name: ProtectedVector2
        nameWithType: ProtectedVector2.ProtectedVector2
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.ProtectedVector2
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.#ctor
  GUPS.AntiCheat.Protected.ProtectedVector2.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.Value*
        name: Value
        nameWithType: ProtectedVector2.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.Value*
        name: Value
        nameWithType: ProtectedVector2.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.Value
  GUPS.AntiCheat.Protected.ProtectedVector2.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedVector2.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedVector2.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedVector2.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedVector2.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedVector2.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedVector2.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.Dispose*
        name: Dispose
        nameWithType: ProtectedVector2.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.Dispose*
        name: Dispose
        nameWithType: ProtectedVector2.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.Dispose
  GUPS.AntiCheat.Protected.ProtectedVector2.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.ToString*
        name: ToString
        nameWithType: ProtectedVector2.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.ToString*
        name: ToString
        nameWithType: ProtectedVector2.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.ToString
  GUPS.AntiCheat.Protected.ProtectedVector2.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedVector2.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedVector2.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedVector2:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2
        name: ProtectedVector2
        nameWithType: ProtectedVector2
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2
        name: ProtectedVector2
        nameWithType: ProtectedVector2
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedVector2
  GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit*
        name: Implicit
        nameWithType: ProtectedVector2.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit*
        name: Widening
        nameWithType: ProtectedVector2.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedVector2.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.op_Equality*
        name: Equality
        nameWithType: ProtectedVector2.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.op_Equality*
        name: Equality
        nameWithType: ProtectedVector2.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.op_Equality
  GUPS.AntiCheat.Protected.ProtectedVector2.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.op_Inequality*
        name: Inequality
        nameWithType: ProtectedVector2.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.op_Inequality*
        name: Inequality
        nameWithType: ProtectedVector2.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedVector2.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.Equals*
        name: Equals
        nameWithType: ProtectedVector2.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2.Equals*
        name: Equals
        nameWithType: ProtectedVector2.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2.Equals
  GUPS.AntiCheat.Protected.ProtectedVector2Int.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedVector2Int.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedVector2Int.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedVector2Int.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedVector2Int.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedVector2Int.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedVector2Int.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedVector2Int.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedVector2Int.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.OnAfterDeserialize
  GUPS.AntiCheat.Vector2Int:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Vector2Int
        name: Vector2Int
        nameWithType: Vector2Int
        qualifiedName: Vector2Int
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Vector2Int
        name: Vector2Int
        nameWithType: Vector2Int
        qualifiedName: Vector2Int
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.ProtectedVector2Int.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.#ctor*
        name: ProtectedVector2Int
        nameWithType: ProtectedVector2Int.ProtectedVector2Int
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.ProtectedVector2Int
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.#ctor*
        name: ProtectedVector2Int
        nameWithType: ProtectedVector2Int.ProtectedVector2Int
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.ProtectedVector2Int
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.#ctor
  GUPS.AntiCheat.Protected.ProtectedVector2Int.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.Value*
        name: Value
        nameWithType: ProtectedVector2Int.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.Value*
        name: Value
        nameWithType: ProtectedVector2Int.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.Value
  GUPS.AntiCheat.Protected.ProtectedVector2Int.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedVector2Int.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedVector2Int.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedVector2Int.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedVector2Int.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedVector2Int.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedVector2Int.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.Dispose*
        name: Dispose
        nameWithType: ProtectedVector2Int.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.Dispose*
        name: Dispose
        nameWithType: ProtectedVector2Int.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.Dispose
  GUPS.AntiCheat.Protected.ProtectedVector2Int.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.ToString*
        name: ToString
        nameWithType: ProtectedVector2Int.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.ToString*
        name: ToString
        nameWithType: ProtectedVector2Int.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.ToString
  GUPS.AntiCheat.Protected.ProtectedVector2Int.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedVector2Int.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedVector2Int.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedVector2Int:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int
        name: ProtectedVector2Int
        nameWithType: ProtectedVector2Int
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int
        name: ProtectedVector2Int
        nameWithType: ProtectedVector2Int
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedVector2Int
  GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit*
        name: Implicit
        nameWithType: ProtectedVector2Int.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit*
        name: Widening
        nameWithType: ProtectedVector2Int.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Equality*
        name: Equality
        nameWithType: ProtectedVector2Int.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Equality*
        name: Equality
        nameWithType: ProtectedVector2Int.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Equality
  GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Inequality*
        name: Inequality
        nameWithType: ProtectedVector2Int.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Inequality*
        name: Inequality
        nameWithType: ProtectedVector2Int.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedVector2Int.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.Equals*
        name: Equals
        nameWithType: ProtectedVector2Int.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector2Int.Equals*
        name: Equals
        nameWithType: ProtectedVector2Int.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector2Int.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector2Int.Equals
  GUPS.AntiCheat.Protected.ProtectedVector3.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedVector3.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedVector3.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedVector3.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedVector3.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedVector3.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedVector3.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedVector3.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedVector3.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.OnAfterDeserialize
  GUPS.AntiCheat.Vector3:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.ProtectedVector3.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.#ctor*
        name: ProtectedVector3
        nameWithType: ProtectedVector3.ProtectedVector3
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.ProtectedVector3
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.#ctor*
        name: ProtectedVector3
        nameWithType: ProtectedVector3.ProtectedVector3
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.ProtectedVector3
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.#ctor
  GUPS.AntiCheat.Protected.ProtectedVector3.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.Value*
        name: Value
        nameWithType: ProtectedVector3.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.Value*
        name: Value
        nameWithType: ProtectedVector3.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.Value
  GUPS.AntiCheat.Protected.ProtectedVector3.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedVector3.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedVector3.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedVector3.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedVector3.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedVector3.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedVector3.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.Dispose*
        name: Dispose
        nameWithType: ProtectedVector3.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.Dispose*
        name: Dispose
        nameWithType: ProtectedVector3.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.Dispose
  GUPS.AntiCheat.Protected.ProtectedVector3.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.ToString*
        name: ToString
        nameWithType: ProtectedVector3.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.ToString*
        name: ToString
        nameWithType: ProtectedVector3.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.ToString
  GUPS.AntiCheat.Protected.ProtectedVector3.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedVector3.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedVector3.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedVector3:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3
        name: ProtectedVector3
        nameWithType: ProtectedVector3
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3
        name: ProtectedVector3
        nameWithType: ProtectedVector3
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedVector3
  GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit*
        name: Implicit
        nameWithType: ProtectedVector3.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit*
        name: Widening
        nameWithType: ProtectedVector3.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedVector3.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.op_Equality*
        name: Equality
        nameWithType: ProtectedVector3.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.op_Equality*
        name: Equality
        nameWithType: ProtectedVector3.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.op_Equality
  GUPS.AntiCheat.Protected.ProtectedVector3.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.op_Inequality*
        name: Inequality
        nameWithType: ProtectedVector3.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.op_Inequality*
        name: Inequality
        nameWithType: ProtectedVector3.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedVector3.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.Equals*
        name: Equals
        nameWithType: ProtectedVector3.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3.Equals*
        name: Equals
        nameWithType: ProtectedVector3.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3.Equals
  GUPS.AntiCheat.Protected.ProtectedVector3Int.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedVector3Int.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedVector3Int.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedVector3Int.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedVector3Int.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedVector3Int.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedVector3Int.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedVector3Int.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedVector3Int.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.OnAfterDeserialize
  GUPS.AntiCheat.Vector3Int:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Vector3Int
        name: Vector3Int
        nameWithType: Vector3Int
        qualifiedName: Vector3Int
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Vector3Int
        name: Vector3Int
        nameWithType: Vector3Int
        qualifiedName: Vector3Int
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.ProtectedVector3Int.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.#ctor*
        name: ProtectedVector3Int
        nameWithType: ProtectedVector3Int.ProtectedVector3Int
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.ProtectedVector3Int
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.#ctor*
        name: ProtectedVector3Int
        nameWithType: ProtectedVector3Int.ProtectedVector3Int
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.ProtectedVector3Int
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.#ctor
  GUPS.AntiCheat.Protected.ProtectedVector3Int.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.Value*
        name: Value
        nameWithType: ProtectedVector3Int.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.Value*
        name: Value
        nameWithType: ProtectedVector3Int.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.Value
  GUPS.AntiCheat.Protected.ProtectedVector3Int.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedVector3Int.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedVector3Int.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedVector3Int.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedVector3Int.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedVector3Int.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedVector3Int.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.Dispose*
        name: Dispose
        nameWithType: ProtectedVector3Int.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.Dispose*
        name: Dispose
        nameWithType: ProtectedVector3Int.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.Dispose
  GUPS.AntiCheat.Protected.ProtectedVector3Int.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.ToString*
        name: ToString
        nameWithType: ProtectedVector3Int.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.ToString*
        name: ToString
        nameWithType: ProtectedVector3Int.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.ToString
  GUPS.AntiCheat.Protected.ProtectedVector3Int.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedVector3Int.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedVector3Int.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedVector3Int:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int
        name: ProtectedVector3Int
        nameWithType: ProtectedVector3Int
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int
        name: ProtectedVector3Int
        nameWithType: ProtectedVector3Int
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedVector3Int
  GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit*
        name: Implicit
        nameWithType: ProtectedVector3Int.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit*
        name: Widening
        nameWithType: ProtectedVector3Int.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Equality*
        name: Equality
        nameWithType: ProtectedVector3Int.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Equality*
        name: Equality
        nameWithType: ProtectedVector3Int.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Equality
  GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Inequality*
        name: Inequality
        nameWithType: ProtectedVector3Int.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Inequality*
        name: Inequality
        nameWithType: ProtectedVector3Int.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedVector3Int.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.Equals*
        name: Equals
        nameWithType: ProtectedVector3Int.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector3Int.Equals*
        name: Equals
        nameWithType: ProtectedVector3Int.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector3Int.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector3Int.Equals
  GUPS.AntiCheat.Protected.ProtectedVector4.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedVector4.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedVector4.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedVector4.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedVector4.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedVector4.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedVector4.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedVector4.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedVector4.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.OnAfterDeserialize
  GUPS.AntiCheat.Vector4:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Vector4
        name: Vector4
        nameWithType: Vector4
        qualifiedName: Vector4
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Vector4
        name: Vector4
        nameWithType: Vector4
        qualifiedName: Vector4
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.ProtectedVector4.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.#ctor*
        name: ProtectedVector4
        nameWithType: ProtectedVector4.ProtectedVector4
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.ProtectedVector4
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.#ctor*
        name: ProtectedVector4
        nameWithType: ProtectedVector4.ProtectedVector4
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.ProtectedVector4
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.#ctor
  GUPS.AntiCheat.Protected.ProtectedVector4.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.Value*
        name: Value
        nameWithType: ProtectedVector4.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.Value*
        name: Value
        nameWithType: ProtectedVector4.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.Value
  GUPS.AntiCheat.Protected.ProtectedVector4.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedVector4.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedVector4.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedVector4.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedVector4.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedVector4.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedVector4.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.Dispose*
        name: Dispose
        nameWithType: ProtectedVector4.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.Dispose*
        name: Dispose
        nameWithType: ProtectedVector4.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.Dispose
  GUPS.AntiCheat.Protected.ProtectedVector4.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.ToString*
        name: ToString
        nameWithType: ProtectedVector4.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.ToString*
        name: ToString
        nameWithType: ProtectedVector4.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.ToString
  GUPS.AntiCheat.Protected.ProtectedVector4.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedVector4.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedVector4.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedVector4:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4
        name: ProtectedVector4
        nameWithType: ProtectedVector4
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4
        name: ProtectedVector4
        nameWithType: ProtectedVector4
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedVector4
  GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit*
        name: Implicit
        nameWithType: ProtectedVector4.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit*
        name: Widening
        nameWithType: ProtectedVector4.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedVector4.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.op_Equality*
        name: Equality
        nameWithType: ProtectedVector4.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.op_Equality*
        name: Equality
        nameWithType: ProtectedVector4.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.op_Equality
  GUPS.AntiCheat.Protected.ProtectedVector4.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.op_Inequality*
        name: Inequality
        nameWithType: ProtectedVector4.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.op_Inequality*
        name: Inequality
        nameWithType: ProtectedVector4.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedVector4.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.Equals*
        name: Equals
        nameWithType: ProtectedVector4.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4.Equals*
        name: Equals
        nameWithType: ProtectedVector4.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4.Equals
  GUPS.AntiCheat.Protected.ProtectedVector4Int.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedVector4Int.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedVector4Int.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.HasIntegrity
  GUPS.AntiCheat.Protected.ProtectedVector4Int.OnBeforeSerialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedVector4Int.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnBeforeSerialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnBeforeSerialize*
        name: OnBeforeSerialize
        nameWithType: ProtectedVector4Int.OnBeforeSerialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnBeforeSerialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.OnBeforeSerialize
  GUPS.AntiCheat.Protected.ProtectedVector4Int.OnAfterDeserialize*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedVector4Int.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnAfterDeserialize
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnAfterDeserialize*
        name: OnAfterDeserialize
        nameWithType: ProtectedVector4Int.OnAfterDeserialize
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.OnAfterDeserialize
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.OnAfterDeserialize
  GUPS.AntiCheat.Protected.ProtectedVector4Int.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.#ctor*
        name: ProtectedVector4Int
        nameWithType: ProtectedVector4Int.ProtectedVector4Int
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.ProtectedVector4Int
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.#ctor*
        name: ProtectedVector4Int
        nameWithType: ProtectedVector4Int.ProtectedVector4Int
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.ProtectedVector4Int
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.#ctor
  GUPS.AntiCheat.Protected.ProtectedVector4Int.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.Value*
        name: Value
        nameWithType: ProtectedVector4Int.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Value
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.Value*
        name: Value
        nameWithType: ProtectedVector4Int.Value
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.Value
  GUPS.AntiCheat.Protected.ProtectedVector4Int.Obfuscate*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedVector4Int.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Obfuscate
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.Obfuscate*
        name: Obfuscate
        nameWithType: ProtectedVector4Int.Obfuscate
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Obfuscate
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.Obfuscate
  GUPS.AntiCheat.Protected.ProtectedVector4Int.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedVector4Int.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedVector4Int.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.CheckIntegrity
  GUPS.AntiCheat.Protected.ProtectedVector4Int.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.Dispose*
        name: Dispose
        nameWithType: ProtectedVector4Int.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.Dispose*
        name: Dispose
        nameWithType: ProtectedVector4Int.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.Dispose
  GUPS.AntiCheat.Protected.ProtectedVector4Int.ToString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.ToString*
        name: ToString
        nameWithType: ProtectedVector4Int.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.ToString
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.ToString*
        name: ToString
        nameWithType: ProtectedVector4Int.ToString
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.ToString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.ToString
  GUPS.AntiCheat.Protected.ProtectedVector4Int.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedVector4Int.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedVector4Int.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.GetHashCode
  GUPS.AntiCheat.Protected.ProtectedVector4Int:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int
        name: ProtectedVector4Int
        nameWithType: ProtectedVector4Int
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int
        name: ProtectedVector4Int
        nameWithType: ProtectedVector4Int
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int
    isDefinition: true
    parent: GUPS.AntiCheat.Protected
    commentId: T:GUPS.AntiCheat.Protected.ProtectedVector4Int
  GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit*
        name: Implicit
        nameWithType: ProtectedVector4Int.Implicit
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Implicit
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit*
        name: Widening
        nameWithType: ProtectedVector4Int.Widening
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Widening
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Implicit
  GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Equality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Equality*
        name: Equality
        nameWithType: ProtectedVector4Int.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Equality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Equality*
        name: Equality
        nameWithType: ProtectedVector4Int.Equality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Equality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Equality
  GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Inequality*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Inequality*
        name: Inequality
        nameWithType: ProtectedVector4Int.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Inequality
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Inequality*
        name: Inequality
        nameWithType: ProtectedVector4Int.Inequality
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Inequality
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.op_Inequality
  GUPS.AntiCheat.Protected.ProtectedVector4Int.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.Equals*
        name: Equals
        nameWithType: ProtectedVector4Int.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.ProtectedVector4Int.Equals*
        name: Equals
        nameWithType: ProtectedVector4Int.Equals
        qualifiedName: GUPS.AntiCheat.Protected.ProtectedVector4Int.Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.ProtectedVector4Int.Equals
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CheckIntegrity:
    commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CheckIntegrity
  GUPS.AntiCheat.IDataIntegrity:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IDataIntegrity
        name: IDataIntegrity
        nameWithType: IDataIntegrity
        qualifiedName: IDataIntegrity
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.IDataIntegrity
        name: IDataIntegrity
        nameWithType: IDataIntegrity
        qualifiedName: IDataIntegrity
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Item*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Item*
        name: Item
        nameWithType: ProtectedList<T>.Item
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Item
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Item*
        name: Item
        nameWithType: ProtectedList(Of T).Item
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Item
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Item
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Count*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Count*
        name: Count
        nameWithType: ProtectedList<T>.Count
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Count
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Count*
        name: Count
        nameWithType: ProtectedList(Of T).Count
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Count
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Count
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IsReadOnly*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IsReadOnly*
        name: IsReadOnly
        nameWithType: ProtectedList<T>.IsReadOnly
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.IsReadOnly
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IsReadOnly*
        name: IsReadOnly
        nameWithType: ProtectedList(Of T).IsReadOnly
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).IsReadOnly
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IsReadOnly
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Hash*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Hash*
        name: Hash
        nameWithType: ProtectedList<T>.Hash
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Hash
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Hash*
        name: Hash
        nameWithType: ProtectedList(Of T).Hash
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Hash
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Hash
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedList<T>.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedList(Of T).HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.HasIntegrity
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1
        name: ProtectedList
        nameWithType: ProtectedList
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1
        name: ProtectedList
        nameWithType: ProtectedList
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.ProtectedList`1
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.#ctor*
        name: ProtectedList
        nameWithType: ProtectedList<T>.ProtectedList
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.ProtectedList
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.#ctor*
        name: ProtectedList
        nameWithType: ProtectedList(Of T).ProtectedList
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).ProtectedList
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.#ctor
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Add*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Add*
        name: Add
        nameWithType: ProtectedList<T>.Add
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Add
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Add*
        name: Add
        nameWithType: ProtectedList(Of T).Add
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Add
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Add
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Insert*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Insert*
        name: Insert
        nameWithType: ProtectedList<T>.Insert
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Insert
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Insert*
        name: Insert
        nameWithType: ProtectedList(Of T).Insert
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Insert
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Insert
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Contains*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Contains*
        name: Contains
        nameWithType: ProtectedList<T>.Contains
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Contains
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Contains*
        name: Contains
        nameWithType: ProtectedList(Of T).Contains
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Contains
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Contains
  '{T}[]':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CopyTo*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CopyTo*
        name: CopyTo
        nameWithType: ProtectedList<T>.CopyTo
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.CopyTo
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CopyTo*
        name: CopyTo
        nameWithType: ProtectedList(Of T).CopyTo
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).CopyTo
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CopyTo
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IndexOf*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IndexOf*
        name: IndexOf
        nameWithType: ProtectedList<T>.IndexOf
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.IndexOf
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IndexOf*
        name: IndexOf
        nameWithType: ProtectedList(Of T).IndexOf
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).IndexOf
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.IndexOf
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Remove*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Remove*
        name: Remove
        nameWithType: ProtectedList<T>.Remove
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Remove
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Remove*
        name: Remove
        nameWithType: ProtectedList(Of T).Remove
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Remove
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Remove
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.RemoveAt*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.RemoveAt*
        name: RemoveAt
        nameWithType: ProtectedList<T>.RemoveAt
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.RemoveAt
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.RemoveAt*
        name: RemoveAt
        nameWithType: ProtectedList(Of T).RemoveAt
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).RemoveAt
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.RemoveAt
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Clear*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Clear*
        name: Clear
        nameWithType: ProtectedList<T>.Clear
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.Clear
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Clear*
        name: Clear
        nameWithType: ProtectedList(Of T).Clear
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).Clear
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.Clear
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedList<T>.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedList(Of T).CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.CheckIntegrity
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedList<T>.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedList(Of T).GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetHashCode
  System.Collections.IEnumerator`1:
    name:
      CSharp:
      - id: System.Collections.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  System.Collections.IEnumerator{{T}}:
    name:
      CSharp:
      - id: System.Collections.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.IEnumerator`1
    commentId: '!:System.Collections.IEnumerator{`0}'
  GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetEnumerator*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: ProtectedList<T>.GetEnumerator
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList<T>.GetEnumerator
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: ProtectedList(Of T).GetEnumerator
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedList(Of T).GetEnumerator
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedList`1.GetEnumerator
  System.Collections.IEnumerable:
    commentId: T:System.Collections.IEnumerable
  System.Collections.ICollection:
    commentId: T:System.Collections.ICollection
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CheckIntegrity:
    commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CheckIntegrity
  GUPS.AntiCheat.IReadOnlyCollection`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IReadOnlyCollection`1
        name: IReadOnlyCollection
        nameWithType: IReadOnlyCollection
        qualifiedName: IReadOnlyCollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.IReadOnlyCollection`1
        name: IReadOnlyCollection
        nameWithType: IReadOnlyCollection
        qualifiedName: IReadOnlyCollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  GUPS.AntiCheat.IReadOnlyCollection{{T}}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IReadOnlyCollection`1
        name: IReadOnlyCollection
        nameWithType: IReadOnlyCollection
        qualifiedName: IReadOnlyCollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.IReadOnlyCollection`1
        name: IReadOnlyCollection
        nameWithType: IReadOnlyCollection
        qualifiedName: IReadOnlyCollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.IReadOnlyCollection`1
    commentId: '!:GUPS.AntiCheat.IReadOnlyCollection{`0}'
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Hash*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Hash*
        name: Hash
        nameWithType: ProtectedQueue<T>.Hash
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Hash
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Hash*
        name: Hash
        nameWithType: ProtectedQueue(Of T).Hash
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Hash
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Hash
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Count*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Count*
        name: Count
        nameWithType: ProtectedQueue<T>.Count
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Count
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Count*
        name: Count
        nameWithType: ProtectedQueue(Of T).Count
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Count
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Count
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedQueue<T>.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedQueue(Of T).HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.HasIntegrity
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1
        name: ProtectedQueue
        nameWithType: ProtectedQueue
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1
        name: ProtectedQueue
        nameWithType: ProtectedQueue
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor*
        name: ProtectedQueue
        nameWithType: ProtectedQueue<T>.ProtectedQueue
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.ProtectedQueue
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor*
        name: ProtectedQueue
        nameWithType: ProtectedQueue(Of T).ProtectedQueue
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).ProtectedQueue
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.#ctor
  System.Collections.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  System.Collections.IEnumerable{{T}}:
    name:
      CSharp:
      - id: System.Collections.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.IEnumerable`1
    commentId: '!:System.Collections.IEnumerable{`0}'
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Contains*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Contains*
        name: Contains
        nameWithType: ProtectedQueue<T>.Contains
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Contains
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Contains*
        name: Contains
        nameWithType: ProtectedQueue(Of T).Contains
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Contains
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Contains
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Enqueue*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Enqueue*
        name: Enqueue
        nameWithType: ProtectedQueue<T>.Enqueue
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Enqueue
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Enqueue*
        name: Enqueue
        nameWithType: ProtectedQueue(Of T).Enqueue
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Enqueue
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Enqueue
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Peek*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Peek*
        name: Peek
        nameWithType: ProtectedQueue<T>.Peek
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Peek
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Peek*
        name: Peek
        nameWithType: ProtectedQueue(Of T).Peek
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Peek
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Peek
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Dequeue*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Dequeue*
        name: Dequeue
        nameWithType: ProtectedQueue<T>.Dequeue
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Dequeue
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Dequeue*
        name: Dequeue
        nameWithType: ProtectedQueue(Of T).Dequeue
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Dequeue
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Dequeue
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CopyTo*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CopyTo*
        name: CopyTo
        nameWithType: ProtectedQueue<T>.CopyTo
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.CopyTo
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CopyTo*
        name: CopyTo
        nameWithType: ProtectedQueue(Of T).CopyTo
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).CopyTo
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CopyTo
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TrimExcess*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TrimExcess*
        name: TrimExcess
        nameWithType: ProtectedQueue<T>.TrimExcess
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.TrimExcess
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TrimExcess*
        name: TrimExcess
        nameWithType: ProtectedQueue(Of T).TrimExcess
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).TrimExcess
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TrimExcess
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryPeek*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryPeek*
        name: TryPeek
        nameWithType: ProtectedQueue<T>.TryPeek
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.TryPeek
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryPeek*
        name: TryPeek
        nameWithType: ProtectedQueue(Of T).TryPeek
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).TryPeek
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryPeek
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryDequeue*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryDequeue*
        name: TryDequeue
        nameWithType: ProtectedQueue<T>.TryDequeue
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.TryDequeue
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryDequeue*
        name: TryDequeue
        nameWithType: ProtectedQueue(Of T).TryDequeue
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).TryDequeue
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.TryDequeue
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.ToArray*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.ToArray*
        name: ToArray
        nameWithType: ProtectedQueue<T>.ToArray
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.ToArray
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.ToArray*
        name: ToArray
        nameWithType: ProtectedQueue(Of T).ToArray
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).ToArray
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.ToArray
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Clear*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Clear*
        name: Clear
        nameWithType: ProtectedQueue<T>.Clear
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.Clear
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Clear*
        name: Clear
        nameWithType: ProtectedQueue(Of T).Clear
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).Clear
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.Clear
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedQueue<T>.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedQueue(Of T).CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.CheckIntegrity
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedQueue<T>.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedQueue(Of T).GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetHashCode
  GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetEnumerator*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: ProtectedQueue<T>.GetEnumerator
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue<T>.GetEnumerator
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: ProtectedQueue(Of T).GetEnumerator
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedQueue(Of T).GetEnumerator
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedQueue`1.GetEnumerator
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CheckIntegrity:
    commentId: M:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CheckIntegrity
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Hash*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Hash*
        name: Hash
        nameWithType: ProtectedStack<T>.Hash
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Hash
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Hash*
        name: Hash
        nameWithType: ProtectedStack(Of T).Hash
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Hash
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Hash
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedStack<T>.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.HasIntegrity*
        name: HasIntegrity
        nameWithType: ProtectedStack(Of T).HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.HasIntegrity
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1
        name: ProtectedStack
        nameWithType: ProtectedStack
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1
        name: ProtectedStack
        nameWithType: ProtectedStack
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor*
        name: ProtectedStack
        nameWithType: ProtectedStack<T>.ProtectedStack
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.ProtectedStack
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor*
        name: ProtectedStack
        nameWithType: ProtectedStack(Of T).ProtectedStack
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).ProtectedStack
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.#ctor
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Count*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Count*
        name: Count
        nameWithType: ProtectedStack<T>.Count
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Count
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Count*
        name: Count
        nameWithType: ProtectedStack(Of T).Count
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Count
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Count
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Contains*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Contains*
        name: Contains
        nameWithType: ProtectedStack<T>.Contains
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Contains
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Contains*
        name: Contains
        nameWithType: ProtectedStack(Of T).Contains
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Contains
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Contains
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CopyTo*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CopyTo*
        name: CopyTo
        nameWithType: ProtectedStack<T>.CopyTo
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.CopyTo
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CopyTo*
        name: CopyTo
        nameWithType: ProtectedStack(Of T).CopyTo
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).CopyTo
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CopyTo
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Push*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Push*
        name: Push
        nameWithType: ProtectedStack<T>.Push
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Push
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Push*
        name: Push
        nameWithType: ProtectedStack(Of T).Push
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Push
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Push
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Peek*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Peek*
        name: Peek
        nameWithType: ProtectedStack<T>.Peek
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Peek
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Peek*
        name: Peek
        nameWithType: ProtectedStack(Of T).Peek
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Peek
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Peek
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Pop*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Pop*
        name: Pop
        nameWithType: ProtectedStack<T>.Pop
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Pop
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Pop*
        name: Pop
        nameWithType: ProtectedStack(Of T).Pop
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Pop
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Pop
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TrimExcess*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TrimExcess*
        name: TrimExcess
        nameWithType: ProtectedStack<T>.TrimExcess
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.TrimExcess
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TrimExcess*
        name: TrimExcess
        nameWithType: ProtectedStack(Of T).TrimExcess
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).TrimExcess
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TrimExcess
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPeek*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPeek*
        name: TryPeek
        nameWithType: ProtectedStack<T>.TryPeek
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.TryPeek
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPeek*
        name: TryPeek
        nameWithType: ProtectedStack(Of T).TryPeek
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).TryPeek
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPeek
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPop*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPop*
        name: TryPop
        nameWithType: ProtectedStack<T>.TryPop
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.TryPop
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPop*
        name: TryPop
        nameWithType: ProtectedStack(Of T).TryPop
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).TryPop
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.TryPop
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.ToArray*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.ToArray*
        name: ToArray
        nameWithType: ProtectedStack<T>.ToArray
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.ToArray
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.ToArray*
        name: ToArray
        nameWithType: ProtectedStack(Of T).ToArray
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).ToArray
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.ToArray
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Clear*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Clear*
        name: Clear
        nameWithType: ProtectedStack<T>.Clear
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.Clear
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Clear*
        name: Clear
        nameWithType: ProtectedStack(Of T).Clear
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).Clear
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.Clear
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedStack<T>.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: ProtectedStack(Of T).CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.CheckIntegrity
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedStack<T>.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetHashCode*
        name: GetHashCode
        nameWithType: ProtectedStack(Of T).GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetHashCode
  GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetEnumerator*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: ProtectedStack<T>.GetEnumerator
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack<T>.GetEnumerator
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: ProtectedStack(Of T).GetEnumerator
        qualifiedName: GUPS.AntiCheat.Protected.Collection.ProtectedStack(Of T).GetEnumerator
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.ProtectedStack`1.GetEnumerator
  GUPS.AntiCheat.Protected.Collection:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Protected.Collection
        nameWithType: GUPS.AntiCheat.Protected.Collection
        qualifiedName: GUPS.AntiCheat.Protected.Collection
      VB:
      - name: GUPS.AntiCheat.Protected.Collection
        nameWithType: GUPS.AntiCheat.Protected.Collection
        qualifiedName: GUPS.AntiCheat.Protected.Collection
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Protected.Collection
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1
        name: IBlock
        nameWithType: IBlock
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1
        name: IBlock
        nameWithType: IBlock
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1
  GUPS.AntiCheat.Protected.Collection.Chain:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Protected.Collection.Chain
        nameWithType: GUPS.AntiCheat.Protected.Collection.Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain
      VB:
      - name: GUPS.AntiCheat.Protected.Collection.Chain
        nameWithType: GUPS.AntiCheat.Protected.Collection.Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Protected.Collection.Chain
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock{{T}}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1
        name: IBlock
        nameWithType: IBlock
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1
        name: IBlock
        nameWithType: IBlock
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1
    parent: GUPS.AntiCheat.Protected.Collection.Chain
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.IBlock{`0}
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Size*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Size*
        name: Size
        nameWithType: Block<T>.Size
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Size
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Size*
        name: Size
        nameWithType: Block(Of T).Size
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Size
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Size
  GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[]:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Items*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Items*
        name: Items
        nameWithType: Block<T>.Items
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Items
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Items*
        name: Items
        nameWithType: Block(Of T).Items
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Items
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Items
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items
        name: Items
        nameWithType: IBlock<T>.Items
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Items
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items
        name: Items
        nameWithType: IBlock(Of T).Items
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Items
    isDefinition: true
    commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock{{T}}.Items:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items
        name: Items
        nameWithType: IBlock<T>.Items
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Items
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items
        name: Items
        nameWithType: IBlock(Of T).Items
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Items
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items
    parent: GUPS.AntiCheat.Protected.Collection.Chain.IBlock{{T}}
    commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IBlock{`0}.Items
  GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
  GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
    parent: GUPS.AntiCheat.Protected.Collection.Chain
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Item*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Item*
        name: Item
        nameWithType: Block<T>.Item
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Item
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Item*
        name: Item
        nameWithType: Block(Of T).Item
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Item
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Item
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Count*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Count*
        name: Count
        nameWithType: Block<T>.Count
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Count
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Count*
        name: Count
        nameWithType: Block(Of T).Count
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Count
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Count
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Last*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Last*
        name: Last
        nameWithType: Block<T>.Last
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Last
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Last*
        name: Last
        nameWithType: Block(Of T).Last
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Last
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Last
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last
        name: Last
        nameWithType: IBlock<T>.Last
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Last
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last
        name: Last
        nameWithType: IBlock(Of T).Last
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Last
    isDefinition: true
    commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock{{T}}.Last:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last
        name: Last
        nameWithType: IBlock<T>.Last
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Last
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last
        name: Last
        nameWithType: IBlock(Of T).Last
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Last
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last
    parent: GUPS.AntiCheat.Protected.Collection.Chain.IBlock{{T}}
    commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IBlock{`0}.Last
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.LastTransactionTimestamp*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.LastTransactionTimestamp*
        name: LastTransactionTimestamp
        nameWithType: Block<T>.LastTransactionTimestamp
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.LastTransactionTimestamp
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.LastTransactionTimestamp*
        name: LastTransactionTimestamp
        nameWithType: Block(Of T).LastTransactionTimestamp
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).LastTransactionTimestamp
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.LastTransactionTimestamp
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Nonce*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Nonce*
        name: Nonce
        nameWithType: Block<T>.Nonce
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Nonce
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Nonce*
        name: Nonce
        nameWithType: Block(Of T).Nonce
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Nonce
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Nonce
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Hash*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Hash*
        name: Hash
        nameWithType: Block<T>.Hash
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Hash
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Hash*
        name: Hash
        nameWithType: Block(Of T).Hash
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Hash
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Hash
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.Block`1
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.#ctor*
        name: Block
        nameWithType: Block<T>.Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Block
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.#ctor*
        name: Block
        nameWithType: Block(Of T).Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Block
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.#ctor
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Append*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Append*
        name: Append
        nameWithType: Block<T>.Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Append
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Append*
        name: Append
        nameWithType: Block(Of T).Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Append
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Append
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Verify*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Verify*
        name: Verify
        nameWithType: Block<T>.Verify
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Verify
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Verify*
        name: Verify
        nameWithType: Block(Of T).Verify
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Verify
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Verify
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetHashCode*
        name: GetHashCode
        nameWithType: Block<T>.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetHashCode*
        name: GetHashCode
        nameWithType: Block(Of T).GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetHashCode
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Equals*
        name: Equals
        nameWithType: Block<T>.Equals
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Equals*
        name: Equals
        nameWithType: Block(Of T).Equals
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.Equals
  System.Collections.IEnumerator{GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}}:
    name:
      CSharp:
      - id: System.Collections.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.IEnumerator`1
    commentId: '!:System.Collections.IEnumerator{GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}}'
  GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetEnumerator*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: Block<T>.GetEnumerator
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block<T>.GetEnumerator
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: Block(Of T).GetEnumerator
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T).GetEnumerator
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Block`1.GetEnumerator
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1
        name: IDataChain
        nameWithType: IDataChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1
        name: IDataChain
        nameWithType: IDataChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1
  GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1
        name: BlockChain
        nameWithType: BlockChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1
        name: BlockChain
        nameWithType: BlockChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1
        name: IDataChain
        nameWithType: IDataChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1
        name: IDataChain
        nameWithType: IDataChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1
    parent: GUPS.AntiCheat.Protected.Collection.Chain
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{`0}}
  GUPS.AntiCheat.LinkedList`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.LinkedList`1
        name: LinkedList
        nameWithType: LinkedList
        qualifiedName: LinkedList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.LinkedList`1
        name: LinkedList
        nameWithType: LinkedList
        qualifiedName: LinkedList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  GUPS.AntiCheat.LinkedList{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.LinkedList`1
        name: LinkedList
        nameWithType: LinkedList
        qualifiedName: LinkedList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.LinkedList`1
        name: LinkedList
        nameWithType: LinkedList
        qualifiedName: LinkedList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.LinkedList`1
    commentId: '!:GUPS.AntiCheat.LinkedList{GUPS.AntiCheat.Protected.Collection.Chain.Block{`0}}'
  GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Chain*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Chain*
        name: Chain
        nameWithType: BlockChain<T>.Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.Chain
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Chain*
        name: Chain
        nameWithType: BlockChain(Of T).Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).Chain
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Chain
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain
        name: Chain
        nameWithType: IDataChain<T>.Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>.Chain
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain
        name: Chain
        nameWithType: IDataChain(Of T).Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T).Chain
    isDefinition: true
    commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}.Chain:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain
        name: Chain
        nameWithType: IDataChain<Block<T>>.Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.Chain
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain
        name: Chain
        nameWithType: IDataChain(Of Block(Of T)).Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T)).Chain
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain
    parent: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}
    commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{`0}}.Chain
  GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
    parent: GUPS.AntiCheat.Protected.Collection.Chain
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.Block{`0}
  GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.LastBlock*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.LastBlock*
        name: LastBlock
        nameWithType: BlockChain<T>.LastBlock
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.LastBlock
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.LastBlock*
        name: LastBlock
        nameWithType: BlockChain(Of T).LastBlock
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).LastBlock
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.LastBlock
  GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.HasIntegrity*
        name: HasIntegrity
        nameWithType: BlockChain<T>.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.HasIntegrity*
        name: HasIntegrity
        nameWithType: BlockChain(Of T).HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.HasIntegrity
  GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor*
        name: BlockChain
        nameWithType: BlockChain<T>.BlockChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.BlockChain
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor*
        name: BlockChain
        nameWithType: BlockChain(Of T).BlockChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).BlockChain
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.#ctor
  GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1
        name: ISynchronizer
        nameWithType: ISynchronizer
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1
        name: ISynchronizer
        nameWithType: ISynchronizer
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1
  GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1
        name: ISynchronizer
        nameWithType: ISynchronizer
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1
        name: ISynchronizer
        nameWithType: ISynchronizer
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1
    parent: GUPS.AntiCheat.Protected.Collection.Chain
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{`0}
  GUPS.AntiCheat.Task`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  GUPS.AntiCheat.Task{System.Boolean}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Task`1
    commentId: '!:GUPS.AntiCheat.Task{System.Boolean}'
  GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.SynchronizeAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.SynchronizeAsync*
        name: SynchronizeAsync
        nameWithType: BlockChain<T>.SynchronizeAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.SynchronizeAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.SynchronizeAsync*
        name: SynchronizeAsync
        nameWithType: BlockChain(Of T).SynchronizeAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).SynchronizeAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.SynchronizeAsync
  GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Append*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Append*
        name: Append
        nameWithType: BlockChain<T>.Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.Append
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Append*
        name: Append
        nameWithType: BlockChain(Of T).Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).Append
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Append
  GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.AppendAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.AppendAsync*
        name: AppendAsync
        nameWithType: BlockChain<T>.AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.AppendAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.AppendAsync*
        name: AppendAsync
        nameWithType: BlockChain(Of T).AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).AppendAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.AppendAsync
  ? GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#Append*
  : name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#Append*
        name: IDataChain<Block<T>>.Append
        nameWithType: BlockChain<T>.IDataChain<Block<T>>.Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.Append
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#Append*
        name: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.Append
        nameWithType: BlockChain(Of T).GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.Append
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#Append
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append(`0):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append(`0)
        name: Append
        nameWithType: IDataChain<T>.Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>.Append
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append(`0)
        name: Append
        nameWithType: IDataChain(Of T).Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T).Append
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append(`0)
  ? GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}.Append(GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}})
  : name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append(`0)
        name: Append
        nameWithType: IDataChain<Block<T>>.Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.Append
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append(`0)
        name: Append
        nameWithType: IDataChain(Of Block(Of T)).Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T)).Append
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append(`0)
    parent: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}
    commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{`0}}.Append(GUPS.AntiCheat.Protected.Collection.Chain.Block{`0})
  ? GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#AppendAsync*
  : name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#AppendAsync*
        name: IDataChain<Block<T>>.AppendAsync
        nameWithType: BlockChain<T>.IDataChain<Block<T>>.AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.AppendAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#AppendAsync*
        name: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.AppendAsync
        nameWithType: BlockChain(Of T).GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.AppendAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GUPS#AntiCheat#Protected#Collection#Chain#IDataChain{GUPS#AntiCheat#Protected#Collection#Chain#Block{T}}#AppendAsync
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync(`0):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync(`0)
        name: AppendAsync
        nameWithType: IDataChain<T>.AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>.AppendAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync(`0)
        name: AppendAsync
        nameWithType: IDataChain(Of T).AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T).AppendAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync(`0)
  ? GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}.AppendAsync(GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}})
  : name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync(`0)
        name: AppendAsync
        nameWithType: IDataChain<Block<T>>.AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<GUPS.AntiCheat.Protected.Collection.Chain.Block<T>>.AppendAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync(`0)
        name: AppendAsync
        nameWithType: IDataChain(Of Block(Of T)).AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of GUPS.AntiCheat.Protected.Collection.Chain.Block(Of T)).AppendAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync(`0)
    parent: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}
    commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{GUPS.AntiCheat.Protected.Collection.Chain.Block{`0}}.AppendAsync(GUPS.AntiCheat.Protected.Collection.Chain.Block{`0})
  GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: BlockChain<T>.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: BlockChain(Of T).CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrity
  GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrityOfLastBlock*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrityOfLastBlock*
        name: CheckIntegrityOfLastBlock
        nameWithType: BlockChain<T>.CheckIntegrityOfLastBlock
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.CheckIntegrityOfLastBlock
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrityOfLastBlock*
        name: CheckIntegrityOfLastBlock
        nameWithType: BlockChain(Of T).CheckIntegrityOfLastBlock
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).CheckIntegrityOfLastBlock
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.CheckIntegrityOfLastBlock
  System.Collections.IEnumerator{GUPS.AntiCheat.Protected.Collection.Chain.Block{{T}}}:
    name:
      CSharp:
      - id: System.Collections.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Block`1
        name: Block
        nameWithType: Block
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Block
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.IEnumerator`1
    commentId: '!:System.Collections.IEnumerator{GUPS.AntiCheat.Protected.Collection.Chain.Block{`0}}'
  GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GetEnumerator*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: BlockChain<T>.GetEnumerator
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.GetEnumerator
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: BlockChain(Of T).GetEnumerator
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).GetEnumerator
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.GetEnumerator
  GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Dispose*
        name: Dispose
        nameWithType: BlockChain<T>.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain<T>.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Dispose*
        name: Dispose
        nameWithType: BlockChain(Of T).Dispose
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.BlockChain(Of T).Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.BlockChain`1.Dispose
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Size*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Size*
        name: Size
        nameWithType: IBlock<T>.Size
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Size
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Size*
        name: Size
        nameWithType: IBlock(Of T).Size
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Size
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Size
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items*
        name: Items
        nameWithType: IBlock<T>.Items
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Items
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items*
        name: Items
        nameWithType: IBlock(Of T).Items
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Items
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Items
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Item*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Item*
        name: Item
        nameWithType: IBlock<T>.Item
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Item
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Item*
        name: Item
        nameWithType: IBlock(Of T).Item
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Item
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Item
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Count*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Count*
        name: Count
        nameWithType: IBlock<T>.Count
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Count
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Count*
        name: Count
        nameWithType: IBlock(Of T).Count
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Count
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Count
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last*
        name: Last
        nameWithType: IBlock<T>.Last
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Last
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last*
        name: Last
        nameWithType: IBlock(Of T).Last
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Last
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Last
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Nonce*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Nonce*
        name: Nonce
        nameWithType: IBlock<T>.Nonce
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Nonce
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Nonce*
        name: Nonce
        nameWithType: IBlock(Of T).Nonce
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Nonce
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Nonce
  GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Hash*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Hash*
        name: Hash
        nameWithType: IBlock<T>.Hash
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock<T>.Hash
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Hash*
        name: Hash
        nameWithType: IBlock(Of T).Hash
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IBlock(Of T).Hash
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.IBlock`1.Hash
  GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp*
        name: Timestamp
        nameWithType: ITransaction<T>.Timestamp
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>.Timestamp
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp*
        name: Timestamp
        nameWithType: ITransaction(Of T).Timestamp
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T).Timestamp
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp
  GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content*
        name: Content
        nameWithType: ITransaction<T>.Content
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>.Content
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content*
        name: Content
        nameWithType: ITransaction(Of T).Content
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T).Content
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content
  GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Timestamp*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Timestamp*
        name: Timestamp
        nameWithType: Transaction<T>.Timestamp
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Transaction<T>.Timestamp
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Timestamp*
        name: Timestamp
        nameWithType: Transaction(Of T).Timestamp
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Transaction(Of T).Timestamp
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Timestamp
  GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp
        name: Timestamp
        nameWithType: ITransaction<T>.Timestamp
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>.Timestamp
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp
        name: Timestamp
        nameWithType: ITransaction(Of T).Timestamp
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T).Timestamp
    isDefinition: true
    commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp
  GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}.Timestamp:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp
        name: Timestamp
        nameWithType: ITransaction<T>.Timestamp
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>.Timestamp
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp
        name: Timestamp
        nameWithType: ITransaction(Of T).Timestamp
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T).Timestamp
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Timestamp
    parent: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}
    commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}.Timestamp
  GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Content*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Content*
        name: Content
        nameWithType: Transaction<T>.Content
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Transaction<T>.Content
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Content*
        name: Content
        nameWithType: Transaction(Of T).Content
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Transaction(Of T).Content
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.Content
  GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content
        name: Content
        nameWithType: ITransaction<T>.Content
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>.Content
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content
        name: Content
        nameWithType: ITransaction(Of T).Content
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T).Content
    isDefinition: true
    commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content
  GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}.Content:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content
        name: Content
        nameWithType: ITransaction<T>.Content
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction<T>.Content
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content
        name: Content
        nameWithType: ITransaction(Of T).Content
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction(Of T).Content
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1.Content
    parent: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}
    commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}.Content
  GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.#ctor*
        name: Transaction
        nameWithType: Transaction<T>.Transaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Transaction<T>.Transaction
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.#ctor*
        name: Transaction
        nameWithType: Transaction(Of T).Transaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Transaction(Of T).Transaction
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.#ctor
  GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.GetHashCode*
        name: GetHashCode
        nameWithType: Transaction<T>.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Transaction<T>.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.GetHashCode*
        name: GetHashCode
        nameWithType: Transaction(Of T).GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Transaction(Of T).GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1.GetHashCode
  GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1
        name: Transaction
        nameWithType: Transaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Transaction
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1
        name: Transaction
        nameWithType: Transaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.Transaction
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.Transaction`1
  GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.FilePath*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.FilePath*
        name: FilePath
        nameWithType: FileSynchronizer<T>.FilePath
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer<T>.FilePath
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.FilePath*
        name: FilePath
        nameWithType: FileSynchronizer(Of T).FilePath
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer(Of T).FilePath
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.FilePath
  GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1
        name: FileSynchronizer
        nameWithType: FileSynchronizer
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1
        name: FileSynchronizer
        nameWithType: FileSynchronizer
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1
  GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.#ctor*
        name: FileSynchronizer
        nameWithType: FileSynchronizer<T>.FileSynchronizer
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer<T>.FileSynchronizer
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.#ctor*
        name: FileSynchronizer
        nameWithType: FileSynchronizer(Of T).FileSynchronizer
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer(Of T).FileSynchronizer
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.#ctor
  GUPS.AntiCheat.Task{GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[]}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Task`1
    commentId: '!:GUPS.AntiCheat.Task{GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[]}'
  GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.ReadAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.ReadAsync*
        name: ReadAsync
        nameWithType: FileSynchronizer<T>.ReadAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer<T>.ReadAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.ReadAsync*
        name: ReadAsync
        nameWithType: FileSynchronizer(Of T).ReadAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer(Of T).ReadAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.ReadAsync
  GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync(Int64):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync(Int64)
        name: ReadAsync
        nameWithType: ISynchronizer<T>.ReadAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>.ReadAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: Int64
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync(Int64)
        name: ReadAsync
        nameWithType: ISynchronizer(Of T).ReadAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T).ReadAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: Int64
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync(Int64)
  GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}.ReadAsync(Int64):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync(Int64)
        name: ReadAsync
        nameWithType: ISynchronizer<T>.ReadAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>.ReadAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: Int64
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync(Int64)
        name: ReadAsync
        nameWithType: ISynchronizer(Of T).ReadAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T).ReadAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: Int64
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync(Int64)
    parent: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}
    commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{`0}.ReadAsync(Int64)
  GUPS.AntiCheat.Task:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Task
        name: Task
        nameWithType: Task
        qualifiedName: Task
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Task
        name: Task
        nameWithType: Task
        qualifiedName: Task
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.WriteAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.WriteAsync*
        name: WriteAsync
        nameWithType: FileSynchronizer<T>.WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer<T>.WriteAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.WriteAsync*
        name: WriteAsync
        nameWithType: FileSynchronizer(Of T).WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer(Of T).WriteAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.FileSynchronizer`1.WriteAsync
  GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
        name: WriteAsync
        nameWithType: ISynchronizer<T>.WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>.WriteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
        name: WriteAsync
        nameWithType: ISynchronizer(Of T).WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T).WriteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
  ? GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}})
  : name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
        name: WriteAsync
        nameWithType: ISynchronizer<T>.WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>.WriteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
        name: WriteAsync
        nameWithType: ISynchronizer(Of T).WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T).WriteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
    parent: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}
    commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{`0}.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0})
  ? GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
  : name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
        name: WriteAsync
        nameWithType: ISynchronizer<T>.WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>.WriteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
        name: WriteAsync
        nameWithType: ISynchronizer(Of T).WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T).WriteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
  ? GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{{T}}[])
  : name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
        name: WriteAsync
        nameWithType: ISynchronizer<T>.WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>.WriteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
        name: WriteAsync
        nameWithType: ISynchronizer(Of T).WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T).WriteAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction`1
        name: ITransaction
        nameWithType: ITransaction
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ITransaction
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
    parent: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{{T}}
    commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer{`0}.WriteAsync(GUPS.AntiCheat.Protected.Collection.Chain.ITransaction{`0}[])
  GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync*
        name: ReadAsync
        nameWithType: ISynchronizer<T>.ReadAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>.ReadAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync*
        name: ReadAsync
        nameWithType: ISynchronizer(Of T).ReadAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T).ReadAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.ReadAsync
  GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync*
        name: WriteAsync
        nameWithType: ISynchronizer<T>.WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer<T>.WriteAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync*
        name: WriteAsync
        nameWithType: ISynchronizer(Of T).WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer(Of T).WriteAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.ISynchronizer`1.WriteAsync
  GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadEndpoint*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadEndpoint*
        name: ReadEndpoint
        nameWithType: WebSynchronizer<T>.ReadEndpoint
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer<T>.ReadEndpoint
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadEndpoint*
        name: ReadEndpoint
        nameWithType: WebSynchronizer(Of T).ReadEndpoint
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer(Of T).ReadEndpoint
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadEndpoint
  GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteEndpoint*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteEndpoint*
        name: WriteEndpoint
        nameWithType: WebSynchronizer<T>.WriteEndpoint
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer<T>.WriteEndpoint
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteEndpoint*
        name: WriteEndpoint
        nameWithType: WebSynchronizer(Of T).WriteEndpoint
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer(Of T).WriteEndpoint
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteEndpoint
  GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1
        name: WebSynchronizer
        nameWithType: WebSynchronizer
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1
        name: WebSynchronizer
        nameWithType: WebSynchronizer
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1
  GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.#ctor*
        name: WebSynchronizer
        nameWithType: WebSynchronizer<T>.WebSynchronizer
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer<T>.WebSynchronizer
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.#ctor*
        name: WebSynchronizer
        nameWithType: WebSynchronizer(Of T).WebSynchronizer
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer(Of T).WebSynchronizer
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.#ctor
  GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadAsync*
        name: ReadAsync
        nameWithType: WebSynchronizer<T>.ReadAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer<T>.ReadAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadAsync*
        name: ReadAsync
        nameWithType: WebSynchronizer(Of T).ReadAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer(Of T).ReadAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.ReadAsync
  GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteAsync*
        name: WriteAsync
        nameWithType: WebSynchronizer<T>.WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer<T>.WriteAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteAsync*
        name: WriteAsync
        nameWithType: WebSynchronizer(Of T).WriteAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer(Of T).WriteAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.WebSynchronizer`1.WriteAsync
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1
        name: DataChain
        nameWithType: DataChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1
        name: DataChain
        nameWithType: DataChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{{T}}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1
        name: IDataChain
        nameWithType: IDataChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1
        name: IDataChain
        nameWithType: IDataChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1
    parent: GUPS.AntiCheat.Protected.Collection.Chain
    commentId: T:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{`0}
  GUPS.AntiCheat.LinkedList{{T}}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.LinkedList`1
        name: LinkedList
        nameWithType: LinkedList
        qualifiedName: LinkedList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.LinkedList`1
        name: LinkedList
        nameWithType: LinkedList
        qualifiedName: LinkedList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.LinkedList`1
    commentId: '!:GUPS.AntiCheat.LinkedList{`0}'
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Chain*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Chain*
        name: Chain
        nameWithType: DataChain<T>.Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.Chain
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Chain*
        name: Chain
        nameWithType: DataChain(Of T).Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).Chain
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Chain
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{{T}}.Chain:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain
        name: Chain
        nameWithType: IDataChain<T>.Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>.Chain
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain
        name: Chain
        nameWithType: IDataChain(Of T).Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T).Chain
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain
    parent: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{{T}}
    commentId: P:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{`0}.Chain
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.HasIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.HasIntegrity*
        name: HasIntegrity
        nameWithType: DataChain<T>.HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.HasIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.HasIntegrity*
        name: HasIntegrity
        nameWithType: DataChain(Of T).HasIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).HasIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.HasIntegrity
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.#ctor*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.#ctor*
        name: DataChain
        nameWithType: DataChain<T>.DataChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.DataChain
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.#ctor*
        name: DataChain
        nameWithType: DataChain(Of T).DataChain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).DataChain
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.#ctor
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Append*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Append*
        name: Append
        nameWithType: DataChain<T>.Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.Append
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Append*
        name: Append
        nameWithType: DataChain(Of T).Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).Append
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Append
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{{T}}.Append({T}):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append(`0)
        name: Append
        nameWithType: IDataChain<T>.Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>.Append
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append(`0)
        name: Append
        nameWithType: IDataChain(Of T).Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T).Append
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append(`0)
    parent: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{{T}}
    commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{`0}.Append(`0)
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.AppendAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.AppendAsync*
        name: AppendAsync
        nameWithType: DataChain<T>.AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.AppendAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.AppendAsync*
        name: AppendAsync
        nameWithType: DataChain(Of T).AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).AppendAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.AppendAsync
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{{T}}.AppendAsync({T}):
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync(`0)
        name: AppendAsync
        nameWithType: IDataChain<T>.AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>.AppendAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync(`0)
        name: AppendAsync
        nameWithType: IDataChain(Of T).AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T).AppendAsync
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync(`0)
    parent: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{{T}}
    commentId: M:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain{`0}.AppendAsync(`0)
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLast*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLast*
        name: RemoveLast
        nameWithType: DataChain<T>.RemoveLast
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.RemoveLast
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLast*
        name: RemoveLast
        nameWithType: DataChain(Of T).RemoveLast
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).RemoveLast
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLast
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLastAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLastAsync*
        name: RemoveLastAsync
        nameWithType: DataChain<T>.RemoveLastAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.RemoveLastAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLastAsync*
        name: RemoveLastAsync
        nameWithType: DataChain(Of T).RemoveLastAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).RemoveLastAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.RemoveLastAsync
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.CheckIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: DataChain<T>.CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.CheckIntegrity
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.CheckIntegrity*
        name: CheckIntegrity
        nameWithType: DataChain(Of T).CheckIntegrity
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).CheckIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.CheckIntegrity
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetHashCode*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetHashCode*
        name: GetHashCode
        nameWithType: DataChain<T>.GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.GetHashCode
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetHashCode*
        name: GetHashCode
        nameWithType: DataChain(Of T).GetHashCode
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).GetHashCode
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetHashCode
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Equals*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Equals*
        name: Equals
        nameWithType: DataChain<T>.Equals
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.Equals
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Equals*
        name: Equals
        nameWithType: DataChain(Of T).Equals
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).Equals
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Equals
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetEnumerator*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: DataChain<T>.GetEnumerator
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.GetEnumerator
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetEnumerator*
        name: GetEnumerator
        nameWithType: DataChain(Of T).GetEnumerator
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).GetEnumerator
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.GetEnumerator
  GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Dispose*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Dispose*
        name: Dispose
        nameWithType: DataChain<T>.Dispose
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain<T>.Dispose
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Dispose*
        name: Dispose
        nameWithType: DataChain(Of T).Dispose
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.DataChain(Of T).Dispose
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.DataChain`1.Dispose
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain*
        name: Chain
        nameWithType: IDataChain<T>.Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>.Chain
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain*
        name: Chain
        nameWithType: IDataChain(Of T).Chain
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T).Chain
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Chain
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append*
        name: Append
        nameWithType: IDataChain<T>.Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>.Append
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append*
        name: Append
        nameWithType: IDataChain(Of T).Append
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T).Append
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.Append
  GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync*
        name: AppendAsync
        nameWithType: IDataChain<T>.AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain<T>.AppendAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync*
        name: AppendAsync
        nameWithType: IDataChain(Of T).AppendAsync
        qualifiedName: GUPS.AntiCheat.Protected.Collection.Chain.IDataChain(Of T).AppendAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Collection.Chain.IDataChain`1.AppendAsync
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key*
        name: Key
        nameWithType: IProtectedPref<T>.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<T>.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key*
        name: Key
        nameWithType: IProtectedPref(Of T).Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of T).Key
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value*
        name: Value
        nameWithType: IProtectedPref<T>.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<T>.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value*
        name: Value
        nameWithType: IProtectedPref(Of T).Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of T).Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
  GUPS.AntiCheat.Protected.Storage.Prefs:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Protected.Storage.Prefs
        nameWithType: GUPS.AntiCheat.Protected.Storage.Prefs
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs
      VB:
      - name: GUPS.AntiCheat.Protected.Storage.Prefs
        nameWithType: GUPS.AntiCheat.Protected.Storage.Prefs
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Protected.Storage.Prefs
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{System.Boolean}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
    parent: GUPS.AntiCheat.Protected.Storage.Prefs
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{System.Boolean}
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Key*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Key*
        name: Key
        nameWithType: ProtectedBoolPref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Key*
        name: Key
        nameWithType: ProtectedBoolPref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Key
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref<T>.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<T>.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref(Of T).Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of T).Key
    isDefinition: true
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{System.Boolean}.Key:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref<Boolean>.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<System.Boolean>.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref(Of Boolean).Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of System.Boolean).Key
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{System.Boolean}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{System.Boolean}.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Value*
        name: Value
        nameWithType: ProtectedBoolPref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Value*
        name: Value
        nameWithType: ProtectedBoolPref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref<T>.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<T>.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref(Of T).Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of T).Value
    isDefinition: true
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{System.Boolean}.Value:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref<Boolean>.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<System.Boolean>.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref(Of Boolean).Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of System.Boolean).Value
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{System.Boolean}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{System.Boolean}.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref
        name: ProtectedBoolPref
        nameWithType: ProtectedBoolPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref
        name: ProtectedBoolPref
        nameWithType: ProtectedBoolPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedBoolPref
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath*
        name: FilePath
        nameWithType: ProtectedFileBasedPlayerPrefs.FilePath
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath*
        name: FilePath
        nameWithType: ProtectedFileBasedPlayerPrefs.FilePath
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.AutoSave*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.AutoSave*
        name: AutoSave
        nameWithType: ProtectedFileBasedPlayerPrefs.AutoSave
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.AutoSave
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.AutoSave*
        name: AutoSave
        nameWithType: ProtectedFileBasedPlayerPrefs.AutoSave
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.AutoSave
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.AutoSave
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKey*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKey*
        name: HasKey
        nameWithType: ProtectedFileBasedPlayerPrefs.HasKey
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKey
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKey*
        name: HasKey
        nameWithType: ProtectedFileBasedPlayerPrefs.HasKey
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKey
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKey
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKeyAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKeyAsync*
        name: HasKeyAsync
        nameWithType: ProtectedFileBasedPlayerPrefs.HasKeyAsync
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKeyAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKeyAsync*
        name: HasKeyAsync
        nameWithType: ProtectedFileBasedPlayerPrefs.HasKeyAsync
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKeyAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.HasKeyAsync
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set*
        name: Set
        nameWithType: ProtectedFileBasedPlayerPrefs.Set
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set*
        name: Set
        nameWithType: ProtectedFileBasedPlayerPrefs.Set
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set
  GUPS.AntiCheat.Type:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Type
        name: Type
        nameWithType: Type
        qualifiedName: Type
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Type
        name: Type
        nameWithType: Type
        qualifiedName: Type
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get*
        name: Get
        nameWithType: ProtectedFileBasedPlayerPrefs.Get
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get*
        name: Get
        nameWithType: ProtectedFileBasedPlayerPrefs.Get
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(Type,String):
    commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Get(Type,String)
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,System.Object):
    commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Set(String,System.Object)
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetInt*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetInt*
        name: SetInt
        nameWithType: ProtectedFileBasedPlayerPrefs.SetInt
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetInt
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetInt*
        name: SetInt
        nameWithType: ProtectedFileBasedPlayerPrefs.SetInt
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetInt
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetInt
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt*
        name: GetInt
        nameWithType: ProtectedFileBasedPlayerPrefs.GetInt
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt*
        name: GetInt
        nameWithType: ProtectedFileBasedPlayerPrefs.GetInt
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetInt
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetBool*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetBool*
        name: SetBool
        nameWithType: ProtectedFileBasedPlayerPrefs.SetBool
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetBool
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetBool*
        name: SetBool
        nameWithType: ProtectedFileBasedPlayerPrefs.SetBool
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetBool
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetBool
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool*
        name: GetBool
        nameWithType: ProtectedFileBasedPlayerPrefs.GetBool
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool*
        name: GetBool
        nameWithType: ProtectedFileBasedPlayerPrefs.GetBool
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetBool
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetFloat*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetFloat*
        name: SetFloat
        nameWithType: ProtectedFileBasedPlayerPrefs.SetFloat
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetFloat
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetFloat*
        name: SetFloat
        nameWithType: ProtectedFileBasedPlayerPrefs.SetFloat
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetFloat
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetFloat
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat*
        name: GetFloat
        nameWithType: ProtectedFileBasedPlayerPrefs.GetFloat
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat*
        name: GetFloat
        nameWithType: ProtectedFileBasedPlayerPrefs.GetFloat
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetFloat
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetString*
        name: SetString
        nameWithType: ProtectedFileBasedPlayerPrefs.SetString
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetString
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetString*
        name: SetString
        nameWithType: ProtectedFileBasedPlayerPrefs.SetString
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetString
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString*
        name: GetString
        nameWithType: ProtectedFileBasedPlayerPrefs.GetString
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString*
        name: GetString
        nameWithType: ProtectedFileBasedPlayerPrefs.GetString
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetString
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector2*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector2*
        name: SetVector2
        nameWithType: ProtectedFileBasedPlayerPrefs.SetVector2
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector2
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector2*
        name: SetVector2
        nameWithType: ProtectedFileBasedPlayerPrefs.SetVector2
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector2
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector2
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2*
        name: GetVector2
        nameWithType: ProtectedFileBasedPlayerPrefs.GetVector2
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2*
        name: GetVector2
        nameWithType: ProtectedFileBasedPlayerPrefs.GetVector2
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector2
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector3*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector3*
        name: SetVector3
        nameWithType: ProtectedFileBasedPlayerPrefs.SetVector3
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector3
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector3*
        name: SetVector3
        nameWithType: ProtectedFileBasedPlayerPrefs.SetVector3
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector3
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector3
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3*
        name: GetVector3
        nameWithType: ProtectedFileBasedPlayerPrefs.GetVector3
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3*
        name: GetVector3
        nameWithType: ProtectedFileBasedPlayerPrefs.GetVector3
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector3
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector4*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector4*
        name: SetVector4
        nameWithType: ProtectedFileBasedPlayerPrefs.SetVector4
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector4
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector4*
        name: SetVector4
        nameWithType: ProtectedFileBasedPlayerPrefs.SetVector4
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector4
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetVector4
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4*
        name: GetVector4
        nameWithType: ProtectedFileBasedPlayerPrefs.GetVector4
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4*
        name: GetVector4
        nameWithType: ProtectedFileBasedPlayerPrefs.GetVector4
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetVector4
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetQuaternion*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetQuaternion*
        name: SetQuaternion
        nameWithType: ProtectedFileBasedPlayerPrefs.SetQuaternion
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetQuaternion
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetQuaternion*
        name: SetQuaternion
        nameWithType: ProtectedFileBasedPlayerPrefs.SetQuaternion
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetQuaternion
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SetQuaternion
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion*
        name: GetQuaternion
        nameWithType: ProtectedFileBasedPlayerPrefs.GetQuaternion
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion*
        name: GetQuaternion
        nameWithType: ProtectedFileBasedPlayerPrefs.GetQuaternion
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.GetQuaternion
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.DeleteKey*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.DeleteKey*
        name: DeleteKey
        nameWithType: ProtectedFileBasedPlayerPrefs.DeleteKey
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.DeleteKey
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.DeleteKey*
        name: DeleteKey
        nameWithType: ProtectedFileBasedPlayerPrefs.DeleteKey
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.DeleteKey
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.DeleteKey
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load*
        name: Load
        nameWithType: ProtectedFileBasedPlayerPrefs.Load
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load*
        name: Load
        nameWithType: ProtectedFileBasedPlayerPrefs.Load
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load:
    commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Load
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.LoadAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.LoadAsync*
        name: LoadAsync
        nameWithType: ProtectedFileBasedPlayerPrefs.LoadAsync
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.LoadAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.LoadAsync*
        name: LoadAsync
        nameWithType: ProtectedFileBasedPlayerPrefs.LoadAsync
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.LoadAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.LoadAsync
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath:
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.FilePath
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save*
        name: Save
        nameWithType: ProtectedFileBasedPlayerPrefs.Save
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save*
        name: Save
        nameWithType: ProtectedFileBasedPlayerPrefs.Save
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save:
    commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.Save
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SaveAsync*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SaveAsync*
        name: SaveAsync
        nameWithType: ProtectedFileBasedPlayerPrefs.SaveAsync
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SaveAsync
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SaveAsync*
        name: SaveAsync
        nameWithType: ProtectedFileBasedPlayerPrefs.SaveAsync
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SaveAsync
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs.SaveAsync
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs
        name: ProtectedFileBasedPlayerPrefs
        nameWithType: ProtectedFileBasedPlayerPrefs
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs
        name: ProtectedFileBasedPlayerPrefs
        nameWithType: ProtectedFileBasedPlayerPrefs
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFileBasedPlayerPrefs
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Single}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Single
        name: Single
        nameWithType: Single
        qualifiedName: Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Single
        name: Single
        nameWithType: Single
        qualifiedName: Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
    parent: GUPS.AntiCheat.Protected.Storage.Prefs
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Single}
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Key*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Key*
        name: Key
        nameWithType: ProtectedFloatPref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Key*
        name: Key
        nameWithType: ProtectedFloatPref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Key
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Single}.Key:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref<Single>.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<Single>.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref(Of Single).Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of Single).Key
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Single}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Single}.Key
  GUPS.AntiCheat.Single:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Single
        name: Single
        nameWithType: Single
        qualifiedName: Single
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.Single
        name: Single
        nameWithType: Single
        qualifiedName: Single
        isExternal: true
    isDefinition: true
    commentId: '!:GUPS.AntiCheat.Single'
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Value*
        name: Value
        nameWithType: ProtectedFloatPref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Value*
        name: Value
        nameWithType: ProtectedFloatPref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Single}.Value:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref<Single>.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<Single>.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref(Of Single).Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of Single).Value
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Single}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Single}.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref
        name: ProtectedFloatPref
        nameWithType: ProtectedFloatPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref
        name: ProtectedFloatPref
        nameWithType: ProtectedFloatPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedFloatPref
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Int32}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
    parent: GUPS.AntiCheat.Protected.Storage.Prefs
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Int32}
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Key*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Key*
        name: Key
        nameWithType: ProtectedIntPref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Key*
        name: Key
        nameWithType: ProtectedIntPref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Key
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Int32}.Key:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref<Int32>.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<Int32>.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref(Of Int32).Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of Int32).Key
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Int32}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Int32}.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Value*
        name: Value
        nameWithType: ProtectedIntPref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Value*
        name: Value
        nameWithType: ProtectedIntPref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Int32}.Value:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref<Int32>.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<Int32>.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref(Of Int32).Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of Int32).Value
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Int32}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Int32}.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref
        name: ProtectedIntPref
        nameWithType: ProtectedIntPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref
        name: ProtectedIntPref
        nameWithType: ProtectedIntPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedIntPref
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.HasKey*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.HasKey*
        name: HasKey
        nameWithType: ProtectedPlayerPrefs.HasKey
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.HasKey
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.HasKey*
        name: HasKey
        nameWithType: ProtectedPlayerPrefs.HasKey
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.HasKey
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.HasKey
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set*
        name: Set
        nameWithType: ProtectedPlayerPrefs.Set
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set*
        name: Set
        nameWithType: ProtectedPlayerPrefs.Set
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get*
        name: Get
        nameWithType: ProtectedPlayerPrefs.Get
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get*
        name: Get
        nameWithType: ProtectedPlayerPrefs.Get
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(Type,String):
    commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Get(Type,String)
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,System.Object):
    commentId: M:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Set(String,System.Object)
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetInt*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetInt*
        name: SetInt
        nameWithType: ProtectedPlayerPrefs.SetInt
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetInt
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetInt*
        name: SetInt
        nameWithType: ProtectedPlayerPrefs.SetInt
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetInt
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetInt
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt*
        name: GetInt
        nameWithType: ProtectedPlayerPrefs.GetInt
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt*
        name: GetInt
        nameWithType: ProtectedPlayerPrefs.GetInt
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetInt
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetBool*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetBool*
        name: SetBool
        nameWithType: ProtectedPlayerPrefs.SetBool
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetBool
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetBool*
        name: SetBool
        nameWithType: ProtectedPlayerPrefs.SetBool
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetBool
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetBool
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool*
        name: GetBool
        nameWithType: ProtectedPlayerPrefs.GetBool
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool*
        name: GetBool
        nameWithType: ProtectedPlayerPrefs.GetBool
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetBool
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetFloat*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetFloat*
        name: SetFloat
        nameWithType: ProtectedPlayerPrefs.SetFloat
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetFloat
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetFloat*
        name: SetFloat
        nameWithType: ProtectedPlayerPrefs.SetFloat
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetFloat
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetFloat
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat*
        name: GetFloat
        nameWithType: ProtectedPlayerPrefs.GetFloat
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat*
        name: GetFloat
        nameWithType: ProtectedPlayerPrefs.GetFloat
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetFloat
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetString*
        name: SetString
        nameWithType: ProtectedPlayerPrefs.SetString
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetString
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetString*
        name: SetString
        nameWithType: ProtectedPlayerPrefs.SetString
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetString
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString*
        name: GetString
        nameWithType: ProtectedPlayerPrefs.GetString
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString*
        name: GetString
        nameWithType: ProtectedPlayerPrefs.GetString
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetString
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector2*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector2*
        name: SetVector2
        nameWithType: ProtectedPlayerPrefs.SetVector2
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector2
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector2*
        name: SetVector2
        nameWithType: ProtectedPlayerPrefs.SetVector2
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector2
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector2
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2*
        name: GetVector2
        nameWithType: ProtectedPlayerPrefs.GetVector2
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2*
        name: GetVector2
        nameWithType: ProtectedPlayerPrefs.GetVector2
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector2
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector3*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector3*
        name: SetVector3
        nameWithType: ProtectedPlayerPrefs.SetVector3
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector3
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector3*
        name: SetVector3
        nameWithType: ProtectedPlayerPrefs.SetVector3
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector3
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector3
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3*
        name: GetVector3
        nameWithType: ProtectedPlayerPrefs.GetVector3
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3*
        name: GetVector3
        nameWithType: ProtectedPlayerPrefs.GetVector3
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector3
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector4*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector4*
        name: SetVector4
        nameWithType: ProtectedPlayerPrefs.SetVector4
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector4
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector4*
        name: SetVector4
        nameWithType: ProtectedPlayerPrefs.SetVector4
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector4
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetVector4
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4*
        name: GetVector4
        nameWithType: ProtectedPlayerPrefs.GetVector4
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4*
        name: GetVector4
        nameWithType: ProtectedPlayerPrefs.GetVector4
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetVector4
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetQuaternion*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetQuaternion*
        name: SetQuaternion
        nameWithType: ProtectedPlayerPrefs.SetQuaternion
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetQuaternion
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetQuaternion*
        name: SetQuaternion
        nameWithType: ProtectedPlayerPrefs.SetQuaternion
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetQuaternion
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.SetQuaternion
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion*
        name: GetQuaternion
        nameWithType: ProtectedPlayerPrefs.GetQuaternion
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion*
        name: GetQuaternion
        nameWithType: ProtectedPlayerPrefs.GetQuaternion
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.GetQuaternion
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Save*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Save*
        name: Save
        nameWithType: ProtectedPlayerPrefs.Save
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Save
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Save*
        name: Save
        nameWithType: ProtectedPlayerPrefs.Save
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Save
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.Save
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.DeleteKey*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.DeleteKey*
        name: DeleteKey
        nameWithType: ProtectedPlayerPrefs.DeleteKey
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.DeleteKey
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.DeleteKey*
        name: DeleteKey
        nameWithType: ProtectedPlayerPrefs.DeleteKey
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.DeleteKey
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs.DeleteKey
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs
        name: ProtectedPlayerPrefs
        nameWithType: ProtectedPlayerPrefs
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs
        name: ProtectedPlayerPrefs
        nameWithType: ProtectedPlayerPrefs
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedPlayerPrefs
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Quaternion}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
    parent: GUPS.AntiCheat.Protected.Storage.Prefs
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Quaternion}
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Key*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Key*
        name: Key
        nameWithType: ProtectedQuaternionPref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Key*
        name: Key
        nameWithType: ProtectedQuaternionPref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Key
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Quaternion}.Key:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref<Quaternion>.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<Quaternion>.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref(Of Quaternion).Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of Quaternion).Key
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Quaternion}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Quaternion}.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Value*
        name: Value
        nameWithType: ProtectedQuaternionPref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Value*
        name: Value
        nameWithType: ProtectedQuaternionPref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Quaternion}.Value:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref<Quaternion>.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<Quaternion>.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref(Of Quaternion).Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of Quaternion).Value
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Quaternion}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Quaternion}.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref
        name: ProtectedQuaternionPref
        nameWithType: ProtectedQuaternionPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref
        name: ProtectedQuaternionPref
        nameWithType: ProtectedQuaternionPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedQuaternionPref
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{String}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.String
        name: String
        nameWithType: String
        qualifiedName: String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.String
        name: String
        nameWithType: String
        qualifiedName: String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
    parent: GUPS.AntiCheat.Protected.Storage.Prefs
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{String}
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Key*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Key*
        name: Key
        nameWithType: ProtectedStringPref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Key*
        name: Key
        nameWithType: ProtectedStringPref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Key
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{String}.Key:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref<String>.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<String>.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref(Of String).Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of String).Key
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{String}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{String}.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Value*
        name: Value
        nameWithType: ProtectedStringPref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Value*
        name: Value
        nameWithType: ProtectedStringPref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{String}.Value:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref<String>.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<String>.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref(Of String).Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of String).Value
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{String}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{String}.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref
        name: ProtectedStringPref
        nameWithType: ProtectedStringPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref
        name: ProtectedStringPref
        nameWithType: ProtectedStringPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedStringPref
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector2}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
    parent: GUPS.AntiCheat.Protected.Storage.Prefs
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector2}
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Key*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Key*
        name: Key
        nameWithType: ProtectedVector2Pref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Key*
        name: Key
        nameWithType: ProtectedVector2Pref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Key
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector2}.Key:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref<Vector2>.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<Vector2>.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref(Of Vector2).Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of Vector2).Key
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector2}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector2}.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Value*
        name: Value
        nameWithType: ProtectedVector2Pref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Value*
        name: Value
        nameWithType: ProtectedVector2Pref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector2}.Value:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref<Vector2>.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<Vector2>.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref(Of Vector2).Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of Vector2).Value
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector2}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector2}.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref
        name: ProtectedVector2Pref
        nameWithType: ProtectedVector2Pref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref
        name: ProtectedVector2Pref
        nameWithType: ProtectedVector2Pref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector2Pref
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector3}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
    parent: GUPS.AntiCheat.Protected.Storage.Prefs
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector3}
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Key*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Key*
        name: Key
        nameWithType: ProtectedVector3Pref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Key*
        name: Key
        nameWithType: ProtectedVector3Pref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Key
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector3}.Key:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref<Vector3>.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<Vector3>.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref(Of Vector3).Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of Vector3).Key
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector3}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector3}.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Value*
        name: Value
        nameWithType: ProtectedVector3Pref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Value*
        name: Value
        nameWithType: ProtectedVector3Pref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector3}.Value:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref<Vector3>.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<Vector3>.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref(Of Vector3).Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of Vector3).Value
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector3}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector3}.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref
        name: ProtectedVector3Pref
        nameWithType: ProtectedVector3Pref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref
        name: ProtectedVector3Pref
        nameWithType: ProtectedVector3Pref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector3Pref
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector4}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.Vector4
        name: Vector4
        nameWithType: Vector4
        qualifiedName: Vector4
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
        name: IProtectedPref
        nameWithType: IProtectedPref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.Vector4
        name: Vector4
        nameWithType: Vector4
        qualifiedName: Vector4
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1
    parent: GUPS.AntiCheat.Protected.Storage.Prefs
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector4}
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Key*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Key*
        name: Key
        nameWithType: ProtectedVector4Pref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Key*
        name: Key
        nameWithType: ProtectedVector4Pref.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Key
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector4}.Key:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref<Vector4>.Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<Vector4>.Key
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
        name: Key
        nameWithType: IProtectedPref(Of Vector4).Key
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of Vector4).Key
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Key
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector4}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector4}.Key
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Value*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Value*
        name: Value
        nameWithType: ProtectedVector4Pref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Value*
        name: Value
        nameWithType: ProtectedVector4Pref.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Value
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector4}.Value:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref<Vector4>.Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref<Vector4>.Value
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
        name: Value
        nameWithType: IProtectedPref(Of Vector4).Value
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref(Of Vector4).Value
    isDefinition: false
    definition: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref`1.Value
    parent: GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector4}
    commentId: P:GUPS.AntiCheat.Protected.Storage.Prefs.IProtectedPref{Vector4}.Value
  GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref
        name: ProtectedVector4Pref
        nameWithType: ProtectedVector4Pref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref
      VB:
      - id: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref
        name: ProtectedVector4Pref
        nameWithType: ProtectedVector4Pref
        qualifiedName: GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Storage.Prefs.ProtectedVector4Pref
  GUPS.AntiCheat.Protected.Time.ProtectedTime:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime
        name: ProtectedTime
        nameWithType: ProtectedTime
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime
      VB:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime
        name: ProtectedTime
        nameWithType: ProtectedTime
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Protected.Time.ProtectedTime
  GUPS.AntiCheat.Protected.Time.ProtectedTime.deltaTime*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.deltaTime*
        name: deltaTime
        nameWithType: ProtectedTime.deltaTime
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.deltaTime
      VB:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.deltaTime*
        name: deltaTime
        nameWithType: ProtectedTime.deltaTime
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.deltaTime
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Time.ProtectedTime.deltaTime
  GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledDeltaTime*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledDeltaTime*
        name: unscaledDeltaTime
        nameWithType: ProtectedTime.unscaledDeltaTime
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledDeltaTime
      VB:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledDeltaTime*
        name: unscaledDeltaTime
        nameWithType: ProtectedTime.unscaledDeltaTime
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledDeltaTime
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledDeltaTime
  GUPS.AntiCheat.Protected.Time.ProtectedTime.timeScale*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeScale*
        name: timeScale
        nameWithType: ProtectedTime.timeScale
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeScale
      VB:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeScale*
        name: timeScale
        nameWithType: ProtectedTime.timeScale
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeScale
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Time.ProtectedTime.timeScale
  GUPS.AntiCheat.Protected.Time.ProtectedTime.time*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.time*
        name: time
        nameWithType: ProtectedTime.time
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.time
      VB:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.time*
        name: time
        nameWithType: ProtectedTime.time
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.time
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Time.ProtectedTime.time
  GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledTime*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledTime*
        name: unscaledTime
        nameWithType: ProtectedTime.unscaledTime
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledTime
      VB:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledTime*
        name: unscaledTime
        nameWithType: ProtectedTime.unscaledTime
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledTime
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Time.ProtectedTime.unscaledTime
  GUPS.AntiCheat.Protected.Time.ProtectedTime.timeSinceLevelLoad*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeSinceLevelLoad*
        name: timeSinceLevelLoad
        nameWithType: ProtectedTime.timeSinceLevelLoad
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeSinceLevelLoad
      VB:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeSinceLevelLoad*
        name: timeSinceLevelLoad
        nameWithType: ProtectedTime.timeSinceLevelLoad
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.timeSinceLevelLoad
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Time.ProtectedTime.timeSinceLevelLoad
  GUPS.AntiCheat.Protected.Time.ProtectedTime.realtimeSinceStartup*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.realtimeSinceStartup*
        name: realtimeSinceStartup
        nameWithType: ProtectedTime.realtimeSinceStartup
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.realtimeSinceStartup
      VB:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.realtimeSinceStartup*
        name: realtimeSinceStartup
        nameWithType: ProtectedTime.realtimeSinceStartup
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.realtimeSinceStartup
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Time.ProtectedTime.realtimeSinceStartup
  GUPS.AntiCheat.Protected.Time.ProtectedTime.UtcNow*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.UtcNow*
        name: UtcNow
        nameWithType: ProtectedTime.UtcNow
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.UtcNow
      VB:
      - id: GUPS.AntiCheat.Protected.Time.ProtectedTime.UtcNow*
        name: UtcNow
        nameWithType: ProtectedTime.UtcNow
        qualifiedName: GUPS.AntiCheat.Protected.Time.ProtectedTime.UtcNow
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Protected.Time.ProtectedTime.UtcNow
  GUPS.AntiCheat.Protected.Time:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Protected.Time
        nameWithType: GUPS.AntiCheat.Protected.Time
        qualifiedName: GUPS.AntiCheat.Protected.Time
      VB:
      - name: GUPS.AntiCheat.Protected.Time
        nameWithType: GUPS.AntiCheat.Protected.Time
        qualifiedName: GUPS.AntiCheat.Protected.Time
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Protected.Time
  GUPS.AntiCheat.IPunisher:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IPunisher
        name: IPunisher
        nameWithType: IPunisher
        qualifiedName: IPunisher
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.IPunisher
        name: IPunisher
        nameWithType: IPunisher
        qualifiedName: IPunisher
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Punisher.ExitGamePunisher.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.Name*
        name: Name
        nameWithType: ExitGamePunisher.Name
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.Name
      VB:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.Name*
        name: Name
        nameWithType: ExitGamePunisher.Name
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ExitGamePunisher.Name
  GUPS.AntiCheat.Punisher.ExitGamePunisher.IsSupported*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsSupported*
        name: IsSupported
        nameWithType: ExitGamePunisher.IsSupported
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsSupported
      VB:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsSupported*
        name: IsSupported
        nameWithType: ExitGamePunisher.IsSupported
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsSupported
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ExitGamePunisher.IsSupported
  GUPS.AntiCheat.Punisher.ExitGamePunisher.IsActive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsActive*
        name: IsActive
        nameWithType: ExitGamePunisher.IsActive
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsActive
      VB:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsActive*
        name: IsActive
        nameWithType: ExitGamePunisher.IsActive
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.IsActive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ExitGamePunisher.IsActive
  GUPS.AntiCheat.Punisher.ExitGamePunisher.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.ThreatRating*
        name: ThreatRating
        nameWithType: ExitGamePunisher.ThreatRating
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.ThreatRating*
        name: ThreatRating
        nameWithType: ExitGamePunisher.ThreatRating
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ExitGamePunisher.ThreatRating
  GUPS.AntiCheat.Punisher.ExitGamePunisher.PunishOnce*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.PunishOnce*
        name: PunishOnce
        nameWithType: ExitGamePunisher.PunishOnce
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.PunishOnce
      VB:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.PunishOnce*
        name: PunishOnce
        nameWithType: ExitGamePunisher.PunishOnce
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.PunishOnce
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ExitGamePunisher.PunishOnce
  GUPS.AntiCheat.Punisher.ExitGamePunisher.HasPunished*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.HasPunished*
        name: HasPunished
        nameWithType: ExitGamePunisher.HasPunished
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.HasPunished
      VB:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.HasPunished*
        name: HasPunished
        nameWithType: ExitGamePunisher.HasPunished
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.HasPunished
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ExitGamePunisher.HasPunished
  GUPS.AntiCheat.Punisher.ExitGamePunisher.Punish*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.Punish*
        name: Punish
        nameWithType: ExitGamePunisher.Punish
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.Punish
      VB:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher.Punish*
        name: Punish
        nameWithType: ExitGamePunisher.Punish
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher.Punish
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ExitGamePunisher.Punish
  GUPS.AntiCheat.Punisher.ExitGamePunisher:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher
        name: ExitGamePunisher
        nameWithType: ExitGamePunisher
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher
      VB:
      - id: GUPS.AntiCheat.Punisher.ExitGamePunisher
        name: ExitGamePunisher
        nameWithType: ExitGamePunisher
        qualifiedName: GUPS.AntiCheat.Punisher.ExitGamePunisher
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Punisher.ExitGamePunisher
  GUPS.AntiCheat.Punisher.FlipCameraPunisher.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Name*
        name: Name
        nameWithType: FlipCameraPunisher.Name
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Name
      VB:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Name*
        name: Name
        nameWithType: FlipCameraPunisher.Name
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.FlipCameraPunisher.Name
  GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsSupported*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsSupported*
        name: IsSupported
        nameWithType: FlipCameraPunisher.IsSupported
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsSupported
      VB:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsSupported*
        name: IsSupported
        nameWithType: FlipCameraPunisher.IsSupported
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsSupported
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsSupported
  GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsActive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsActive*
        name: IsActive
        nameWithType: FlipCameraPunisher.IsActive
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsActive
      VB:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsActive*
        name: IsActive
        nameWithType: FlipCameraPunisher.IsActive
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsActive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.FlipCameraPunisher.IsActive
  GUPS.AntiCheat.Punisher.FlipCameraPunisher.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.ThreatRating*
        name: ThreatRating
        nameWithType: FlipCameraPunisher.ThreatRating
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.ThreatRating*
        name: ThreatRating
        nameWithType: FlipCameraPunisher.ThreatRating
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.FlipCameraPunisher.ThreatRating
  GUPS.AntiCheat.Punisher.FlipCameraPunisher.PunishOnce*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.PunishOnce*
        name: PunishOnce
        nameWithType: FlipCameraPunisher.PunishOnce
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.PunishOnce
      VB:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.PunishOnce*
        name: PunishOnce
        nameWithType: FlipCameraPunisher.PunishOnce
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.PunishOnce
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.FlipCameraPunisher.PunishOnce
  GUPS.AntiCheat.Punisher.FlipCameraPunisher.HasPunished*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.HasPunished*
        name: HasPunished
        nameWithType: FlipCameraPunisher.HasPunished
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.HasPunished
      VB:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.HasPunished*
        name: HasPunished
        nameWithType: FlipCameraPunisher.HasPunished
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.HasPunished
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.FlipCameraPunisher.HasPunished
  GUPS.AntiCheat.Punisher.FlipCameraPunisher.Punish*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Punish*
        name: Punish
        nameWithType: FlipCameraPunisher.Punish
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Punish
      VB:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Punish*
        name: Punish
        nameWithType: FlipCameraPunisher.Punish
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher.Punish
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.FlipCameraPunisher.Punish
  GUPS.AntiCheat.Punisher.FlipCameraPunisher:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher
        name: FlipCameraPunisher
        nameWithType: FlipCameraPunisher
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher
      VB:
      - id: GUPS.AntiCheat.Punisher.FlipCameraPunisher
        name: FlipCameraPunisher
        nameWithType: FlipCameraPunisher
        qualifiedName: GUPS.AntiCheat.Punisher.FlipCameraPunisher
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Punisher.FlipCameraPunisher
  GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Name*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Name*
        name: Name
        nameWithType: ReduceFpsPunisher.Name
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Name
      VB:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Name*
        name: Name
        nameWithType: ReduceFpsPunisher.Name
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Name
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Name
  GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsSupported*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsSupported*
        name: IsSupported
        nameWithType: ReduceFpsPunisher.IsSupported
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsSupported
      VB:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsSupported*
        name: IsSupported
        nameWithType: ReduceFpsPunisher.IsSupported
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsSupported
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsSupported
  GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsActive*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsActive*
        name: IsActive
        nameWithType: ReduceFpsPunisher.IsActive
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsActive
      VB:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsActive*
        name: IsActive
        nameWithType: ReduceFpsPunisher.IsActive
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsActive
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.IsActive
  GUPS.AntiCheat.Punisher.ReduceFpsPunisher.ThreatRating*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.ThreatRating*
        name: ThreatRating
        nameWithType: ReduceFpsPunisher.ThreatRating
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.ThreatRating
      VB:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.ThreatRating*
        name: ThreatRating
        nameWithType: ReduceFpsPunisher.ThreatRating
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.ThreatRating
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.ThreatRating
  GUPS.AntiCheat.Punisher.ReduceFpsPunisher.PunishOnce*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.PunishOnce*
        name: PunishOnce
        nameWithType: ReduceFpsPunisher.PunishOnce
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.PunishOnce
      VB:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.PunishOnce*
        name: PunishOnce
        nameWithType: ReduceFpsPunisher.PunishOnce
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.PunishOnce
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.PunishOnce
  GUPS.AntiCheat.Punisher.ReduceFpsPunisher.HasPunished*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.HasPunished*
        name: HasPunished
        nameWithType: ReduceFpsPunisher.HasPunished
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.HasPunished
      VB:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.HasPunished*
        name: HasPunished
        nameWithType: ReduceFpsPunisher.HasPunished
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.HasPunished
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.HasPunished
  GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Punish*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Punish*
        name: Punish
        nameWithType: ReduceFpsPunisher.Punish
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Punish
      VB:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Punish*
        name: Punish
        nameWithType: ReduceFpsPunisher.Punish
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Punish
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Punisher.ReduceFpsPunisher.Punish
  GUPS.AntiCheat.Punisher.ReduceFpsPunisher:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher
        name: ReduceFpsPunisher
        nameWithType: ReduceFpsPunisher
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher
      VB:
      - id: GUPS.AntiCheat.Punisher.ReduceFpsPunisher
        name: ReduceFpsPunisher
        nameWithType: ReduceFpsPunisher
        qualifiedName: GUPS.AntiCheat.Punisher.ReduceFpsPunisher
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Punisher.ReduceFpsPunisher
  GUPS.AntiCheat.Punisher:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Punisher
        nameWithType: GUPS.AntiCheat.Punisher
        qualifiedName: GUPS.AntiCheat.Punisher
      VB:
      - name: GUPS.AntiCheat.Punisher
        nameWithType: GUPS.AntiCheat.Punisher
        qualifiedName: GUPS.AntiCheat.Punisher
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Punisher
  GUPS.AntiCheat.Settings:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Settings
        nameWithType: GUPS.AntiCheat.Settings
        qualifiedName: GUPS.AntiCheat.Settings
      VB:
      - name: GUPS.AntiCheat.Settings
        nameWithType: GUPS.AntiCheat.Settings
        qualifiedName: GUPS.AntiCheat.Settings
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Settings
  GUPS.AntiCheat.Settings.GlobalSettings:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Settings.GlobalSettings
        name: GlobalSettings
        nameWithType: GlobalSettings
        qualifiedName: GUPS.AntiCheat.Settings.GlobalSettings
      VB:
      - id: GUPS.AntiCheat.Settings.GlobalSettings
        name: GlobalSettings
        nameWithType: GlobalSettings
        qualifiedName: GUPS.AntiCheat.Settings.GlobalSettings
    isDefinition: true
    parent: GUPS.AntiCheat.Settings
    commentId: T:GUPS.AntiCheat.Settings.GlobalSettings
  GUPS.AntiCheat.Settings.GlobalSettings.Instance*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Settings.GlobalSettings.Instance*
        name: Instance
        nameWithType: GlobalSettings.Instance
        qualifiedName: GUPS.AntiCheat.Settings.GlobalSettings.Instance
      VB:
      - id: GUPS.AntiCheat.Settings.GlobalSettings.Instance*
        name: Instance
        nameWithType: GlobalSettings.Instance
        qualifiedName: GUPS.AntiCheat.Settings.GlobalSettings.Instance
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Settings.GlobalSettings.Instance
  GUPS.AntiCheat.Settings.GlobalSettings.LoadAsset*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Settings.GlobalSettings.LoadAsset*
        name: LoadAsset
        nameWithType: GlobalSettings.LoadAsset
        qualifiedName: GUPS.AntiCheat.Settings.GlobalSettings.LoadAsset
      VB:
      - id: GUPS.AntiCheat.Settings.GlobalSettings.LoadAsset*
        name: LoadAsset
        nameWithType: GlobalSettings.LoadAsset
        qualifiedName: GUPS.AntiCheat.Settings.GlobalSettings.LoadAsset
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Settings.GlobalSettings.LoadAsset
  GUPS.AntiCheat.IRandomProvider:
    name:
      CSharp:
      - id: GUPS.AntiCheat.IRandomProvider
        name: IRandomProvider
        nameWithType: IRandomProvider
        qualifiedName: IRandomProvider
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.IRandomProvider
        name: IRandomProvider
        nameWithType: IRandomProvider
        qualifiedName: IRandomProvider
        isExternal: true
    isDefinition: true
    commentId: '!:GUPS.AntiCheat.IRandomProvider'
  GUPS.AntiCheat.Settings.GlobalSettings.RandomProvider*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Settings.GlobalSettings.RandomProvider*
        name: RandomProvider
        nameWithType: GlobalSettings.RandomProvider
        qualifiedName: GUPS.AntiCheat.Settings.GlobalSettings.RandomProvider
      VB:
      - id: GUPS.AntiCheat.Settings.GlobalSettings.RandomProvider*
        name: RandomProvider
        nameWithType: GlobalSettings.RandomProvider
        qualifiedName: GUPS.AntiCheat.Settings.GlobalSettings.RandomProvider
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Settings.GlobalSettings.RandomProvider
  GUPS.AntiCheat.List{EAppStore}:
    name:
      CSharp:
      - id: GUPS.AntiCheat.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: GUPS.AntiCheat.EAppStore
        name: EAppStore
        nameWithType: EAppStore
        qualifiedName: EAppStore
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: GUPS.AntiCheat.EAppStore
        name: EAppStore
        nameWithType: EAppStore
        qualifiedName: EAppStore
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: GUPS.AntiCheat.List`1
    commentId: '!:GUPS.AntiCheat.List{EAppStore}'
  GUPS.AntiCheat.EHashAlgorithm:
    name:
      CSharp:
      - id: GUPS.AntiCheat.EHashAlgorithm
        name: EHashAlgorithm
        nameWithType: EHashAlgorithm
        qualifiedName: EHashAlgorithm
        isExternal: true
      VB:
      - id: GUPS.AntiCheat.EHashAlgorithm
        name: EHashAlgorithm
        nameWithType: EHashAlgorithm
        qualifiedName: EHashAlgorithm
        isExternal: true
    isDefinition: true
  GUPS.AntiCheat.Singleton.Singleton`1.IsPersistent*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Singleton.Singleton`1.IsPersistent*
        name: IsPersistent
        nameWithType: Singleton<T>.IsPersistent
        qualifiedName: GUPS.AntiCheat.Singleton.Singleton<T>.IsPersistent
      VB:
      - id: GUPS.AntiCheat.Singleton.Singleton`1.IsPersistent*
        name: IsPersistent
        nameWithType: Singleton(Of T).IsPersistent
        qualifiedName: GUPS.AntiCheat.Singleton.Singleton(Of T).IsPersistent
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Singleton.Singleton`1.IsPersistent
  GUPS.AntiCheat.Singleton.Singleton`1.Instance*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Singleton.Singleton`1.Instance*
        name: Instance
        nameWithType: Singleton<T>.Instance
        qualifiedName: GUPS.AntiCheat.Singleton.Singleton<T>.Instance
      VB:
      - id: GUPS.AntiCheat.Singleton.Singleton`1.Instance*
        name: Instance
        nameWithType: Singleton(Of T).Instance
        qualifiedName: GUPS.AntiCheat.Singleton.Singleton(Of T).Instance
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Singleton.Singleton`1.Instance
  GUPS.AntiCheat.Singleton.Singleton`1.Exists*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Singleton.Singleton`1.Exists*
        name: Exists
        nameWithType: Singleton<T>.Exists
        qualifiedName: GUPS.AntiCheat.Singleton.Singleton<T>.Exists
      VB:
      - id: GUPS.AntiCheat.Singleton.Singleton`1.Exists*
        name: Exists
        nameWithType: Singleton(Of T).Exists
        qualifiedName: GUPS.AntiCheat.Singleton.Singleton(Of T).Exists
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Singleton.Singleton`1.Exists
  GUPS.AntiCheat.Singleton.Singleton`1.Awake*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Singleton.Singleton`1.Awake*
        name: Awake
        nameWithType: Singleton<T>.Awake
        qualifiedName: GUPS.AntiCheat.Singleton.Singleton<T>.Awake
      VB:
      - id: GUPS.AntiCheat.Singleton.Singleton`1.Awake*
        name: Awake
        nameWithType: Singleton(Of T).Awake
        qualifiedName: GUPS.AntiCheat.Singleton.Singleton(Of T).Awake
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Singleton.Singleton`1.Awake
  GUPS.AntiCheat.Singleton.Singleton`1.OnApplicationQuit*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Singleton.Singleton`1.OnApplicationQuit*
        name: OnApplicationQuit
        nameWithType: Singleton<T>.OnApplicationQuit
        qualifiedName: GUPS.AntiCheat.Singleton.Singleton<T>.OnApplicationQuit
      VB:
      - id: GUPS.AntiCheat.Singleton.Singleton`1.OnApplicationQuit*
        name: OnApplicationQuit
        nameWithType: Singleton(Of T).OnApplicationQuit
        qualifiedName: GUPS.AntiCheat.Singleton.Singleton(Of T).OnApplicationQuit
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Singleton.Singleton`1.OnApplicationQuit
  GUPS.AntiCheat.Singleton.Singleton`1:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Singleton.Singleton`1
        name: Singleton
        nameWithType: Singleton
        qualifiedName: GUPS.AntiCheat.Singleton.Singleton
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: GUPS.AntiCheat.Singleton.Singleton`1
        name: Singleton
        nameWithType: Singleton
        qualifiedName: GUPS.AntiCheat.Singleton.Singleton
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Singleton.Singleton`1
  GUPS.AntiCheat.Singleton:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Singleton
        nameWithType: GUPS.AntiCheat.Singleton
        qualifiedName: GUPS.AntiCheat.Singleton
      VB:
      - name: GUPS.AntiCheat.Singleton
        nameWithType: GUPS.AntiCheat.Singleton
        qualifiedName: GUPS.AntiCheat.Singleton
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Singleton
  GUPS.AntiCheat.Tests.ReaderWriter_Test.Setup*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Setup*
        name: Setup
        nameWithType: ReaderWriter_Test.Setup
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Setup
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Setup*
        name: Setup
        nameWithType: ReaderWriter_Test.Setup
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Setup
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.ReaderWriter_Test.Setup
  GUPS.AntiCheat.Tests.ReaderWriter_Test.PrimitiveTypes_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.PrimitiveTypes_Test*
        name: PrimitiveTypes_Test
        nameWithType: ReaderWriter_Test.PrimitiveTypes_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.PrimitiveTypes_Test
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.PrimitiveTypes_Test*
        name: PrimitiveTypes_Test
        nameWithType: ReaderWriter_Test.PrimitiveTypes_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.PrimitiveTypes_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.ReaderWriter_Test.PrimitiveTypes_Test
  GUPS.AntiCheat.Tests.ReaderWriter_Test.Color_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color_Test*
        name: Color_Test
        nameWithType: ReaderWriter_Test.Color_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color_Test
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color_Test*
        name: Color_Test
        nameWithType: ReaderWriter_Test.Color_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.ReaderWriter_Test.Color_Test
  GUPS.AntiCheat.Tests.ReaderWriter_Test.Color32_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color32_Test*
        name: Color32_Test
        nameWithType: ReaderWriter_Test.Color32_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color32_Test
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color32_Test*
        name: Color32_Test
        nameWithType: ReaderWriter_Test.Color32_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Color32_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.ReaderWriter_Test.Color32_Test
  GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector2_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector2_Test*
        name: Vector2_Test
        nameWithType: ReaderWriter_Test.Vector2_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector2_Test
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector2_Test*
        name: Vector2_Test
        nameWithType: ReaderWriter_Test.Vector2_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector2_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector2_Test
  GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector3_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector3_Test*
        name: Vector3_Test
        nameWithType: ReaderWriter_Test.Vector3_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector3_Test
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector3_Test*
        name: Vector3_Test
        nameWithType: ReaderWriter_Test.Vector3_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector3_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector3_Test
  GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector4_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector4_Test*
        name: Vector4_Test
        nameWithType: ReaderWriter_Test.Vector4_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector4_Test
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector4_Test*
        name: Vector4_Test
        nameWithType: ReaderWriter_Test.Vector4_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector4_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.ReaderWriter_Test.Vector4_Test
  GUPS.AntiCheat.Tests.ReaderWriter_Test.Quaternion_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Quaternion_Test*
        name: Quaternion_Test
        nameWithType: ReaderWriter_Test.Quaternion_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Quaternion_Test
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Quaternion_Test*
        name: Quaternion_Test
        nameWithType: ReaderWriter_Test.Quaternion_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Quaternion_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.ReaderWriter_Test.Quaternion_Test
  GUPS.AntiCheat.Tests.ReaderWriter_Test.Rect_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Rect_Test*
        name: Rect_Test
        nameWithType: ReaderWriter_Test.Rect_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Rect_Test
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Rect_Test*
        name: Rect_Test
        nameWithType: ReaderWriter_Test.Rect_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Rect_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.ReaderWriter_Test.Rect_Test
  GUPS.AntiCheat.Tests.ReaderWriter_Test.Plane_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Plane_Test*
        name: Plane_Test
        nameWithType: ReaderWriter_Test.Plane_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Plane_Test
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Plane_Test*
        name: Plane_Test
        nameWithType: ReaderWriter_Test.Plane_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Plane_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.ReaderWriter_Test.Plane_Test
  GUPS.AntiCheat.Tests.ReaderWriter_Test.Ray_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Ray_Test*
        name: Ray_Test
        nameWithType: ReaderWriter_Test.Ray_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Ray_Test
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Ray_Test*
        name: Ray_Test
        nameWithType: ReaderWriter_Test.Ray_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Ray_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.ReaderWriter_Test.Ray_Test
  GUPS.AntiCheat.Tests.ReaderWriter_Test.Matrix4x4_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Matrix4x4_Test*
        name: Matrix4x4_Test
        nameWithType: ReaderWriter_Test.Matrix4x4_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Matrix4x4_Test
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test.Matrix4x4_Test*
        name: Matrix4x4_Test
        nameWithType: ReaderWriter_Test.Matrix4x4_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test.Matrix4x4_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.ReaderWriter_Test.Matrix4x4_Test
  GUPS.AntiCheat.Tests.ReaderWriter_Test:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test
        name: ReaderWriter_Test
        nameWithType: ReaderWriter_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test
      VB:
      - id: GUPS.AntiCheat.Tests.ReaderWriter_Test
        name: ReaderWriter_Test
        nameWithType: ReaderWriter_Test
        qualifiedName: GUPS.AntiCheat.Tests.ReaderWriter_Test
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Tests.ReaderWriter_Test
  GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test*
        name: Protected_BlockChain_Local_Int32_Test
        nameWithType: Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test*
        name: Protected_BlockChain_Local_Int32_Test
        nameWithType: Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Test
  GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test*
        name: Protected_BlockChain_Local_Int32_Multiple_Blocks_Test
        nameWithType: Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test*
        name: Protected_BlockChain_Local_Int32_Multiple_Blocks_Test
        nameWithType: Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Test
  GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test*
        name: Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test
        nameWithType: Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test*
        name: Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test
        nameWithType: Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_Local_Int32_Multiple_Blocks_Check_Integrity_Test
  GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test*
        name: Protected_BlockChain_File_Int32_Test
        nameWithType: Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test*
        name: Protected_BlockChain_File_Int32_Test
        nameWithType: Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_BlockChain_Tests.Protected_BlockChain_File_Int32_Test
  GUPS.AntiCheat.Tests.Protected_BlockChain_Tests:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests
        name: Protected_BlockChain_Tests
        nameWithType: Protected_BlockChain_Tests
        qualifiedName: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests
        name: Protected_BlockChain_Tests
        nameWithType: Protected_BlockChain_Tests
        qualifiedName: GUPS.AntiCheat.Tests.Protected_BlockChain_Tests
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Tests.Protected_BlockChain_Tests
  GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_Test*
        name: Protected_List_Int32_Test
        nameWithType: Protected_Collection_Tests.Protected_List_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_Test*
        name: Protected_List_Int32_Test
        nameWithType: Protected_Collection_Tests.Protected_List_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_Test
  GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test*
        name: Protected_List_Int32_CheckIntegrity_Test
        nameWithType: Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test*
        name: Protected_List_Int32_CheckIntegrity_Test
        nameWithType: Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_List_Int32_CheckIntegrity_Test
  GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_Test*
        name: Protected_Queue_Int32_Test
        nameWithType: Protected_Collection_Tests.Protected_Queue_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_Test*
        name: Protected_Queue_Int32_Test
        nameWithType: Protected_Collection_Tests.Protected_Queue_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_Test
  GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test*
        name: Protected_Queue_Int32_CheckIntegrity_Test
        nameWithType: Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test*
        name: Protected_Queue_Int32_CheckIntegrity_Test
        nameWithType: Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Queue_Int32_CheckIntegrity_Test
  GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_Test*
        name: Protected_Stack_Int32_Test
        nameWithType: Protected_Collection_Tests.Protected_Stack_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_Test*
        name: Protected_Stack_Int32_Test
        nameWithType: Protected_Collection_Tests.Protected_Stack_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_Test
  GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test*
        name: Protected_Stack_Int32_CheckIntegrity_Test
        nameWithType: Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test*
        name: Protected_Stack_Int32_CheckIntegrity_Test
        nameWithType: Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Collection_Tests.Protected_Stack_Int32_CheckIntegrity_Test
  GUPS.AntiCheat.Tests.Protected_Collection_Tests:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests
        name: Protected_Collection_Tests
        nameWithType: Protected_Collection_Tests
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Collection_Tests
        name: Protected_Collection_Tests
        nameWithType: Protected_Collection_Tests
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Collection_Tests
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Tests.Protected_Collection_Tests
  GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_Test*
        name: Protected_DataChain_Int32_Test
        nameWithType: Protected_DataChain_Tests.Protected_DataChain_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_Test*
        name: Protected_DataChain_Int32_Test
        nameWithType: Protected_DataChain_Tests.Protected_DataChain_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_Test
  GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test*
        name: Protected_DataChain_Int32_CheckIntegrity_Test
        nameWithType: Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test*
        name: Protected_DataChain_Int32_CheckIntegrity_Test
        nameWithType: Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_DataChain_Tests.Protected_DataChain_Int32_CheckIntegrity_Test
  GUPS.AntiCheat.Tests.Protected_DataChain_Tests:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_DataChain_Tests
        name: Protected_DataChain_Tests
        nameWithType: Protected_DataChain_Tests
        qualifiedName: GUPS.AntiCheat.Tests.Protected_DataChain_Tests
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_DataChain_Tests
        name: Protected_DataChain_Tests
        nameWithType: Protected_DataChain_Tests
        qualifiedName: GUPS.AntiCheat.Tests.Protected_DataChain_Tests
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Tests.Protected_DataChain_Tests
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.TearDown*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.TearDown*
        name: TearDown
        nameWithType: Protected_PlayerPrefs_File_Tests.TearDown
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.TearDown
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.TearDown*
        name: TearDown
        nameWithType: Protected_PlayerPrefs_File_Tests.TearDown
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.TearDown
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.TearDown
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test*
        name: HasKey_Exists_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test*
        name: HasKey_Exists_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Exists_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test*
        name: HasKey_Not_Exists_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test*
        name: HasKey_Not_Exists_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Not_Exists_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test*
        name: HasKey_Hashed_Exists_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test*
        name: HasKey_Hashed_Exists_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.HasKey_Hashed_Exists_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test*
        name: Set_Get_Protected_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test*
        name: Set_Get_Protected_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Protected_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test*
        name: Set_Get_Object_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test*
        name: Set_Get_Object_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Set_Get_Object_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Test*
        name: Save_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.Save_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Test*
        name: Save_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.Save_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test*
        name: Save_Encrypted_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test*
        name: Save_Encrypted_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Save_Encrypted_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Test*
        name: Load_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.Load_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Test*
        name: Load_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.Load_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test*
        name: Load_Encrypted_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test*
        name: Load_Encrypted_Test
        nameWithType: Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests.Load_Encrypted_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests
        name: Protected_PlayerPrefs_File_Tests
        nameWithType: Protected_PlayerPrefs_File_Tests
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests
        name: Protected_PlayerPrefs_File_Tests
        nameWithType: Protected_PlayerPrefs_File_Tests
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_File_Tests
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.TearDown*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.TearDown*
        name: TearDown
        nameWithType: Protected_PlayerPrefs_Tests.TearDown
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.TearDown
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.TearDown*
        name: TearDown
        nameWithType: Protected_PlayerPrefs_Tests.TearDown
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.TearDown
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.TearDown
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Exists_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Exists_Test*
        name: HasKey_Exists_Test
        nameWithType: Protected_PlayerPrefs_Tests.HasKey_Exists_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Exists_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Exists_Test*
        name: HasKey_Exists_Test
        nameWithType: Protected_PlayerPrefs_Tests.HasKey_Exists_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Exists_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Exists_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test*
        name: HasKey_Not_Exists_Test
        nameWithType: Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test*
        name: HasKey_Not_Exists_Test
        nameWithType: Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Not_Exists_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test*
        name: HasKey_Hashed_Exists_Test
        nameWithType: Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test*
        name: HasKey_Hashed_Exists_Test
        nameWithType: Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.HasKey_Hashed_Exists_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Protected_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Protected_Test*
        name: Set_Get_Protected_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_Protected_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Protected_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Protected_Test*
        name: Set_Get_Protected_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_Protected_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Protected_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Protected_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Object_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Object_Test*
        name: Set_Get_Object_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_Object_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Object_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Object_Test*
        name: Set_Get_Object_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_Object_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Object_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Object_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test*
        name: Set_Get_Encrypted_Object_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test*
        name: Set_Get_Encrypted_Object_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_Encrypted_Object_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test*
        name: Set_Get_InvalidOwner_Object_ShouldThrowException_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test*
        name: Set_Get_InvalidOwner_Object_ShouldThrowException_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidOwner_Object_ShouldThrowException_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test*
        name: Set_Get_AnyOwner_Object_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test*
        name: Set_Get_AnyOwner_Object_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_AnyOwner_Object_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test*
        name: Set_Get_InvalidSignature_Object_ShouldThrowException_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test*
        name: Set_Get_InvalidSignature_Object_ShouldThrowException_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidSignature_Object_ShouldThrowException_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test*
        name: Set_Get_InvalidType_Object_ShouldThrowException_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test*
        name: Set_Get_InvalidType_Object_ShouldThrowException_Test
        nameWithType: Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests.Set_Get_InvalidType_Object_ShouldThrowException_Test
  GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests
        name: Protected_PlayerPrefs_Tests
        nameWithType: Protected_PlayerPrefs_Tests
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests
        name: Protected_PlayerPrefs_Tests
        nameWithType: Protected_PlayerPrefs_Tests
        qualifiedName: GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Tests.Protected_PlayerPrefs_Tests
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int16_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int16_Test*
        name: Protected_Int16_Test
        nameWithType: Protected_Primitives_Tests.Protected_Int16_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int16_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int16_Test*
        name: Protected_Int16_Test
        nameWithType: Protected_Primitives_Tests.Protected_Int16_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int16_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int16_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int32_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int32_Test*
        name: Protected_Int32_Test
        nameWithType: Protected_Primitives_Tests.Protected_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int32_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int32_Test*
        name: Protected_Int32_Test
        nameWithType: Protected_Primitives_Tests.Protected_Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int32_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int32_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int64_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int64_Test*
        name: Protected_Int64_Test
        nameWithType: Protected_Primitives_Tests.Protected_Int64_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int64_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int64_Test*
        name: Protected_Int64_Test
        nameWithType: Protected_Primitives_Tests.Protected_Int64_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int64_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Int64_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt16_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt16_Test*
        name: Protected_UInt16_Test
        nameWithType: Protected_Primitives_Tests.Protected_UInt16_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt16_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt16_Test*
        name: Protected_UInt16_Test
        nameWithType: Protected_Primitives_Tests.Protected_UInt16_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt16_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt16_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt32_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt32_Test*
        name: Protected_UInt32_Test
        nameWithType: Protected_Primitives_Tests.Protected_UInt32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt32_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt32_Test*
        name: Protected_UInt32_Test
        nameWithType: Protected_Primitives_Tests.Protected_UInt32_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt32_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt32_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt64_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt64_Test*
        name: Protected_UInt64_Test
        nameWithType: Protected_Primitives_Tests.Protected_UInt64_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt64_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt64_Test*
        name: Protected_UInt64_Test
        nameWithType: Protected_Primitives_Tests.Protected_UInt64_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt64_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_UInt64_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Float_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Float_Test*
        name: Protected_Float_Test
        nameWithType: Protected_Primitives_Tests.Protected_Float_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Float_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Float_Test*
        name: Protected_Float_Test
        nameWithType: Protected_Primitives_Tests.Protected_Float_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Float_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Float_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Double_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Double_Test*
        name: Protected_Double_Test
        nameWithType: Protected_Primitives_Tests.Protected_Double_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Double_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Double_Test*
        name: Protected_Double_Test
        nameWithType: Protected_Primitives_Tests.Protected_Double_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Double_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Double_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Decimal_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Decimal_Test*
        name: Protected_Decimal_Test
        nameWithType: Protected_Primitives_Tests.Protected_Decimal_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Decimal_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Decimal_Test*
        name: Protected_Decimal_Test
        nameWithType: Protected_Primitives_Tests.Protected_Decimal_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Decimal_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Decimal_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Bool_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Bool_Test*
        name: Protected_Bool_Test
        nameWithType: Protected_Primitives_Tests.Protected_Bool_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Bool_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Bool_Test*
        name: Protected_Bool_Test
        nameWithType: Protected_Primitives_Tests.Protected_Bool_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Bool_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Bool_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_String_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_String_Test*
        name: Protected_String_Test
        nameWithType: Protected_Primitives_Tests.Protected_String_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_String_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_String_Test*
        name: Protected_String_Test
        nameWithType: Protected_Primitives_Tests.Protected_String_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_String_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_String_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2_Test*
        name: Protected_Vector2_Test
        nameWithType: Protected_Primitives_Tests.Protected_Vector2_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2_Test*
        name: Protected_Vector2_Test
        nameWithType: Protected_Primitives_Tests.Protected_Vector2_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2Int_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2Int_Test*
        name: Protected_Vector2Int_Test
        nameWithType: Protected_Primitives_Tests.Protected_Vector2Int_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2Int_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2Int_Test*
        name: Protected_Vector2Int_Test
        nameWithType: Protected_Primitives_Tests.Protected_Vector2Int_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2Int_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector2Int_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3_Test*
        name: Protected_Vector3_Test
        nameWithType: Protected_Primitives_Tests.Protected_Vector3_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3_Test*
        name: Protected_Vector3_Test
        nameWithType: Protected_Primitives_Tests.Protected_Vector3_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3Int_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3Int_Test*
        name: Protected_Vector3Int_Test
        nameWithType: Protected_Primitives_Tests.Protected_Vector3Int_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3Int_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3Int_Test*
        name: Protected_Vector3Int_Test
        nameWithType: Protected_Primitives_Tests.Protected_Vector3Int_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3Int_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector3Int_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4_Test*
        name: Protected_Vector4_Test
        nameWithType: Protected_Primitives_Tests.Protected_Vector4_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4_Test*
        name: Protected_Vector4_Test
        nameWithType: Protected_Primitives_Tests.Protected_Vector4_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4Int_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4Int_Test*
        name: Protected_Vector4Int_Test
        nameWithType: Protected_Primitives_Tests.Protected_Vector4Int_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4Int_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4Int_Test*
        name: Protected_Vector4Int_Test
        nameWithType: Protected_Primitives_Tests.Protected_Vector4Int_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4Int_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Vector4Int_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Quaternion_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Quaternion_Test*
        name: Protected_Quaternion_Test
        nameWithType: Protected_Primitives_Tests.Protected_Quaternion_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Quaternion_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Quaternion_Test*
        name: Protected_Quaternion_Test
        nameWithType: Protected_Primitives_Tests.Protected_Quaternion_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Quaternion_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_Quaternion_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_DateTime_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_DateTime_Test*
        name: Protected_DateTime_Test
        nameWithType: Protected_Primitives_Tests.Protected_DateTime_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_DateTime_Test
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_DateTime_Test*
        name: Protected_DateTime_Test
        nameWithType: Protected_Primitives_Tests.Protected_DateTime_Test
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_DateTime_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.Protected_Primitives_Tests.Protected_DateTime_Test
  GUPS.AntiCheat.Tests.Protected_Primitives_Tests:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests
        name: Protected_Primitives_Tests
        nameWithType: Protected_Primitives_Tests
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests
      VB:
      - id: GUPS.AntiCheat.Tests.Protected_Primitives_Tests
        name: Protected_Primitives_Tests
        nameWithType: Protected_Primitives_Tests
        qualifiedName: GUPS.AntiCheat.Tests.Protected_Primitives_Tests
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Tests.Protected_Primitives_Tests
  GUPS.AntiCheat.Tests.StorageContainer_Tests.SetUp*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.SetUp*
        name: SetUp
        nameWithType: StorageContainer_Tests.SetUp
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.SetUp
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.SetUp*
        name: SetUp
        nameWithType: StorageContainer_Tests.SetUp
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.SetUp
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.SetUp
  GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_Item_ShouldAddItemToContainer*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_Item_ShouldAddItemToContainer*
        name: Add_Item_ShouldAddItemToContainer
        nameWithType: StorageContainer_Tests.Add_Item_ShouldAddItemToContainer
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_Item_ShouldAddItemToContainer
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_Item_ShouldAddItemToContainer*
        name: Add_Item_ShouldAddItemToContainer
        nameWithType: StorageContainer_Tests.Add_Item_ShouldAddItemToContainer
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_Item_ShouldAddItemToContainer
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_Item_ShouldAddItemToContainer
  GUPS.AntiCheat.Tests.StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer*
        name: Set_Item_ShouldUpdateExistingItemInContainer
        nameWithType: StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer*
        name: Set_Item_ShouldUpdateExistingItemInContainer
        nameWithType: StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.Set_Item_ShouldUpdateExistingItemInContainer
  GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer*
        name: Remove_Item_ShouldRemoveItemFromContainer
        nameWithType: StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer*
        name: Remove_Item_ShouldRemoveItemFromContainer
        nameWithType: StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_Item_ShouldRemoveItemFromContainer
  GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue*
        name: Get_Item_ShouldReturnCorrectValue
        nameWithType: StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue*
        name: Get_Item_ShouldReturnCorrectValue
        nameWithType: StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_Item_ShouldReturnCorrectValue
  GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue*
        name: Get_GenericItem_ShouldReturnCorrectTypedValue
        nameWithType: StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue*
        name: Get_GenericItem_ShouldReturnCorrectTypedValue
        nameWithType: StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_GenericItem_ShouldReturnCorrectTypedValue
  GUPS.AntiCheat.Tests.StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner*
        name: Owner_SetAndGet_ShouldReturnCorrectOwner
        nameWithType: StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner*
        name: Owner_SetAndGet_ShouldReturnCorrectOwner
        nameWithType: StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.Owner_SetAndGet_ShouldReturnCorrectOwner
  GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity*
        name: Write_And_Read_ShouldMaintainDataIntegrity
        nameWithType: StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity*
        name: Write_And_Read_ShouldMaintainDataIntegrity
        nameWithType: StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_And_Read_ShouldMaintainDataIntegrity
  GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_ShouldGenerateSignature*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_ShouldGenerateSignature*
        name: Write_ShouldGenerateSignature
        nameWithType: StorageContainer_Tests.Write_ShouldGenerateSignature
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_ShouldGenerateSignature
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_ShouldGenerateSignature*
        name: Write_ShouldGenerateSignature
        nameWithType: StorageContainer_Tests.Write_ShouldGenerateSignature
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_ShouldGenerateSignature
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.Write_ShouldGenerateSignature
  GUPS.AntiCheat.Tests.StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException*
        name: Read_InvalidSignature_ShouldThrowException
        nameWithType: StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException*
        name: Read_InvalidSignature_ShouldThrowException
        nameWithType: StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.Read_InvalidSignature_ShouldThrowException
  GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException*
        name: Add_DuplicateKey_ShouldThrowException
        nameWithType: StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException*
        name: Add_DuplicateKey_ShouldThrowException
        nameWithType: StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.Add_DuplicateKey_ShouldThrowException
  GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException*
        name: Get_NonExistentKey_ShouldThrowKeyNotFoundException
        nameWithType: StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException*
        name: Get_NonExistentKey_ShouldThrowKeyNotFoundException
        nameWithType: StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.Get_NonExistentKey_ShouldThrowKeyNotFoundException
  GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException*
        name: Remove_NonExistentKey_ShouldNotThrowException
        nameWithType: StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException*
        name: Remove_NonExistentKey_ShouldNotThrowException
        nameWithType: StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageContainer_Tests.Remove_NonExistentKey_ShouldNotThrowException
  GUPS.AntiCheat.Tests.StorageContainer_Tests:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests
        name: StorageContainer_Tests
        nameWithType: StorageContainer_Tests
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests
      VB:
      - id: GUPS.AntiCheat.Tests.StorageContainer_Tests
        name: StorageContainer_Tests
        nameWithType: StorageContainer_Tests
        qualifiedName: GUPS.AntiCheat.Tests.StorageContainer_Tests
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Tests.StorageContainer_Tests
  GUPS.AntiCheat.Tests.StorageItem_Tests.PrimitiveTypes_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.PrimitiveTypes_Test*
        name: PrimitiveTypes_Test
        nameWithType: StorageItem_Tests.PrimitiveTypes_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.PrimitiveTypes_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.PrimitiveTypes_Test*
        name: PrimitiveTypes_Test
        nameWithType: StorageItem_Tests.PrimitiveTypes_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.PrimitiveTypes_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.PrimitiveTypes_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.UnityTypes_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.UnityTypes_Test*
        name: UnityTypes_Test
        nameWithType: StorageItem_Tests.UnityTypes_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.UnityTypes_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.UnityTypes_Test*
        name: UnityTypes_Test
        nameWithType: StorageItem_Tests.UnityTypes_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.UnityTypes_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.UnityTypes_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.ReadWrite_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.ReadWrite_Test*
        name: ReadWrite_Test
        nameWithType: StorageItem_Tests.ReadWrite_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.ReadWrite_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.ReadWrite_Test*
        name: ReadWrite_Test
        nameWithType: StorageItem_Tests.ReadWrite_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.ReadWrite_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.ReadWrite_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.ByteArray_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.ByteArray_Test*
        name: ByteArray_Test
        nameWithType: StorageItem_Tests.ByteArray_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.ByteArray_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.ByteArray_Test*
        name: ByteArray_Test
        nameWithType: StorageItem_Tests.ByteArray_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.ByteArray_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.ByteArray_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.String_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.String_Test*
        name: String_Test
        nameWithType: StorageItem_Tests.String_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.String_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.String_Test*
        name: String_Test
        nameWithType: StorageItem_Tests.String_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.String_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.String_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Boolean_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Boolean_Test*
        name: Boolean_Test
        nameWithType: StorageItem_Tests.Boolean_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Boolean_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Boolean_Test*
        name: Boolean_Test
        nameWithType: StorageItem_Tests.Boolean_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Boolean_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Boolean_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Int16_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Int16_Test*
        name: Int16_Test
        nameWithType: StorageItem_Tests.Int16_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Int16_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Int16_Test*
        name: Int16_Test
        nameWithType: StorageItem_Tests.Int16_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Int16_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Int16_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Int32_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Int32_Test*
        name: Int32_Test
        nameWithType: StorageItem_Tests.Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Int32_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Int32_Test*
        name: Int32_Test
        nameWithType: StorageItem_Tests.Int32_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Int32_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Int32_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Int64_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Int64_Test*
        name: Int64_Test
        nameWithType: StorageItem_Tests.Int64_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Int64_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Int64_Test*
        name: Int64_Test
        nameWithType: StorageItem_Tests.Int64_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Int64_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Int64_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.UInt16_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt16_Test*
        name: UInt16_Test
        nameWithType: StorageItem_Tests.UInt16_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt16_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt16_Test*
        name: UInt16_Test
        nameWithType: StorageItem_Tests.UInt16_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt16_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.UInt16_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.UInt32_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt32_Test*
        name: UInt32_Test
        nameWithType: StorageItem_Tests.UInt32_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt32_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt32_Test*
        name: UInt32_Test
        nameWithType: StorageItem_Tests.UInt32_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt32_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.UInt32_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.UInt64_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt64_Test*
        name: UInt64_Test
        nameWithType: StorageItem_Tests.UInt64_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt64_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt64_Test*
        name: UInt64_Test
        nameWithType: StorageItem_Tests.UInt64_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.UInt64_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.UInt64_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Single_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Single_Test*
        name: Single_Test
        nameWithType: StorageItem_Tests.Single_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Single_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Single_Test*
        name: Single_Test
        nameWithType: StorageItem_Tests.Single_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Single_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Single_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Double_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Double_Test*
        name: Double_Test
        nameWithType: StorageItem_Tests.Double_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Double_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Double_Test*
        name: Double_Test
        nameWithType: StorageItem_Tests.Double_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Double_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Double_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Decimal_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Decimal_Test*
        name: Decimal_Test
        nameWithType: StorageItem_Tests.Decimal_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Decimal_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Decimal_Test*
        name: Decimal_Test
        nameWithType: StorageItem_Tests.Decimal_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Decimal_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Decimal_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Char_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Char_Test*
        name: Char_Test
        nameWithType: StorageItem_Tests.Char_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Char_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Char_Test*
        name: Char_Test
        nameWithType: StorageItem_Tests.Char_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Char_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Char_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Color_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Color_Test*
        name: Color_Test
        nameWithType: StorageItem_Tests.Color_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Color_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Color_Test*
        name: Color_Test
        nameWithType: StorageItem_Tests.Color_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Color_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Color_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Color32_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Color32_Test*
        name: Color32_Test
        nameWithType: StorageItem_Tests.Color32_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Color32_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Color32_Test*
        name: Color32_Test
        nameWithType: StorageItem_Tests.Color32_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Color32_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Color32_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2_Test*
        name: Vector2_Test
        nameWithType: StorageItem_Tests.Vector2_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2_Test*
        name: Vector2_Test
        nameWithType: StorageItem_Tests.Vector2_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2Int_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2Int_Test*
        name: Vector2Int_Test
        nameWithType: StorageItem_Tests.Vector2Int_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2Int_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2Int_Test*
        name: Vector2Int_Test
        nameWithType: StorageItem_Tests.Vector2Int_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2Int_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Vector2Int_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3_Test*
        name: Vector3_Test
        nameWithType: StorageItem_Tests.Vector3_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3_Test*
        name: Vector3_Test
        nameWithType: StorageItem_Tests.Vector3_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3Int_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3Int_Test*
        name: Vector3Int_Test
        nameWithType: StorageItem_Tests.Vector3Int_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3Int_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3Int_Test*
        name: Vector3Int_Test
        nameWithType: StorageItem_Tests.Vector3Int_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3Int_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Vector3Int_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Vector4_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector4_Test*
        name: Vector4_Test
        nameWithType: StorageItem_Tests.Vector4_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector4_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector4_Test*
        name: Vector4_Test
        nameWithType: StorageItem_Tests.Vector4_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Vector4_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Vector4_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Quaternion_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Quaternion_Test*
        name: Quaternion_Test
        nameWithType: StorageItem_Tests.Quaternion_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Quaternion_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Quaternion_Test*
        name: Quaternion_Test
        nameWithType: StorageItem_Tests.Quaternion_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Quaternion_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Quaternion_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Rect_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Rect_Test*
        name: Rect_Test
        nameWithType: StorageItem_Tests.Rect_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Rect_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Rect_Test*
        name: Rect_Test
        nameWithType: StorageItem_Tests.Rect_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Rect_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Rect_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Plane_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Plane_Test*
        name: Plane_Test
        nameWithType: StorageItem_Tests.Plane_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Plane_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Plane_Test*
        name: Plane_Test
        nameWithType: StorageItem_Tests.Plane_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Plane_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Plane_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Ray_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Ray_Test*
        name: Ray_Test
        nameWithType: StorageItem_Tests.Ray_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Ray_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Ray_Test*
        name: Ray_Test
        nameWithType: StorageItem_Tests.Ray_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Ray_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Ray_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests.Matrix4x4_Test*:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Matrix4x4_Test*
        name: Matrix4x4_Test
        nameWithType: StorageItem_Tests.Matrix4x4_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Matrix4x4_Test
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests.Matrix4x4_Test*
        name: Matrix4x4_Test
        nameWithType: StorageItem_Tests.Matrix4x4_Test
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests.Matrix4x4_Test
    isDefinition: true
    commentId: Overload:GUPS.AntiCheat.Tests.StorageItem_Tests.Matrix4x4_Test
  GUPS.AntiCheat.Tests.StorageItem_Tests:
    name:
      CSharp:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests
        name: StorageItem_Tests
        nameWithType: StorageItem_Tests
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests
      VB:
      - id: GUPS.AntiCheat.Tests.StorageItem_Tests
        name: StorageItem_Tests
        nameWithType: StorageItem_Tests
        qualifiedName: GUPS.AntiCheat.Tests.StorageItem_Tests
    isDefinition: true
    commentId: T:GUPS.AntiCheat.Tests.StorageItem_Tests
  GUPS.AntiCheat.Tests:
    name:
      CSharp:
      - name: GUPS.AntiCheat.Tests
        nameWithType: GUPS.AntiCheat.Tests
        qualifiedName: GUPS.AntiCheat.Tests
      VB:
      - name: GUPS.AntiCheat.Tests
        nameWithType: GUPS.AntiCheat.Tests
        qualifiedName: GUPS.AntiCheat.Tests
    isDefinition: true
    commentId: N:GUPS.AntiCheat.Tests
